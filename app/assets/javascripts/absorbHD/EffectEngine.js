// Effect Game Engine
// Copyright (c) 2005 - 2009 Effect Games LLC and Joseph Huckaby.
// All rights reserved.  Patent Pending.

document.write('<div id="effect_container" style="position:relative;"><div id="effect_port" style="position:relative; overflow:hidden; z-index:2;" onselectstart="return false"></div><div id="effect_toolbar" style="height:24px; position:relative; overflow:hidden; z-index:1;"><div id="et_left_border" style="float:left; width:4px; height:24px; z-index:2;"></div><div id="et_logo" style="position:absolute; left:0px; top:0px; width:160px; height:96px; cursor:pointer; z-index:2;" title="EffectGames.com"></div><div id="et_right_border" style="float:right; width:4px; height:24px; z-index:2;"></div><div id="et_loading_bar" style="position:absolute; width:116px; height:24px; display:none;"><div id="et_lb_divider" style="position:absolute; left:0px; top:0px; width:8px; height:24px;"></div><div id="et_lb_outer" style="position:absolute; width:100px; height:16px; left:12px; top:4px; overflow:hidden;"><div id="et_lb_inner_under" style="position:absolute; width:100px; height:16px; left:0px; top:0px; z-index:1;"></div><div id="et_lb_inner_over" style="position:absolute; width:100px; height:16px; left:-100px; top:0px; z-index:2;"></div></div></div><div id="et_icon_shelf" style="position:absolute; height:24px; display:none; z-index:2"></div><div id="et_msgs" style="position:absolute; width:168px; height:48px; display:none; z-index:1"></div><div style="clear:both;"></div></div><div id="effect_overlay" style="position:absolute; display:none; left:0px; top:0px; width:1px; height:1px; z-index:4;" onselectstart="return false"></div><div id="effect_dialog" style="position:absolute; display:none; left:0px; top:0px; width:1px; height:1px; z-index:5;"></div></div>');var EffectAudioOggReady = true; var Effect = {};; function uJ_(name) { try { eval('var foo = ' + name + ';'); } catch (e) { return false; } return true; } var Namespace = { create: function(path) { var container = null; while (path.match(/^(\w+)\.?/)) { var key = RegExp.$1; path = path.replace(/^(\w+)\.?/, ""); if (!container) { if (!uJ_(key)) eval('window.' + key + ' = {};'); eval('container = ' + key + ';'); } else { if (!container[key]) container[key] = {}; container = container[key]; } } }, prep: function(name) { if (name.match(/^(.+)\.(\w+)$/)) { var path = RegExp.$1; name = RegExp.$2; Namespace.create(path); } return { name: name }; } }; var Class = { create: function(name, members) { if (!name && !members) {
return( function() { if (this.initialize) this.initialize.apply(this, arguments); else if (this.__construct) this.__construct.apply(this, arguments); } ); } ; if (!members) members = {}; members.__parent = null; var ns = Namespace.prep(name); var full_name = name; name = ns.name; members.__name = name; if (!members.__construct) members.__construct = function() {}; var obj = null; eval( full_name + ' = obj = members.__construct;' ); var static_members = members.__static; if (static_members) { for (var key in static_members) { obj[key] = static_members[key]; } } obj.prototype = members; obj.extend = obj.subclass = function(name, members) { Class.subclass( this, name, members ); }; obj.set = obj.add = function(members) { Class.add( this, members ); }; }, subclass: function(parent, name, members) { ; ; if (!members) members = {}; members.__name = name; members.__parent = parent.prototype; var ns = Namespace.prep(name); var subname = ns.name; var obj = null; if (members.__construct) { eval( name + ' = obj = members.__construct;' );
} else { var code = parent.toString(); var args = code.substring( code.indexOf("(")+1, code.indexOf(")") ); var inner_code = code.substring( code.indexOf("{")+1, code.lastIndexOf("}") ); eval('members.__construct = ' + name + ' = obj = function ('+args+') {'+inner_code+'};'); } if (parent.prototype.__static) { for (var key in parent.prototype.__static) { obj[key] = parent.prototype.__static[key]; } } var static_members = members.__static; if (static_members) { for (var key in static_members) { obj[key] = static_members[key]; } } obj.prototype = new parent(); for (var key in members) obj.prototype[key] = members[key]; obj.extend = obj.subclass = function(name, members) { Class.subclass( this, name, members ); }; obj.set = obj.add = function(members) { Class.add( this, members ); }; }, add: function(obj, members) { for (var key in members) obj.prototype[key] = members[key]; }, require: function() { for (var idx = 0, len = arguments.length; idx < len; idx++) { ; } return true; } }; Class.extend = Class.subclass; Class.set = Class.add; if (!window.assert) window.assert = function(fact, msg) {
if (!fact) return alert("ASSERT FAILED! " + msg); return fact; };; function XML(_RI) { if (!_RI) _RI = ''; if (sex(_RI)) { for (var LwV in _RI) this[LwV] = _RI[LwV]; } else this.text = args || ''; this.tree = {}; this.errors = []; this.Nwd = []; this.vsB = []; this.Kfc = ''; this.patTag.lastIndex = 0; if (this.text) this.parse(); } XML.iLj = "\t"; XML.zeo = '<?xml version="1.0"?>'; XML.Bdv = /^\w[\w\-\:]*$/; XML.prototype.preserveAttributes = false; XML.prototype.patTag = /([^<]*?)<([^>]+)>/g; XML.prototype.patSpecialTag = /^\s*([\!\?])/; XML.prototype.patPITag = /^\s*\?/; XML.prototype.patCommentTag = /^\s*\!--/; XML.prototype.patDTDTag = /^\s*\!DOCTYPE/; XML.prototype.patCDATATag = /^\s*\!\s*\[\s*CDATA/; XML.prototype.patStandardTag = /^\s*(\/?)([\w\-\:\.]+)\s*(.*)$/; XML.prototype.patSelfClosing = /\/\s*$/; XML.prototype.patAttrib = new RegExp("([\\w\\-\\:\\.]+)\\s*=\\s*([\\\"\\'])([^\\2]*?)\\2", "g"); XML.prototype.patPINode = /^\s*\?\s*([\w\-\:]+)\s*(.*)$/; XML.prototype.patEndComment = /--$/; XML.prototype.patNextClose = /([^>]*?)>/g; XML.prototype.patExternalDTDNode = new RegExp("^\\s*\\!DOCTYPE\\s+([\\w\\-\\:]+)\\s+(SYSTEM|PUBLIC)\\s+\\\"([^\\\"]+)\\\""); XML.prototype.patInlineDTDNode = /^\s*\!DOCTYPE\s+([\w\-\:]+)\s+\[/; XML.prototype.patEndDTD = /\]$/; XML.prototype.patDTDNode = /^\s*\!DOCTYPE\s+([\w\-\:]+)\s+\[(.*)\]/; XML.prototype.patEndCDATA = /\]\]$/; XML.prototype.patCDATANode = /^\s*\!\s*\[\s*CDATA\s*\[(.*)\]\]/; XML.prototype.attribsKey = '_Attribs';
XML.prototype.dataKey = '_Data'; XML.prototype.parse = function(branch, name) { if (!branch) branch = this.tree; if (!name) name = null; var foundClosing = false; var matches = null; while ( matches = this.patTag.exec(this.text) ) { var before = matches[1]; var tag = matches[2]; if (before.match(/\S/)) { if (typeof(branch[this.dataKey]) != 'undefined') branch[this.dataKey] += ' '; else branch[this.dataKey] = ''; branch[this.dataKey] += nlL(asy(before)); } if (tag.match(this.patSpecialTag)) { if (tag.match(this.patPITag)) tag = this.parsePINode(tag); else if (tag.match(this.patCommentTag)) tag = this.parseCommentNode(tag); else if (tag.match(this.patDTDTag)) tag = this.parseDTDNode(tag); else if (tag.match(this.patCDATATag)) { tag = this.parseCDATANode(tag); if (typeof(branch[this.dataKey]) != 'undefined') branch[this.dataKey] += ' '; else branch[this.dataKey] = ''; branch[this.dataKey] += nlL(asy(tag)); } else { this.throwParseError( "Malformed special tag", tag ); break; } if (tag == null) break; continue; } else { var matches = tag.match(this.patStandardTag); if (!matches) { this.throwParseError( "Malformed tag", tag ); break; } var closing = matches[1]; var nodeName = matches[2]; var attribsRaw = matches[3]; if (closing) { if (nodeName == (name || '')) {
foundClosing = 1; break; } else { this.throwParseError( "Mismatched closing tag (expected </" + name + ">)", tag ); break; } } else { var selfClosing = !!attribsRaw.match(this.patSelfClosing); var leaf = {}; var attribs = leaf; if (this.preserveAttributes) { leaf[this.attribsKey] = {}; attribs = leaf[this.attribsKey]; } this.patAttrib.lastIndex = 0; while ( matches = this.patAttrib.exec(attribsRaw) ) { attribs[ matches[1] ] = asy( matches[3] ); } if (this.preserveAttributes && !jME(attribs)) { delete leaf[this.attribsKey]; } if (!selfClosing) { this.parse( leaf, nodeName ); if (this.error()) break; } var num_leaf_keys = jME(leaf); if ((typeof(leaf[this.dataKey]) != 'undefined') && (num_leaf_keys == 1)) { leaf = leaf[this.dataKey]; } else if (!num_leaf_keys) { leaf = ''; } if (typeof(branch[nodeName]) != 'undefined') { if (JZc(branch[nodeName])) { JGI( branch[nodeName], leaf ); } else { var temp = branch[nodeName];
branch[nodeName] = [ temp, leaf ]; } } else { branch[nodeName] = leaf; } if (this.error() || (branch == this.tree)) break; } } } if (name && !foundClosing) { this.throwParseError( "Missing closing tag (expected </" + name + ">)", name ); } if (branch == this.tree) { if (typeof(this.tree[this.dataKey]) != 'undefined') delete this.tree[this.dataKey]; if (jME(this.tree) > 1) { this.throwParseError( 'Only one top-level node is allowed in document', ysa(this.tree) ); return; } this.Kfc = ysa(this.tree); if (this.Kfc) { this.tree = this.tree[this.Kfc]; } } }; XML.prototype.throwParseError = function(key, tag) { var parsedSource = this.text.substring(0, this.patTag.lastIndex); var eolMatch = parsedSource.match(/\n/g); var lineNum = (eolMatch ? eolMatch.length : 0) + 1; lineNum -= tag.match(/\n/) ? tag.match(/\n/g).length : 0; JGI(this.errors, { type: 'Parse', key: key, text: '<' + tag + '>', line: lineNum }); }; XML.prototype.error = function() { return this.errors.length; };
XML.prototype.getError = function(error) { var text = ''; if (!error) return ''; text = (error.type || 'General') + ' Error'; if (error.code) text += ' ' + error.code; text += ': ' + error.key; if (error.line) text += ' on line ' + error.line; if (error.text) text += ': ' + error.text; return text; }; XML.prototype.getLastError = function() { if (!this.error()) return ''; return this.getError( this.errors[this.errors.length - 1] ); }; XML.prototype.parsePINode = function(tag) { if (!tag.match(this.patPINode)) { this.throwParseError( "Malformed processor instruction", tag ); return null; } JGI( this.Nwd, tag ); return tag; }; XML.prototype.parseCommentNode = function(tag) { var matches = null; this.patNextClose.lastIndex = this.patTag.lastIndex; while (!tag.match(this.patEndComment)) { if (matches = this.patNextClose.exec(this.text)) { tag += '>' + matches[1]; } else { this.throwParseError( "Unclosed comment tag", tag ); return null; } } this.patTag.lastIndex = this.patNextClose.lastIndex; return tag; }; XML.prototype.parseDTDNode = function(tag) { var matches = null; if (tag.match(this.patExternalDTDNode)) {
JGI( this.vsB, tag ); } else if (tag.match(this.patInlineDTDNode)) { this.patNextClose.lastIndex = this.patTag.lastIndex; while (!tag.match(this.patEndDTD)) { if (matches = this.patNextClose.exec(this.text)) { tag += '>' + matches[1]; } else { this.throwParseError( "Unclosed DTD tag", tag ); return null; } } this.patTag.lastIndex = this.patNextClose.lastIndex; if (tag.match(this.patDTDNode)) { JGI( this.vsB, tag ); } else { this.throwParseError( "Malformed DTD tag", tag ); return null; } } else { this.throwParseError( "Malformed DTD tag", tag ); return null; } return tag; }; XML.prototype.parseCDATANode = function(tag) { var matches = null; this.patNextClose.lastIndex = this.patTag.lastIndex; while (!tag.match(this.patEndCDATA)) { if (matches = this.patNextClose.exec(this.text)) { tag += '>' + matches[1]; } else { this.throwParseError( "Unclosed CDATA tag", tag ); return null; } }
this.patTag.lastIndex = this.patNextClose.lastIndex; if (matches = tag.match(this.patCDATANode)) { return matches[1]; } else { this.throwParseError( "Malformed CDATA tag", tag ); return null; } }; XML.prototype.getTree = function() { return this.tree; }; XML.prototype.compose = function() { var raw = VFl( this.Kfc, this.tree ); var body = raw.substring( raw.indexOf("\n") + 1, raw.length ); var xml = ''; if (this.Nwd.length) { for (var idx = 0, len = this.Nwd.length; idx < len; idx++) { xml += '<' + this.Nwd[idx] + '>' + "\n"; } } else { xml += XML.zeo + "\n"; } if (this.vsB.length) { for (var idx = 0, len = this.vsB.length; idx < len; idx++) { xml += '<' + this.vsB[idx] + '>' + "\n"; } } xml += body; return xml; }; function PtN(text) { var parser = new XML(text); return parser.error() ? parser.getLastError() : parser.getTree(); } function nlL(text) { if (text == null) return ''; if (text && text.replace) { text = text.replace(/^\s+/, "");
text = text.replace(/\s+$/, ""); } return text; } function dcI(text) { if (text == null) return ''; if (text && text.replace) { text = text.replace(/\&/g, "&amp;"); text = text.replace(/</g, "&lt;"); text = text.replace(/>/g, "&gt;"); } return text; } function Lpy(text) { if (text == null) return ''; if (text && text.replace) { text = text.replace(/\&/g, "&amp;"); text = text.replace(/</g, "&lt;"); text = text.replace(/>/g, "&gt;"); text = text.replace(/\"/g, "&quot;"); text = text.replace(/\'/g, "&apos;"); } return text; } function asy(text) { if (text == null) return ''; if (text && text.replace) { text = text.replace(/\&lt\;/g, "<"); text = text.replace(/\&gt\;/g, ">"); text = text.replace(/\&quot\;/g, '"'); text = text.replace(/\&apos\;/g, "'"); text = text.replace(/\&amp\;/g, "&"); } return text; } function VFl(name, node, indent) { var xml = ""; if (!indent) { indent = 0; xml = XML.zeo + "\n";
} var indent_text = ""; for (var k = 0; k < indent; k++) indent_text += XML.iLj; if ((typeof(node) == 'object') && (node != null)) { if (!node.length) { xml += indent_text + "<" + name; var jME = 0; var has_attribs = 0; for (var key in node) jME++; if (node["_Attribs"]) { has_attribs = 1; var sorted_keys = FET(node["_Attribs"]).sort(); for (var idx = 0, len = sorted_keys.length; idx < len; idx++) { var key = sorted_keys[idx]; xml += " " + key + "=\"" + Lpy(node["_Attribs"][key]) + "\""; } } if (jME > has_attribs) { xml += ">"; if (node["_Data"]) { xml += dcI(node["_Data"]) + "</" + name + ">\n"; } else { xml += "\n"; var sorted_keys = FET(node).sort(); for (var idx = 0, len = sorted_keys.length; idx < len; idx++) { var key = sorted_keys[idx]; if ((key != "_Attribs") && key.match(XML.Bdv)) { xml += VFl( key, node[key], indent + 1 ); } } xml += indent_text + "</" + name + ">\n"; } } else { xml += "/>\n"; } } else { for (var idx = 0; idx < node.length; idx++) {
xml += VFl( name, node[idx], indent ); } } } else { xml += indent_text + "<" + name + ">" + dcI(node) + "</" + name + ">\n"; } return xml; } function JwD(HCD, oqc) { var Emu = 0; for (var QzD in oqc) Emu++; HCD = Esx(HCD); for (var QzD = 0, _aT = HCD.length; QzD < _aT; QzD++) { var van = 0; for (var xwl in oqc) { if (HCD[QzD][xwl] && (HCD[QzD][xwl] == oqc[xwl])) van++; else if (HCD[QzD]["_Attribs"] && HCD[QzD]["_Attribs"][xwl] && (HCD[QzD]["_Attribs"][xwl] == oqc[xwl])) van++; } if (van >= Emu) return HCD[QzD]; } return null; } function zBR(HCD, oqc) { var kya = []; var Emu = 0; for (var QzD in oqc) Emu++; HCD = Esx(HCD); for (var QzD = 0, _aT = HCD.length; QzD < _aT; QzD++) { var van = 0; for (var xwl in oqc) { if (HCD[QzD][xwl] && HCD[QzD][xwl] == oqc[xwl]) van++; else if (HCD[QzD]["_Attribs"] && HCD[QzD]["_Attribs"][xwl] && (HCD[QzD]["_Attribs"][xwl] == oqc[xwl])) van++; } if (van >= Emu) JGI( kya, HCD[QzD] ); } return kya; } function jmP(HCD, oqc) { var Emu = 0;
for (var QzD in oqc) Emu++; HCD = Esx(HCD); for (var nzz = 0, _aT = HCD.length; nzz < _aT; nzz++) { var van = 0; for (var xwl in oqc) { if (HCD[nzz][xwl] && (HCD[nzz][xwl] == oqc[xwl])) van++; else if (HCD[nzz]["_Attribs"] && HCD[nzz]["_Attribs"][xwl] && (HCD[nzz]["_Attribs"][xwl] == oqc[xwl])) van++; } if (van >= Emu) return nzz; } return -1; } function Esx(HCD, LwV) { if (LwV) { if ((typeof(HCD[LwV]) != 'object') || (typeof(HCD[LwV].length) == 'undefined')) { var Jpy = HCD[LwV]; delete HCD[LwV]; HCD[LwV] = []; HCD[LwV][0] = Jpy; } return null; } else { if ((typeof(HCD) != 'object') || (typeof(HCD.length) == 'undefined')) { return [ HCD ]; } else return HCD; } } function FET(nbO) { var hXT = []; for (var LwV in nbO) hXT.push(LwV); return hXT; } function fos(NgV) { var nbO = {}; for (var nzz = 0, _aT = NgV.length; nzz < _aT; nzz++) { nbO[ NgV[nzz] ] = 1; } return nbO; } function serialize(rEQ, ZqX) {
if (!ZqX) ZqX = ':'; var HNo = ''; if (typeof(rEQ) == 'number') { HNo += rEQ; } else if (typeof(rEQ) == 'string') { HNo += '"' + rEQ.replace(/([\"\\])/g, '\\$1').replace(/\r/g, "\\r").replace(/\n/g, "\\n") + '"'; } else if (sex(rEQ)) { var Qpn = 0; var DOZ = []; for (var LwV in rEQ) { DOZ[Qpn] = (LwV.match(/^\w+$/) ? LwV : ('"'+LwV+'"')) + ZqX + serialize(rEQ[LwV], ZqX); Qpn++; } HNo += '{' + DOZ.join(',') + '}'; } else if (JZc(rEQ)) { var DOZ = []; for (var nzz = 0, _aT = rEQ.length; nzz < _aT; nzz++) { DOZ[nzz] = serialize(rEQ[nzz], ZqX); } HNo += '[' + DOZ.join(',') + ']'; } else { HNo += '0'; } return HNo; } function merge_objects(QzD, xwl) { if (!QzD) QzD = {}; if (!xwl) xwl = {}; var ybV = {}; if (typeof(QzD) != 'object') eval( "QzD = " + QzD ); if (typeof(xwl) != 'object') eval( "xwl = " + xwl ); for (var LwV in QzD) ybV[LwV] = QzD[LwV]; for (var LwV in xwl) ybV[LwV] = xwl[LwV]; return ybV; } function LIu(HCD) {
var Quz = {}; for (var LwV in HCD) Quz[LwV] = HCD[LwV]; return Quz; } function Fjr(HCD) { if (sex(HCD)) { var Quz = {}; for (var LwV in HCD) { if (sex(HCD[LwV]) || JZc(HCD[LwV])) Quz[LwV] = Fjr(HCD[LwV]); else Quz[LwV] = HCD[LwV]; } return Quz; } else if (JZc(HCD)) { var Quz = []; for (var nzz = 0, _aT = HCD.length; nzz < _aT; nzz++) { if (sex(HCD[nzz]) || JZc(HCD[nzz])) Quz[nzz] = Fjr(HCD[nzz]); else Quz[nzz] = HCD[nzz]; } return Quz; } return null; } function Cij(HCD) { var Quz = {}; if (HCD.length) Quz = []; for (var LwV in HCD) { var ZzD = LwV.toLowerCase ? LwV.toLowerCase() : LwV; if (typeof(HCD[LwV]) == 'object') Quz[ZzD] = Cij( HCD[LwV] ); else Quz[ZzD] = HCD[LwV]; } return Quz; } function jME(nbO) { var WBO = 0; for (var QzD in nbO) WBO++;
return WBO; } function kMt(GAq) { var ynh = ''; if (GAq) { for (var LwV in GAq) { ynh += " " + LwV + "=\"" + GAq[LwV] + "\""; } } return ynh; } function sex(yqq) { return( !!yqq && (typeof(yqq) == 'object') && (typeof(yqq.length) == 'undefined') ); } function JZc(yqq) { if (typeof(yqq) == 'array') return true; return( !!yqq && (typeof(yqq) == 'object') && (typeof(yqq.length) != 'undefined') ); } function ysa(nbO) { for (var LwV in nbO) return LwV; return null; } function JGI(hXT, KSy) { hXT[ hXT.length ] = KSy; } function hmd(hXT, sMO, UYl) { if (!UYl) UYl = hXT.length; var Gnl = []; for (var nzz = sMO; nzz < UYl; nzz++) { if (nzz < hXT.length) JGI( Gnl, hXT[nzz] ); } return Gnl; } function DJl(QzD, xwl) { var ybV = []; for (var nzz = 0; nzz < QzD.length; nzz++) JGI( ybV, QzD[nzz] ); for (var nzz = 0; nzz < xwl.length; nzz++) JGI( ybV, xwl[nzz] ); return ybV; } function IXR(QzD, xwl) {
for (var nzz = 0; nzz < xwl.length; nzz++) JGI( QzD, xwl[nzz] ); } ; var ua; (function() { var u = navigator.userAgent; var chrome = !!u.match(/Chrome/); var safari = !!u.match(/Safari/) && !chrome; var safari3 = safari && !!u.match(/Version\D[3456789]/); var safari2 = safari && !safari3; var ie = !!u.match(/MSIE/); var ie6 = ie && !!u.match(/MSIE\s+6/); var ie7 = ie && !!u.match(/MSIE\s+7/); var ie8 = ie && !!u.match(/MSIE\s+8/); var moz = !safari && !ie; var op = !!window.opera; var mac = !!u.match(/Mac/i); var ff = !!u.match(/Firefox/); var ff3 = !!u.match(/(Firefox|Minefield)\D+[3456789]/); var iphone = !!u.match(/(iPhone|iPad)/); var snow = !!u.match(/Mac\s+OS\s+X\s+10\D[6789]/); var titanium = safari && !!u.match(/Titanium/); var ver = 0; if (ff && u.match(/Firefox\D+(\d+(\.\d+)?)/)) { ver = parseFloat( RegExp.$1 ); } else if (safari && u.match(/Version\D(\d+(\.\d+)?)/)) { ver = parseFloat( RegExp.$1 ); } else if (chrome && u.match(/Chrome\D(\d+(\.\d+)?)/)) { ver = parseFloat( RegExp.$1 ); } else if (ie && u.match(/MSIE\D+(\d+(\.\d+)?)/)) { ver = parseFloat( RegExp.$1 ); } else if (op && u.match(/Opera\D+(\d+(\.\d+)?)/)) { ver = parseFloat( RegExp.$1 ); } ua = { safari: safari,
safari3: safari3, safari2: safari2, ie: ie, ie8: ie8, ie7: ie7, ie6: ie6, moz: moz, op: op, mac: mac, ff: ff, ff3: ff3, chrome: chrome, iphone: iphone, snow: snow, titanium: titanium, clipnest: ie6 || safari, ver: ver }; })(); var EIG = location.protocol.match(/https/i) ? 'https' : 'http'; function nyZ(iDL) { var lbQ = {}; var enM = null; iDL = iDL.replace(/^.*\?(.+)$/,'$1'); while ((enM = iDL.match(/([^=]+)=\'?([^\&\']*)\'?\&?/)) && enM[0].length) { iDL = iDL.substring( enM[0].length ); lbQ[enM[1]] = unescape(enM[2]); } return lbQ; } var ICK = nyZ( location.search ); var rer = 772; function rTx() { rer++; return rer; } function qNl() { var pBd = new Date(); return pBd.getTime() / 1000; }
function SKE(e, HCD) { if (!HCD) return false; var qlK = Lvj(e, HCD); return ((qlK.x >= 0) && (qlK.y >= 0) && (qlK.x < HCD.offsetWidth) && (qlK.y < HCD.offsetHeight)); } function ijt(dom) { if (!dom) dom = window; var scrOfX = 0, scrOfY = 0; if( typeof( dom.pageYOffset ) == 'number' ) { scrOfY = dom.pageYOffset; scrOfX = dom.pageXOffset; } else if( dom.document.body && ( dom.document.body.scrollLeft || dom.document.body.scrollTop ) ) { scrOfY = dom.document.body.scrollTop; scrOfX = dom.document.body.scrollLeft; } else if( dom.document.documentElement && ( dom.document.documentElement.scrollLeft || dom.document.documentElement.scrollTop ) ) { scrOfY = dom.document.documentElement.scrollTop; scrOfX = dom.document.documentElement.scrollLeft; } return { x: scrOfX, y: scrOfY }; } function Lvj(e, HCD) { var qlK = new Point(); if (document.all) { var HFp = ijt(); qlK.x = e.clientX + HFp.x; qlK.y = e.clientY + HFp.y; } else { qlK.x = e.pageX; qlK.y = e.pageY; } if (HCD) { var RUp = hGi(HCD); qlK.x -= RUp.left; qlK.y -= RUp.top; } return qlK; } function hGi(HCD) { var RUp = {
left: 0, top: 0, width: HCD.width ? HCD.width : HCD.offsetWidth, height: HCD.height ? HCD.height : HCD.offsetHeight }; while (HCD) { RUp.left += HCD.offsetLeft; RUp.top += HCD.offsetTop; HCD = HCD.offsetParent; } return RUp; } function easeOutInt(kMU, E_r) { if (!E_r) E_r = 2; if (!parseInt(kMU / E_r, 10)) { if ((kMU < 1) && (kMU > -1)) kMU = 0; else if (kMU < 0) kMU++; else if (kMU > 0) kMU--; } else kMU -= parseInt( kMU / E_r, 10 ); return kMU; } function easeFloat(kMU, E_r, cAz, MLK) { if (!E_r) E_r = 2; if (!cAz) cAz = -1; if (!MLK) MLK = 0.5; kMU += ((kMU / E_r) * cAz); if (Math.abs(kMU) < MLK) kMU = (cAz < 0) ? 0 : MLK; return kMU; } function edk(gRP, AZQ, kMU) { var zex = []; for (var acQ = 0; acQ < gRP; acQ++) { zex[acQ] = []; for (var hfU = 0; hfU < AZQ; hfU++) zex[acQ][hfU] = kMU; } return zex; } function probably(value) { if (typeof(value) == 'undefined') { return 1; }
return ( Math.random() < value ) ? 1 : 0; } function RRP(HCD, K_Y) { if (K_Y == 0.0) { HCD.style.opacity = 1.0; if (ua.moz) HCD.style.MozOpacity = 1.0; else if (ua.ie) HCD.style.filter = ""; HCD.style.visibility = 'hidden'; } else if (K_Y == 1.0) { HCD.style.opacity = 1.0; if (ua.moz) HCD.style.MozOpacity = 1.0; else if (ua.ie) HCD.style.filter = ""; HCD.style.visibility = 'visible'; } else { HCD.style.opacity = K_Y; if (ua.moz) HCD.style.MozOpacity = K_Y; else if (ua.ie) HCD.style.filter = "alpha(opacity=" + parseInt(K_Y * 100, 10) + ")"; HCD.style.visibility = 'visible'; } } function BxF(Vcf) { if (!Vcf) Vcf = window; var SCG = 0; var AfD = 0; if( typeof( Vcf.innerWidth ) == 'number' ) { SCG = Vcf.innerWidth; AfD = Vcf.innerHeight; } else if( Vcf.document.documentElement && ( Vcf.document.documentElement.clientWidth || Vcf.document.documentElement.clientHeight ) ) { SCG = Vcf.document.documentElement.clientWidth; AfD = Vcf.document.documentElement.clientHeight; } else if( Vcf.document.body && ( Vcf.document.body.clientWidth || Vcf.document.body.clientHeight ) ) { SCG = Vcf.document.body.clientWidth; AfD = Vcf.document.body.clientHeight; } return { width: SCG, height: AfD }; }
function el(rEQ) { var HCD = (typeof(rEQ) == 'string') ? document.getElementById(rEQ) : rEQ; if (HCD && !HCD.hide) { HCD.hide = function() { this.style.display = 'none'; }; HCD.show = function() { this.style.display = ''; }; HCD.addClass = function(Vro) { this.removeClass(Vro); this.className += ' ' + Vro; }; HCD.removeClass = function(Vro) { this.className = this.className.replace( new RegExp("(^|\\s+)" + Vro + "(\\s+|$)"), "").replace(/^\s+|\s+$/g, ''); }; } return HCD; } function acp(lFq) { if (iSy) iSy.hide(); if (LKR) LKR.stop(); ; alert("ERROR: " + lFq); return null; } var assert = function(kMU, lFq) { if (!kMU) { if (iSy) iSy.hide(); var AuK = bbH(); if (AuK) lFq += "\n\n" + AuK; ; if (confirm("Assert Failed: " + lFq + "\n\nDo you want to debug?")) { if (LKR) LKR.stop(); eval( "debugger;" ); } } return kMU; }; function bbH() { var jIE = ''; if (typeof(arguments.caller) != 'undefined') { for (var QzD = arguments.caller; QzD != null; QzD = QzD.caller) { var Vro = 'anonymous'; if (QzD.callee && QzD.callee.toString) { var GPM = QzD.callee.toString(); if (GPM.match) { var van = GPM.match(/function (\w*)/); if (van && van[1]) Vro = van[1];
else alert("stack trace no likey: " + GPM); } } jIE += '> ' + Vro + '\n'; if (QzD.caller == QzD) { jIE += '*'; break; } } } else { var e; try { foo.bar; } catch(e) { if (e.stack) jIE = e.stack; } } return( jIE ); } function dumper(HCD, BKg, qlA) { if (typeof(BKg) == 'undefined') BKg = 0; var KRr = ''; if (typeof(HCD) == 'undefined') return 'undefined'; else if (typeof(HCD) == 'function') return '(function)'; else if (HCD === null) return 'null'; if (!qlA) { if (typeof(HCD) == 'object' && typeof(HCD.length) != 'undefined') KRr += "[\n"; else KRr += "{\n"; qlA = 1; } var IYz = ''; for (var RwK=0; RwK<qlA; RwK++) IYz += "\t"; if (typeof(HCD) == 'object' && typeof(HCD.length) != 'undefined') { for (var QzD = 0; QzD < HCD.length; QzD++) { if (typeof(HCD[QzD]) != 'function') { if (typeof(HCD.length) != 'undefined') KRr += IYz; else KRr += IYz + QzD + ": "; if (typeof(HCD[QzD]) == 'object') { if (HCD[QzD] == null) { KRr += "null,\n";
} else if (typeof(HCD[QzD].length) != 'undefined') { if (BKg) KRr += "[\n" + dumper( HCD[QzD], BKg - 1, qlA + 1 ) + IYz + "],\n"; else KRr += "[...],\n"; } else { if (BKg) KRr += "{\n" + dumper( HCD[QzD], BKg - 1, qlA + 1 ) + IYz + "},\n"; else KRr += "{...},\n"; } } else if (typeof(HCD[QzD]) == 'number') KRr += HCD[QzD] + ",\n"; else KRr += '"' + HCD[QzD] + '",' + "\n"; } } } else { for (var QzD in HCD) { if (typeof(HCD[QzD]) != 'function') { if (typeof(HCD.length) != 'undefined') KRr += IYz; else KRr += IYz + QzD + ": "; if (typeof(HCD[QzD]) == 'object') { if (HCD[QzD] == null) { KRr += "null,\n"; } else if (typeof(HCD[QzD].length) != 'undefined') { if (BKg) KRr += "[\n" + dumper( HCD[QzD], BKg - 1, qlA + 1 ) + IYz + "],\n"; else KRr += "[...],\n"; } else { if (BKg) KRr += "{\n" + dumper( HCD[QzD], BKg - 1, qlA + 1) + IYz + "},\n"; else KRr += "{...},\n"; } } else if (typeof(HCD[QzD]) == 'number') KRr += HCD[QzD] + ",\n"; else KRr += '"' + HCD[QzD] + '",' + "\n"; } } } if (qlA == 1) { if (typeof(HCD) == 'object' && typeof(HCD.length) != 'undefined') KRr += "]\n";
else KRr += "}\n"; } return KRr; } var debugstr = function(lFq) { if (typeof(Debug) != 'undefined') Debug.trace.apply(Debug, [lFq]); }; function IiS(ZNK) { var eZx = ''; for (var LwV in ZNK) { var Hmg = Esx(ZNK[LwV]); for (var nzz = 0, _aT = Hmg.length; nzz < _aT; nzz++) { eZx += (eZx.length ? '&' : '?') + escape(LwV) + '=' + escape(Hmg[nzz]); } } return eZx; } function GvJ(vlv) { var gHy = document.createElement('SCRIPT'); gHy.type = 'text/javascript'; gHy.src = vlv; document.getElementsByTagName('HEAD')[0].appendChild(gHy); } var hiD = { '0':0, '1':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'A':10, 'B':11, 'C':12, 'D':13, 'E':14, 'F':15 }; function Fhj(Hmp) { Hmp = Hmp.toUpperCase(); var Zvr = Hmp.substring(0, 1); var JxE = Hmp.substring(1, 2); return ( (hiD[Zvr] * 16) + hiD[JxE] ); } function eDQ(jun) { jun = jun.toString().replace(/^\#/, "").toUpperCase(); if (jun.length == 3) jun = jun.substring(0, 1) + '0' + jun.substring(1, 2) + '0' + jun.substring(2, 3) + '0'; if (jun.length != 6) return null; return { r: Fhj( jun.substring(0, 2) ), g: Fhj( jun.substring(2, 4) ),
b: Fhj( jun.substring(4, 6) ) }; } function EAn(QzD) { var ybV = {}; for (var LwV in QzD) { ybV[ QzD[LwV] ] = LwV; } return ybV; } function HGu(nbO) { var uVd = 0; for (var LwV in nbO) { if (LwV.match(/^\d+$/)) { var Qpn = parseInt(LwV, 10); if (Qpn > uVd) uVd = Qpn; } } return uVd + 1; } function Bcc(NgV, rYV) { for (var nzz = 0, _aT = NgV.length; nzz < _aT; nzz++) { if (NgV[nzz] == rYV) return true; } return false; } function UyS(NgV) { for (var nzz = 0, _aT = NgV.length; nzz < _aT; nzz++) { NgV[nzz] = parseInt( NgV[nzz], 10 ); } return NgV; } function g_B(NgV, rYV) { for (var nzz = 0, _aT = NgV.length; nzz < _aT; nzz++) { if (NgV[nzz] == rYV) return nzz; } return -1; } function j_b(NgV, rYV) { var nzz = g_B(NgV, rYV);
if (nzz > -1) NgV.splice(nzz, 1); } function Cok(input) { if (input.setSelectionRange) { input.focus(); input.setSelectionRange(0, input.value.length); } else if (input.createTextRange) { var range = input.createTextRange(); range.collapse(true); range.moveEnd('character', input.value.length); range.moveStart('character', 0); range.select(); } return true; } function nlL(tjn) { return tjn.toString().replace(/^\s+/, "").replace(/\s+$/, ""); } function pqr() { } pqr.prototype.setHandler = pqr.prototype.addEventListener = function(Vro, vMc) { Vro = Vro.toString().toLowerCase().replace(/^on/, ''); if (!this.handlers) this.handlers = {}; if (!this.handlers[Vro]) this.handlers[Vro] = []; JGI( this.handlers[Vro], vMc ); }; pqr.prototype.removeEventListener = function(Vro, vMc) { Vro = Vro.toString().toLowerCase().replace(/^on/, ''); if (!this.handlers) this.handlers = {}; if (!this.handlers[Vro]) this.handlers[Vro] = []; j_b( this.handlers[Vro], vMc ); }; pqr.prototype.clearAllHandlers = function(Vro) { Vro = Vro.toString().toLowerCase().replace(/^on/, ''); if (!this.handlers) this.handlers = {}; if (this.handlers[Vro]) this.handlers[Vro] = []; }; pqr.prototype.fireHandler = 
pqr.prototype.fireEvent = function(Vro) { Vro = Vro.toString().toLowerCase().replace(/^on/, ''); if (!this.handlers) this.handlers = {}; var _RI = hmd( arguments, 1 ); if (this.handlers[Vro]) { var kuI = Esx( this.handlers[Vro] ); for (var nzz = 0, _aT = kuI.length; nzz < _aT; nzz++) { var jIE = false; var XcS = kuI[nzz]; if (typeof(XcS) == 'function') jIE = XcS.apply(window, _RI); else if (JZc(XcS)) { if (typeof(XcS[1]) == 'function') jIE = XcS[1].apply(XcS[0], _RI); else jIE = XcS[0][ XcS[1] ].apply(XcS[0], _RI); } else if (window[XcS]) jIE = window[XcS].apply(window, _RI); else return acp("Unsupported handler type: " + Vro + ": " + XcS); if (jIE === false) return jIE; } } return true; }; var EaseAlgos = { Linear: function(E_r) { return E_r; }, Quadratic: function(E_r) { return Math.pow(E_r, 2); }, Cubic: function(E_r) { return Math.pow(E_r, 3); }, Quartetic: function(E_r) { return Math.pow(E_r, 4); }, Quintic: function(E_r) { return Math.pow(E_r, 5); }, Sine: function(E_r) { return 1 - Math.sin((1 - E_r) * Math.PI / 2); }, Circular: function(E_r) { return 1 - Math.sin(Math.acos(E_r)); } }; var EaseModes = { EaseIn: function(E_r, chT) { return EaseAlgos[chT](E_r); }, EaseOut: function(E_r, chT) { return 1 - EaseAlgos[chT](1 - E_r); }, EaseInOut: function(E_r, chT) { return (E_r <= 0.5) ? EaseAlgos[chT](2 * E_r) / 2 : (2 - EaseAlgos[chT](2 * (1 - E_r))) / 2; } }; function ease(E_r, uhB, chT) { return EaseModes[uhB]( E_r, chT ); }
function Nfr() { this.guh = {}; }; Nfr.prototype.begin = function(jwX) { if (!jwX) jwX = 't'; if (!this.guh[jwX]) this.guh[jwX] = { elapsed: 0 }; var pBd = new Date(); this.guh[jwX].start = pBd.getTime(); }; Nfr.prototype.count = function(jwX, E_r) { if (!E_r) E_r = 1; if (!jwX) return 0; if (!this.guh[jwX]) this.guh[jwX] = { start: 1, end: 1, elapsed: 0 }; this.guh[jwX].elapsed += E_r; }; Nfr.prototype.end = function(jwX) { if (!jwX) jwX = 't'; if (!this.guh[jwX]) return; var pBd = new Date(); this.guh[jwX].end = pBd.getTime(); var Esa = this.guh[jwX].end - this.guh[jwX].start; if (Esa < 0) Esa = 0; this.guh[jwX].elapsed = Esa; }; Nfr.prototype.summarize = function() { var jEL = ''; for (var jwX in this.guh) { if (!this.guh[jwX].end) this.end(jwX); if (jEL) jEL += '; '; jEL += jwX + '=' + this.guh[jwX].elapsed; } return jEL; }; Nfr.prototype.reset = function() { this.guh = {}; }; var lki = new Nfr(); function _nO(OVy) { return OVy * 180.0 / Math.PI; } function yzH(xIh) { return xIh * Math.PI / 180.0; } function Point(XTm, VJF) {
this.x = XTm ? XTm : 0; this.y = VJF ? VJF : 0; }; Point.prototype._uL = true; Point.prototype.set = function() { if (arguments.length == 1) { this.x = arguments[0].x; this.y = arguments[0].y; } else { this.x = arguments[0]; this.y = arguments[1]; } return this; }; Point.prototype.offset = function() { if (arguments.length == 1) { this.x += arguments[0].x; this.y += arguments[0].y; } else { this.x += arguments[0]; this.y += arguments[1]; } return this; }; Point.prototype.floor = function() { this.x = Math.floor(this.x); this.y = Math.floor(this.y); return this; }; Point.prototype.ceil = function() { this.x = Math.ceil(this.x); this.y = Math.ceil(this.y); return this; }; Point.prototype.getPointFromOffset = function() { if (arguments.length == 1) { return new Point( this.x + arguments[0].x, this.y + arguments[0].y ); }
else { return new Point( this.x + arguments[0], this.y + arguments[1] ); } }; Point.prototype.getDistance = function() { var qlK; if (arguments.length == 1) qlK = arguments[0]; else qlK = new Point(arguments[0], arguments[1]); if ((qlK.x == this.x) && (qlK.y == this.y)) return 0; return Math.sqrt( Math.pow(Math.abs(qlK.x - this.x), 2) + Math.pow(Math.abs(qlK.y - this.y), 2) ); }; Point.prototype.getAngle = function() { var qlK; if (arguments.length == 1) qlK = arguments[0]; else qlK = new Point(arguments[0], arguments[1]); if (this.x == qlK.x && this.y == qlK.y) return 0; var SJc; var FmY; if (qlK.y < this.y && qlK.x >= this.x) { FmY = 0.0; SJc = Math.abs(qlK.y - this.y); } else if (qlK.y < this.y && qlK.x < this.x) { FmY = 90.0; SJc = Math.abs(qlK.x - this.x); } else if (qlK.y >= this.y && qlK.x < this.x) { FmY = 180.0; SJc = Math.abs(qlK.y - this.y); } else { FmY = 270.0; SJc = Math.abs(qlK.x - this.x); } var wMb = FmY + _nO( Math.asin( SJc / this.getDistance(qlK) ) ); if (wMb >= 360.0) wMb -= 360.0; return wMb; }; Point.prototype.getPointFromProjection = function(wMb, rkl) { return this.clone().project(wMb, rkl); }; Point.prototype.project = function(wMb, rkl) { wMb = wMb % 360; var tTd = ((wMb == 90) || (wMb == 270)) ? 0 : Math.cos( yzH(wMb) ); var mEQ = ((wMb == 0) || (wMb == 180)) ? 0 : Math.sin( yzH(wMb) ); this.x += (tTd * rkl); this.y -= (mEQ * rkl); return this; }; Point.prototype.getMidPoint = function() { if (arguments.length == 1) qlK = arguments[0]; else qlK = new Point(arguments[0], arguments[1]);
return new Point( this.x + ((qlK.x - this.x) / 2), this.y + ((qlK.y - this.y) / 2) ); }; Point.prototype.clone = function() { return new Point(this.x, this.y); }; Point.prototype.morph = function(azF, E_r, uhB, chT) { if (uhB && chT) { this.x = tweenFrame(this.x, azF.x, E_r, uhB, chT); this.y = tweenFrame(this.y, azF.y, E_r, uhB, chT); } else { this.x += ((azF.x - this.x) * E_r); this.y += ((azF.y - this.y) * E_r); } return this; }; function Rect(xJa, qL_, RvO, mGQ) { this.left = xJa ? xJa : 0; this.top = qL_ ? qL_ : 0; this.right = RvO ? RvO : 0; this.bottom = mGQ ? mGQ : 0; }; Rect.prototype.HlO = true; Rect.prototype.valid = function() { return ( (this.right > this.left) && (this.bottom > this.top) ); }; Rect.prototype.set = function() { if (arguments.length == 1) { this.left = arguments[0].left; this.top = arguments[0].top; this.right = arguments[0].right; this.bottom = arguments[0].bottom; } else {
this.left = arguments[0]; this.top = arguments[1]; this.right = arguments[2]; this.bottom = arguments[3]; } return this; }; Rect.prototype.offset = function() { if (arguments.length == 1) { this.left += arguments[0].x; this.top += arguments[0].y; this.right += arguments[0].x; this.bottom += arguments[0].y; } else { this.left += arguments[0]; this.top += arguments[1]; this.right += arguments[0]; this.bottom += arguments[1]; } return this; }; Rect.prototype.moveTo = function() { if (arguments.length == 1) { var obj = arguments[0]; if (obj.HlO) { return this.offset(obj.left - this.left, obj.top - this.top); } else if (obj._uL) { return this.offset(obj.x - this.left, obj.y - this.top); } } else { return this.offset(arguments[0] - this.left, arguments[1] - this.top); } return null; }; Rect.prototype.width = function() { if (arguments.length) this.right = this.left + arguments[0]; return (this.right - this.left);
}; Rect.prototype.height = function() { if (arguments.length) this.bottom = this.top + arguments[0]; return (this.bottom - this.top); }; Rect.prototype.centerPointX = function() { return ((this.left + this.right) / 2); }; Rect.prototype.centerPointY = function() { return ((this.top + this.bottom) / 2); }; Rect.prototype.centerPoint = function() { return new Point( this.centerPointX(), this.centerPointY() ); }; Rect.prototype.topLeftPoint = function() { return new Point( this.left, this.top ); }; Rect.prototype.topRightPoint = function() { return new Point( this.right, this.top ); }; Rect.prototype.bottomRightPoint = function() { return new Point( this.right, this.bottom ); }; Rect.prototype.bottomLeftPoint = function() { return new Point( this.left, this.bottom ); }; Rect.prototype.ptIn = function(tUn, Adf) { return( (tUn >= this.left) && (Adf >= this.top) && (tUn < this.right) && (Adf < this.bottom) ); }; Rect.prototype.pointIn = function() { if (arguments.length == 1) { var qlK = arguments[0]; return( (qlK.x >= this.left) && (qlK.y >= this.top) && (qlK.x < this.right) && (qlK.y < this.bottom) ); } else { var tUn = arguments[0]; var Adf = arguments[1]; return( (tUn >= this.left) && (Adf >= this.top) && 
(tUn < this.right) && (Adf < this.bottom) ); } }; Rect.prototype.rectIn = function(DqG) { var ZVN = 0; var YeH = 0; if (this.left >= DqG.left && this.left <= DqG.right) ZVN = 1; else if (this.right >= DqG.left && this.right <= DqG.right) ZVN = 1; else if (this.left < DqG.left && this.right > DqG.right) ZVN = 1; if (this.top >= DqG.top && this.top <= DqG.bottom) YeH = 1; else if (this.bottom >= DqG.top && this.bottom <= DqG.bottom) YeH = 1; else if (this.top < DqG.top && this.bottom > DqG.bottom) YeH = 1; return (ZVN && YeH); }; Rect.prototype.clone = function() { return new Rect(this.left, this.top, this.right, this.bottom); }; Rect.prototype.morph = function(AnG, E_r, uhB, chT) { if (uhB && chT) { this.left = tweenFrame(this.left, AnG.left, E_r, uhB, chT); this.top = tweenFrame(this.top, AnG.top, E_r, uhB, chT); this.right = tweenFrame(this.right, AnG.right, E_r, uhB, chT); this.bottom = tweenFrame(this.bottom, AnG.bottom, E_r, uhB, chT); } else { this.left += ((AnG.left - this.left) * E_r); this.top += ((AnG.top - this.top) * E_r); this.right += ((AnG.right - this.right) * E_r); this.bottom += ((AnG.bottom - this.bottom) * E_r); } return this; }; Rect.prototype.union = function(OGf) { if (OGf.left < this.left) this.left = OGf.left; if (OGf.top < this.top) this.top = OGf.top; if (OGf.right > this.right) this.right = OGf.right; if (OGf.bottom > this.bottom) this.bottom = OGf.bottom; return this; };
Rect.prototype.intersect = function(OGf) { if (OGf.left > this.left) this.left = OGf.left; if (OGf.top > this.top) this.top = OGf.top; if (OGf.right < this.right) this.right = OGf.right; if (OGf.bottom < this.bottom) this.bottom = OGf.bottom; return this; }; Rect.prototype.inset = function(PTp, ffR) { if (typeof(ffR) == 'undefined') ffR = PTp; this.left += PTp; this.top += ffR; this.right -= PTp; this.bottom -= ffR; return this; };; function CookieTree(args) { if (args) { for (var key in args) this[key] = args[key]; } if (!this.expires) { var now = new Date(); now.setFullYear( now.getFullYear() + 10 ); this.expires = now.toGMTString(); } this.parse(); }; CookieTree.prototype.domain = location.hostname; CookieTree.prototype.path = location.pathname; CookieTree.prototype.parse = function() { this.tree = {}; var cookies = document.cookie.split(/\;\s*/); for (var idx = 0, len = cookies.length; idx < len; idx++) { var cookie_raw = cookies[idx]; if (cookie_raw.match(/^CookieTree=(.+)$/)) { var cookie = null; var cookie_raw = unescape( RegExp.$1 ); ; try { eval( "cookie = " + cookie_raw + ";" ); }
catch (e) { ; cookie = {}; } this.tree = merge_objects( this.tree, cookie ); idx = len; } } }; CookieTree.prototype.get = function(key) { return this.tree[key]; }; CookieTree.prototype.set = function(key, value) { this.tree[key] = value; }; CookieTree.prototype.save = function() { var cookie_raw = 'CookieTree=' + escape(serialize(this.tree)); if (!this.path.match(/\/$/)) { this.path = this.path.replace(/\/[^\/]+$/, "") + '/'; } cookie_raw += '; expires=' + this.expires; cookie_raw += '; domain=' + this.domain; cookie_raw += '; path=' + this.path; ; document.cookie = cookie_raw; }; CookieTree.prototype.remove = function() { var cookie_raw = 'CookieTree={}'; if (!this.path.match(/\/$/)) { this.path = this.path.replace(/\/[^\/]+$/, "") + '/'; } var now = new Date(); now.setFullYear( now.getFullYear() - 1 ); cookie_raw += '; expires=' + now.toGMTString(); cookie_raw += '; domain=' + this.domain; cookie_raw += '; path=' + this.path; document.cookie = cookie_raw; };; function WRG() { };
WRG.prototype.JoH = function() { if (!this.enabled) return 1.0; var qFF = 0; var WBO = 0; for (var LwV in this.Qju) { var gKp = this.Qju[LwV]; if (!gKp.ignore) { qFF += gKp.USo(); WBO++; } } return (WBO > 0) ? (qFF / WBO) : 1.0; }; WRG.prototype.WTw = function() { for (var LwV in this.Qju) { var gKp = this.Qju[LwV]; gKp.ignore = true; } }; WRG.prototype.tFi = function(gYe) { if (!this.enabled) return; this.setHandler('onLoad', gYe); this.fireHandler('onLoad'); }; function KjU() { }; KjU.prototype = new pqr(); KjU.prototype.pYw = function() { if (!this.XcS.enabled) return; ; for (var idx = 0, len = this.nku; idx < len; idx++) { this.JJJ[idx].volume = this.mGt(); } }; KjU.prototype.playSound = function() { if (!this.XcS.enabled || !this.uPR().enabled) return this; var tVc = this.JJJ[this.cGR]; this.cGR++; if (this.cGR >= this.nku) this.cGR = 0; tVc.currentTime = 0;
tVc.play(); return this; }; KjU.prototype.play = function() { if (!this.XcS.enabled || !this.uPR().enabled) return this; if (ua.ff && (this.category == 'music') && (this.JJJ[0].readyState != 4)) this.JJJ[0].load(); this.JJJ[0].play(); return this; }; KjU.prototype.stop = function() { if (!this.XcS.enabled) return this; for (var idx = 0, len = this.nku; idx < len; idx++) { this.JJJ[idx].pause(); } this._ja = false; return this; }; KjU.prototype.rewind = function() { if (!this.XcS.enabled) return this; this.JJJ[0].currentTime = 0; return this; }; KjU.prototype.setVolume = function(zzX) { if (!this.XcS.enabled) return this; if (zzX < 0) zzX = 0; else if (zzX > 1.0) zzX = 1.0; this.volume = zzX; for (var idx = 0, len = this.nku; idx < len; idx++) { this.JJJ[idx].volume = this.mGt(); } return this; }; KjU.prototype.setBalance = function(Wmz) { if (!this.XcS.enabled) return this; if (Wmz < -1.0) Wmz = -1.0; else if (Wmz > 1.0) Wmz = 1.0; this.balance = Wmz; var adjBalance = this.Euh(); return this; };
KjU.prototype.isPlaying = function() { return !!this._ja; }; KjU.prototype.getPosition = function() { return this.JJJ[0].currentTime; }; KjU.prototype.setPosition = function(USi) { this.JJJ[0].currentTime = USi; return this; }; KjU.prototype.load = function() { if (!this.XcS.enabled) return ''; if (ua.ff) this.url = this.url.replace(/\.mp3/i, '.ogg'); this.zJU = LKR.getGamePath() + this.url; if (!LKR.jiT) this.zJU += '?mod=' + LKR.Fvp + '&ttl=static'; ; this.MCL = qNl(); this.progress = 0; this.loading = true; this._ja = false; this.nku = this.multiplex ? 4 : 1; this.cGR = 0; this.JJJ = []; if (!this.xTH) this.xTH = 5; for (var idx = 0, len = this.nku; idx < len; idx++) { var tVc = this.JJJ[idx] = new Audio( this.zJU ); tVc.volume = this.mGt(); tVc.loop = this.zwh ? true : false; if (ua.ff) tVc.autobuffer = true; else tVc.autobuffer = false; tVc.load(); } var tVc = this.JJJ[0]; var CPJ = this; tVc.addEventListener('begin', function(tjG) { CPJ.progress = 0; CPJ.loading = true; ; }, false); tVc.addEventListener('progress', function(tjG) { if (tjG && tjG.loaded && tjG.total) {
CPJ.progress = tjG.loaded / tjG.total; if (CPJ.progress > tjG.total) CPJ.progress = tjG.total; } CPJ.loading = true; ; }, false); tVc.addEventListener(((ua.safari && ua.snow) || ua.ff) ? 'canplaythrough' : 'load', function() { CPJ.progress = 1.0; CPJ.loading = false; CPJ.loaded = true; ; }, false); tVc.addEventListener('play', function() { ; tVc.loop = CPJ.loop ? true : false; CPJ._ja = true; }, false); tVc.addEventListener('ended', function() { ; if (ua.ff && CPJ.loop) { CPJ.rewind(); CPJ.play(); } else { CPJ._ja = false; CPJ.fireHandler( 'ended' ); } }, false); tVc.addEventListener('error', function() { ; CPJ.xTH--; if (CPJ.xTH > 0) { ; setTimeout( function() { CPJ.load(); }, 1000 ); } else { acp("Audio Clip Error: Cannot load: " + CPJ.zJU); } }, false); };
KjU.prototype.USo = function() { if (ua.ff && (this.progress < 1.0) && (qNl() - this.MCL > 10.0)) { ; this.progress = 1.0; this.loading = false; this.loaded = true; } return this.progress || 0; };; function TCk() { }; TCk.prototype.JoH = function() { if (!this.enabled) return 1.0; if ((jME(this.Qju) - this.zBu) == 0) return 1.0; return ((this.hCk - this.zBu) / (jME(this.Qju) - this.zBu)); }; TCk.prototype.WTw = function() { this.zBu = jME(this.Qju); }; TCk.prototype.flashNotify = function(INc, jwX, kMU) { switch (INc) { case 'soundLoadComplete': if (kMU) { this.hCk++; ; } else { var gKp = this.getTrack(jwX); if (gKp && gKp.xTH) { gKp.xTH--; ; setTimeout( function() { gKp.load(); }, 1000 ); } else { acp("Failed to load audio track: " + jwX + ": " + kMU); } } break; case 'soundPlayComplete': ;
var gKp = this.getTrack(jwX); if (gKp) { gKp._ja = false; gKp.fireHandler( 'ended' ); } break; case 'soundLoadError': var gKp = this.getTrack(jwX); if (gKp && gKp.xTH) { gKp.xTH--; ; setTimeout( function() { gKp.load(); }, 1000 ); } else { acp("Failed to load audio track: " + jwX + ": " + kMU); } break; case 'flashLoadComplete': if (!this.nJL) { this.nJL = true; ; setTimeout( function() { gAudio.fdz(); }, 100 ); } break; case 'debug': ; break; } }; TCk.prototype.fdz = function() { this.CyI = el('audio_player'); if (!this.CyI || !this.CyI._load) { this.hQR = setTimeout( function() { gAudio.fdz(); }, 100 ); return; } if (this.LlH) clearTimeout( this.LlH ); this.LlH = null; this.TFM = true; ; this.fireHandler('onLoad');
}; TCk.prototype.tFi = function(gYe) { if (!this.enabled || this.TFM) return; this.setHandler('onLoad', gYe); ; if (!window.gAudio) window.gAudio = gAudio; this.LlH = setTimeout( function() { gAudio.mNM(); }, 10 * 1000 ); var hRE = ( navigator.userAgent.match(/MSIE/) && navigator.userAgent.match(/Win/) ); var html = ''; if (hRE) { html = '<object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000"' + ' codebase="http://fpdownload.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=8,0,0,0"' + ' width="1" height="1" id="audio_player" align="middle">' + '<param name="allowScriptAccess" value="always" />' + '<param name="movie" value="' + LKR.PQ_ + 'engine/EffectAudio.swf" />' + '<param name="quality" value="high" />' + '</object>'; document.body.insertAdjacentHTML( "beforeEnd", html ); } else { html = '<embed src="' + LKR.PQ_ + 'engine/EffectAudio.swf" quality="high" swliveconnect="true" bgcolor="#ffffff"' + ' width="4" height="4" id="audio_player" name="effect_audio_player" align="middle" allowScriptAccess="always"' + ' type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer">' + '</embed>'; var div = document.createElement('DIV'); div.style.position = 'absolute'; div.style.width = '16px'; div.style.height = '16px'; div.style.left = '-4000px'; div.style.top = '0px'; div.style.visibility = 'hidden'; div.innerHTML = html; document.body.appendChild(div); } LKR.JWd( 'audio_player' ); }; TCk.prototype.mNM = function() { if (this.hQR) clearTimeout( this.hQR ); this.hQR = null;
; LKR.fireHandler( 'audioLoadError' ); this.enabled = false; this.fatal = true; this.fireHandler('onLoad'); }; function Fpx() { }; Fpx.prototype = new pqr(); Fpx.prototype.pYw = function() { if (!this.XcS.enabled) return; ; this.XcS.CyI._set_volume( this.jwX, Math.floor(this.mGt() * 100) ); this.XcS.CyI._set_balance( this.jwX, Math.floor(this.Euh() * 100) ); }; Fpx.prototype.playSound = function() { if (!this.XcS.enabled || !this.uPR().enabled) return this; this.XcS.CyI._play( this.jwX ); if (!this.multiplex) this._ja = true; return this; }; Fpx.prototype.play = function() { if (!this.XcS.enabled || !this.uPR().enabled) return this; this.XcS.CyI._play( this.jwX ); if (!this.multiplex) this._ja = true; return this; }; Fpx.prototype.stop = function() { if (!this.XcS.enabled) return this; this.XcS.CyI._stop( this.jwX ); this._ja = false; return this; }; Fpx.prototype.rewind = function() { if (!this.XcS.enabled) return this; this.XcS.CyI._rewind( this.jwX ); return this; }; Fpx.prototype.setVolume = function(zzX) { if (!this.XcS.enabled) return this;
if (zzX < 0) zzX = 0; else if (zzX > 1.0) zzX = 1.0; this.volume = zzX; this.XcS.CyI._set_volume( this.jwX, Math.floor(this.mGt() * 100) ); return this; }; Fpx.prototype.setBalance = function(Wmz) { if (!this.XcS.enabled) return this; if (Wmz < -1.0) Wmz = -1.0; else if (Wmz > 1.0) Wmz = 1.0; this.balance = Wmz; this.XcS.CyI._set_balance( this.jwX, Math.floor(this.Euh() * 100) ); return this; }; Fpx.prototype.isPlaying = function() { return !!this._ja; }; Fpx.prototype.getPosition = function() { return this.XcS.CyI.xye( this.jwX ); }; Fpx.prototype.setPosition = function(USi) { if (!this.XcS.enabled) return this; this.XcS.CyI.MpX( this.jwX, USi ); return this; }; Fpx.prototype.load = function() { if (!this.XcS.enabled) return ''; ; this._ja = false; this.zJU = LKR.getGamePath() + this.url; if (!LKR.jiT) this.zJU += '?mod=' + LKR.Fvp + '&ttl=static'; ; this.XcS.CyI._load( this.jwX, this.zJU, !!this.loop, Math.floor(this.mGt() * 100), Math.floor(this.Euh() * 100), !!this.multiplex ); };; function leh() { }; leh.prototype.JoH = function() { if (!this.enabled) return 1.0; var qFF = 0;
var WBO = 0; for (var LwV in this.Qju) { var gKp = this.Qju[LwV]; if (!gKp.ignore) { qFF += gKp.USo(); WBO++; } } return (WBO > 0) ? (qFF / WBO) : 1.0; }; leh.prototype.WTw = function() { for (var LwV in this.Qju) { var gKp = this.Qju[LwV]; gKp.ignore = true; } }; leh.prototype.tFi = function(gYe) { if (!this.enabled) return; this.setHandler('onLoad', gYe); this.fireHandler('onLoad'); }; function _KG() { }; _KG.prototype = new pqr(); _KG.prototype.pYw = function() { if (!this.XcS.enabled) return; ; for (var idx = 0, len = this.nku; idx < len; idx++) { this.JJJ[idx].volume = this.mGt(); } }; _KG.prototype.playSound = function() { if (!this.XcS.enabled || !this.uPR().enabled) return this; var tVc = this.JJJ[this.cGR]; this.cGR++; if (this.cGR >= this.nku) this.cGR = 0; if (tVc.isPlaying()) tVc.stop(); tVc.play(); return this; };
_KG.prototype.play = function() { if (!this.XcS.enabled || !this.uPR().enabled) return this; if (!this.JJJ[0].isPlaying()) this.JJJ[0].play(); return this; }; _KG.prototype.stop = function() { if (!this.XcS.enabled) return this; for (var nzz = 0, _aT = this.nku; nzz < _aT; nzz++) { if (this.JJJ[nzz].isPlaying()) this.JJJ[nzz].pause(); } this._ja = false; return this; }; _KG.prototype.rewind = function() { if (!this.XcS.enabled) return this; if (this.JJJ[0].isPlaying()) this.JJJ[0].stop(); return this; }; _KG.prototype.setVolume = function(zzX) { if (!this.XcS.enabled) return this; if (zzX < 0) zzX = 0; else if (zzX > 1.0) zzX = 1.0; this.volume = zzX; for (var idx = 0, len = this.nku; idx < len; idx++) { this.JJJ[idx].setVolume( this.mGt() ); } return this; }; _KG.prototype.setBalance = function(Wmz) { if (!this.XcS.enabled) return this; if (Wmz < -1.0) Wmz = -1.0; else if (Wmz > 1.0) Wmz = 1.0; this.balance = Wmz; var adjBalance = this.Euh(); return this; }; _KG.prototype.isPlaying = function() { return !!this._ja; }; _KG.prototype.getPosition = function() {
return -1; }; _KG.prototype.setPosition = function(USi) { return this; }; _KG.prototype.load = function() { if (!this.XcS.enabled) return ''; this.zJU = LKR.getGamePath() + this.url; ; this.MCL = qNl(); this.progress = 0; this.loading = true; this._ja = false; this.nku = this.multiplex ? 4 : 1; this.cGR = 0; this.JJJ = []; for (var idx = 0, len = this.nku; idx < len; idx++) { var tVc = this.JJJ[idx] = Titanium.Media.createSound( 'app://assets' + this.url ); tVc.setVolume( this.mGt() ); tVc.setLooping( this.loop ? true : false ); } var tVc = this.JJJ[0]; var CPJ = this; tVc.onComplete( function() { ; CPJ._ja = false; CPJ.fireHandler( 'ended' ); } ); CPJ.progress = 1.0; CPJ.loading = false; }; _KG.prototype.USo = function() { return this.progress || 0; };; function EjC(jwX) { this.tEP = {}; this.Qju = {}; this.iqT = {}; this.zBu = 0; this.hCk = 0;
this.enabled = true; this.TFM = false; this.CyI = null; this.stO = 1.0; this.DaE = 1.0; this.dX_ = 0.0; this.rWc = { sfx: { volume: 1.0, rate: 1.0, balance: 0.0, enabled: true }, music: { volume: 1.0, rate: 1.0, balance: 0.0, enabled: true }, video: { volume: 1.0, rate: 1.0, balance: 0.0, enabled: true } }; }; EjC.prototype = new pqr(); EjC.prototype.TiF = false; EjC.prototype.IUl = function(HCD) { var uQg = Esx(HCD); var _aT = 0; for (var nzz = 0, _aT = uQg.length; nzz < _aT; nzz++) { var SEe = Cij( uQg[nzz] ); SEe.url = SEe.path; this.tEP[ SEe.path ] = SEe; } }; EjC.prototype.Ous = function(HCD) { var uQg = Esx(HCD);
var WBO = 0; for (var nzz = 0, _aT = uQg.length; nzz < _aT; nzz++) { var LwV = uQg[nzz]; var YxH = this.tEP[LwV]; if (!YxH) { ; YxH = { volume: 1.0, preload: 0, path: LwV, url: LwV, loop: LwV.match(/music/) ? 1 : 0, balance: 0.0, category: LwV.match(/music/) ? 'music' : 'sfx', multiplex: LwV.match(/music/) ? 0 : 1 }; } if (!this.Qju[LwV]) { var gKp = new hSn( merge_objects(YxH, { jwX: LwV, XcS: this }) ); gKp.xTH = 5; this.Qju[ LwV ] = gKp; if (!this.TiF) gKp.load(); var afT = LwV.replace(/^(.+)\/([^\/]+)$/, '$2').replace(/\.\w+$/, ''); this.iqT[afT] = gKp; WBO++; } } return WBO; }; EjC.prototype.bqj = function() { if (this.TiF) { for (var LwV in this.Qju) { var gKp = this.Qju[LwV]; if (!gKp.loaded && !gKp.loading) gKp.load(); } } }; EjC.prototype.pYw = function() { if (this.JoH() < 1.0) return acp( "One or more audio tracks are still loading" );
for (var LwV in this.Qju) { this.Qju[LwV].pYw(); } }; EjC.prototype.setMasterVolume = function(zzX) { if (zzX < 0) zzX = 0; else if (zzX > 1.0) zzX = 1.0; this.stO = zzX; this.pYw(); Effect.VideoManager.xrR(); }; EjC.prototype.ycs = function(lMq) { this.DaE = lMq; this.pYw(); }; EjC.prototype.uke = function(Wmz) { this.dX_ = Wmz; this.pYw(); }; EjC.prototype.setCategoryVolume = function(wdz, zzX) { if (zzX < 0) zzX = 0; else if (zzX > 1.0) zzX = 1.0; var lOU = this.rWc[wdz]; if (!lOU) return acp("Unknown audio category: " + wdz); lOU.volume = zzX; this.pYw(); if (wdz == 'video') { Effect.VideoManager.xrR(); } }; EjC.prototype.lzd = function(wdz, lMq) { var lOU = this.rWc[wdz]; if (!lOU) return acp("Unknown audio category: " + wdz); lOU.rate = lMq; this.pYw(); }; EjC.prototype.Hjs = function(wdz, Wmz) { var lOU = this.rWc[wdz]; if (!lOU) return acp("Unknown audio category: " + wdz); lOU.balance = Wmz;
this.pYw(); }; EjC.prototype.PgU = function(wdz) { return( this.rWc[ wdz ].volume * this.stO ); }; EjC.prototype.ERQ = function(wdz) { return( this.rWc[ wdz ].balance ); }; EjC.prototype.getTrack = function(jwX) { return this.Qju[jwX] || this.iqT[jwX] || this.iqT[jwX.toString().replace(/\.\w+$/, '')]; }; EjC.prototype.playSound = function(jwX) { var gKp = this.getTrack(jwX); if (!gKp) return acp("Could not locate audio track: " + jwX); gKp.playSound(); }; EjC.prototype.play = function(jwX) { var gKp = this.getTrack(jwX); if (!gKp) return acp("Could not locate audio track: " + jwX); gKp.play(); }; EjC.prototype.quiet = function() { for (var LwV in this.Qju) { this.Qju[LwV].stop(); } }; EjC.prototype.quietCategory = function(wdz) { for (var LwV in this.Qju) { if (this.Qju[LwV].category == wdz) this.Qju[LwV].stop(); } }; function hSn(_RI) { this.jwX = 0; this.XcS = null; for (var LwV in _RI) this[LwV] = _RI[LwV];
; ; if (!this.category) this.category = 'sfx'; if (!this.XcS.rWc[this.category]) return acp( "Unknown audio category: " + this.category ); if (!this.volume) this.volume = 1.0; if (!this.rate) this.rate = 1.0; if (!this.balance) this.balance = 0.0; if (!this.loop) this.loop = false; if (!this.multiplex) this.multiplex = false; } hSn.prototype.uPR = function() { return this.XcS.rWc[ this.category ]; }; hSn.prototype.mGt = function() { return( Math.min( this.volume * this.XcS.rWc[ this.category ].volume * this.XcS.stO, 1.0) ); }; hSn.prototype.Bct = function() { return( this.rate * this.XcS.rWc[ this.category ].rate * this.XcS.DaE ); }; hSn.prototype.Euh = function() { return this.balance; }; hSn.prototype.setRate = function(newRate) { if (!this.XcS.enabled) return; ; }; hSn.prototype.onTweenUpdate = function(Zgt) { var UWS = Zgt.properties; if (UWS.volume) this.setVolume( this.volume ); if (UWS.balance) this.setBalance( this.balance ); };
hSn.prototype.fadeIn = function(vxd, uhB, chT) { this.setVolume(0); if (!this.isPlaying()) this.play(); gVl.add({ target: this, duration: vxd, mode: uhB || 'EaseOut', algorithm: chT || 'Linear', properties: { volume: { start:0, end:this.volume || 1.0 } } }); }; hSn.prototype.fadeOut = function(vxd, uhB, chT) { if (!this.isPlaying()) return; gVl.add({ target: this, duration: vxd, mode: uhB || 'EaseOut', algorithm: chT || 'Linear', properties: { volume: { start:this.volume, end:0 } }, onTweenComplete: function(tween) { tween.target.stop(); } }); }; hSn.prototype.crossfade = function(jwX, vxd, uhB, chT) { this.fadeOut( vxd, uhB, chT ); var track = Effect.Audio.getTrack(jwX); if (track) track.fadeIn( vxd, uhB, chT ); }; if (0 && ua.titanium && window.Titanium && Titanium.Media && Titanium.Media.createSound) { for (var key in leh.prototype) EjC.prototype[key] = leh.prototype[key]; for (var key in _KG.prototype) hSn.prototype[key] = _KG.prototype[key]; } else if (((ua.safari3 && ua.mac && !ua.iphone && !ua.snow && !ua.titanium) || 
(ua.ff && (ua.ver >= 3.6) && (typeof(EffectAudioOggReady) != 'undefined'))) && window.Audio && (typeof(DisableNativeAudio) == 'undefined')) { for (var key in WRG.prototype) EjC.prototype[key] = WRG.prototype[key]; for (var key in KjU.prototype) hSn.prototype[key] = KjU.prototype[key]; if (ua.ff && (ua.ver >= 3.6)) EjC.prototype.TiF = true; } else { for (var key in TCk.prototype) EjC.prototype[key] = TCk.prototype[key]; for (var key in Fpx.prototype) hSn.prototype[key] = Fpx.prototype[key]; }; function hKT() { this.DOR = {}; this.iqT = {}; this.zBu = 0; this.jNp = {}; this.wac = 4; this.WLN = 32; }; hKT.prototype.setMaxLoadsPerFrame = function(Qpn) { this.WLN = Qpn; }; hKT.prototype.loadImages = function(HCD) { var uQg = Esx(HCD); var CeU = LKR.getGamePath(); var WBO = 0; for (var nzz = 0; nzz < uQg.length; nzz++) { var vlv = uQg[nzz]; var LwV = vlv; if (!this.DOR[LwV]) { var Ezd = { loaded: false, img: new Image() }; var afT = LwV.replace(/\?.+$/, '').replace(/^(.+)\/([^\/]+)$/, '$2').replace(/\.\w+$/, ''); this.iqT[afT] = Ezd; if (LKR.jiT) { if (vlv.match(/\?sprite\=([^\&]+)/)) { vlv = 'sprites/' + RegExp.$1 + vlv; }
else { vlv = 'assets' + vlv; } if (LKR.MYD) { vlv = 'environments/' + LKR.MYD + '/' + vlv; } vlv = vlv.replace(/[\?\&]overlay\=/g, '-'); if (vlv.match(/[\?\&]format\=(\w+)/)) { var Vfv = RegExp.$1; vlv = vlv.replace(/\.\w+(\?|\&|$)/, '.' + Vfv + '$1'); } vlv = vlv.replace(/[\?\&].*$/, ''); ; Ezd.img.onerror = function() { acp("Failed to load image: " + this.src); }; Ezd.img.src = vlv; } else { if (vlv.match(/[\?\&]g\=/)) { vlv += (vlv.match(/\?/) ? '&' : '?') + 'z=' + qBq.tdu + LKR.asW.ZoomFilter.substring(0,2); } else { vlv += (vlv.match(/\?/) ? '&' : '?') + 'zoom=' + qBq.tdu; vlv += (vlv.match(/\?/) ? '&' : '?') + 'zoom_filter=' + LKR.asW.ZoomFilter; if (LKR.MYD) { vlv += (vlv.match(/\?/) ? '&' : '?') + 'env=' + LKR.MYD; } vlv += (vlv.match(/\?/) ? '&' : '?') + 'mod=' + LKR.Fvp; vlv += (vlv.match(/\?/) ? '&' : '?') + 'ttl=static'; } ; Ezd.img.xTH = 5; Ezd.img.onerror = function() { ; this.xTH--; if (this.xTH > 0) { ; this.src = this.src.replace(/\&rt\=\d+/, '') + '&rt=' + this.xTH; }
else { acp("Failed to load image: " + this.src); } }; Ezd.img.src = vlv.match(/^\w+\:\/\//) ? vlv : (CeU + vlv); } this.DOR[LwV] = Ezd; WBO++; } } return WBO; }; hKT.prototype.reloadAll = function() { var uQg = FET( this.DOR ); this.DOR = {}; this.zBu = 0; this.jNp = {}; return this.loadImages( uQg ); }; hKT.prototype.nSJ = function(uQg) { for (var nzz = 0, _aT = uQg.length; nzz < _aT; nzz++) { var vlv = uQg[nzz]; if (this.DOR[vlv]) { delete this.DOR[vlv]; this.zBu--; } } this.jNp = {}; return this.loadImages( uQg ); }; hKT.prototype.JoH = function() { if ((jME(this.DOR) - this.zBu) == 0) return 1.0; var hCk = 0; for (var vlv in this.DOR) { if (this.DOR[vlv].loaded) hCk++; else { var Ezd = this.DOR[vlv]; var WxE = Ezd.img; if (typeof(WxE.complete) != 'undefined') { if (WxE.complete) {
Ezd.loaded = true; hCk++; } } else { if (WxE.width > 0) { Ezd.loaded = true; hCk++; } } } } return ((hCk - this.zBu) / (jME(this.DOR) - this.zBu)); }; hKT.prototype.WTw = function() { this.zBu = jME(this.DOR); }; hKT.prototype.reset = function() { this.DOR = {}; this.zBu = 0; }; hKT.prototype.lookupImage = function(vlv) { return this.DOR[vlv] || this.iqT[vlv.replace(/^(.+)\/([^\/]+)$/, '$2').replace(/\.\w+$/, '')]; }; hKT.prototype.getImageSize = function(vlv) { var Ezd = this.lookupImage(vlv); if (!Ezd || !Ezd.loaded) return { width:0, height:0 }; var WxE = Ezd.img; return { width: WxE.width / qBq.tdu, height: WxE.height / qBq.tdu }; }; hKT.prototype.getImageTag = function(vlv, GAq) { var Ezd = this.lookupImage(vlv); if (!Ezd || !Ezd.loaded) return ''; var WxE = Ezd.img; return '<img src="'+WxE.src+'" width="'+WxE.width+'" height="'+WxE.height+'" border="0" '+kMt(GAq)+'/>'; }; hKT.prototype.getImageURL = function(vlv) {
var Ezd = this.lookupImage(vlv); if (!Ezd || !Ezd.loaded) return ''; return Ezd.img.src; }; hKT.prototype.dynaLoad = function(HYp, vlv, usd) { if (!usd) usd = 1.0; else if (usd > 1.0) usd = 1.0; else if (usd < 0.0) usd = 0.0; var uk_ = parseInt( usd * this.wac, 10 ); this.jNp[HYp] = [ uk_, vlv ]; }; hKT.prototype.SaR = function(LHl) { this.MJK = null; var WBO = 0; if (!ysa(this.jNp)) return; for (var uk_ = 0, _aT = this.wac; uk_ <= _aT; uk_++) { var WcG = []; for (var HYp in this.jNp) { if (this.jNp[HYp][0] == uk_) { if (WBO < this.WLN) { var WxE = el(HYp); ; var kWP = this.jNp[HYp][1]; WxE.src = kWP.match(/^\w+\:\/\//) ? kWP : this.getImageURL(kWP); WBO++; WcG.push( HYp ); } else { uk_ = this.wac + 1; break; } } } for (var Bhi = 0, jQZ = WcG.length; Bhi < jQZ; Bhi++) { delete this.jNp[ WcG[Bhi] ]; } } if (LHl && ysa(this.jNp) && !this.MJK) { this.MJK = setTimeout( function() { LKR.ghs.SaR(true); }, 33 ); }
}; hKT.prototype.qZn = function(tjn) { var WcG = []; for (var HYp in this.jNp) { if (HYp.indexOf(tjn) == 0) WcG.push(HYp); } for (var nzz = 0, _aT = WcG.length; nzz < _aT; nzz++) { delete this.jNp[ WcG[nzz] ]; } };; function yCi() { this.WFt = {}; this.zBu = 0; }; yCi.prototype.qAz = function(HCD) { var uQg = Esx(HCD); for (var nzz = 0; nzz < uQg.length; nzz++) { var dZP = uQg[nzz]; var vJr = dZP.Name; if (!this.WFt[vJr]) { ; var rJC = merge_objects(dZP, { loaded: false, img: new Image() }); if (LKR.jiT) { rJC.img.onerror = function() { acp("Failed to load font: " + this.src); }; var vlv = LKR.PQ_ + 'fonts/' + vJr + '.png'; ; rJC.img.src = vlv; } else { rJC.img.xTH = 5; rJC.img.onerror = function() { ; this.xTH--; if (this.xTH > 0) { ;
this.src = this.src.replace(/\&rt\=\d+/, '') + '&rt=' + this.xTH; } else { acp("Failed to load font: " + this.src); } }; var vlv = LKR.PQ_ + 'api/game_get_font.png' + IiS({ game_id: LKR.id, rev: LKR.ICK.rev, font: vJr, zoom: qBq.tdu, zoom_filter: LKR.asW.ZoomFilter, mod: LKR.Fvp }); ; rJC.img.src = vlv; } this.WFt[vJr] = rJC; } } }; yCi.prototype.reloadAll = function() { var uQg = []; for (var LwV in this.WFt) { var rJC = this.WFt[LwV]; rJC.loaded = false; delete rJC.img; uQg.push( rJC ); } this.WFt = {}; this.zBu = 0; this.qAz( uQg ); }; yCi.prototype.JoH = function() { if ((jME(this.WFt) - this.zBu) == 0) return 1.0; var hCk = 0; for (var vJr in this.WFt) { if (this.WFt[vJr].loaded) hCk++; else { var rJC = this.WFt[vJr];
var WxE = rJC.img; if (typeof(WxE.complete) != 'undefined') { if (WxE.complete) { rJC.loaded = true; hCk++; } } else { if (WxE.width > 0) { rJC.loaded = true; hCk++; } } } } return ((hCk - this.zBu) / (jME(this.WFt) - this.zBu)); }; yCi.prototype.WTw = function() { this.zBu = jME(this.WFt); }; yCi.prototype.reset = function() { this.WFt = {}; this.zBu = 0; }; yCi.prototype.lookupFont = function(Vro) { return this.WFt[Vro]; }; yCi.prototype.getFontURL = function(Vro) { var font = this.lookupFont(Vro); if (!font || !font.loaded) return ''; return font.img.src; };; function rLo() { this.Edc = {}; this.iqT = {}; this.zBu = 0; }; rLo.prototype.LYT = function(HCD) { var uQg = Esx(HCD); var WBO = 0;
for (var nzz = 0; nzz < uQg.length; nzz++) { var vlv = uQg[nzz]; if (!this.Edc[vlv]) { ; this.Edc[vlv] = { loaded: false, data: null }; var afT = vlv.replace(/^(.*)\/([^\/]+)$/, '$2').replace(/\.\w+$/, ''); this.iqT[afT] = this.Edc[vlv]; if (LKR.jiT) { GvJ( LKR.PQ_ + 'xml' + vlv.replace(/\.xml$/i, '.js') ); } else { window.xl = this; GvJ( LKR.PQ_ + 'api/game_get_xml' + IiS({ game_id: LKR.id, rev: LKR.ICK.rev, path: vlv, mod: LKR.Fvp, lang: LKR.lang, format: 'js', callback: 'xl.Gaz' })); } WBO++; } } return WBO; }; rLo.prototype.Gaz = function(Ecf) { if (Ecf.Code != 0) return acp("Failed to load XML: " + Ecf.Description); var vlv = Ecf.Path; var Row = this.Edc[vlv]; ; Row.loaded = true; Row.data = Ecf.Data; }; rLo.prototype.JoH = function() {
if ((jME(this.Edc) - this.zBu) == 0) return 1.0; var hCk = 0; for (var vlv in this.Edc) { if (this.Edc[vlv].loaded) hCk++; else { var Row = this.Edc[vlv]; if (Row.loaded) hCk++; } } return ((hCk - this.zBu) / (jME(this.Edc) - this.zBu)); }; rLo.prototype.WTw = function() { this.zBu = jME(this.Edc); }; rLo.prototype.lookupFile = function(kWP) { return this.Edc[kWP] || this.iqT[kWP.replace(/\.\w+$/, '')]; };; function GSn() { this.hWO = {}; this.zBu = 0; }; GSn.prototype.IKq = function(HCD) { var uQg = Esx(HCD); for (var nzz = 0; nzz < uQg.length; nzz++) { var hjM = uQg[nzz]; if (!this.hWO[hjM]) { ; this.hWO[hjM] = { loaded: false, data: null }; if (LKR.jiT) { GvJ( LKR.PQ_ + 'levels/' + hjM + '.js' ); } else { window.ll = this; GvJ( LKR.PQ_ + 'api/game_get_level_data' + IiS({ game_id: LKR.id, rev: LKR.ICK.rev, level_id: hjM,
mod: LKR.Fvp, format: 'js', callback: 'll.Gaz' })); } } } }; GSn.prototype.Gaz = function(Ecf) { if (Ecf.Code != 0) return acp("Failed to load level data: " + Ecf.Description); var hjM = Ecf.LevelID; var cpc = this.hWO[hjM]; ; cpc.loaded = true; cpc.data = Ecf.Data; if (!cpc.data.layers) cpc.data.layers = {}; var _YY = JwD( LKR.asW.Levels.Level, { Name: hjM } ); if (_YY.Layers && _YY.Layers.Layer) { var KIO = Esx( _YY.Layers.Layer ); for (var nzz = 0, _aT = KIO.length; nzz < _aT; nzz++) { var whP = KIO[nzz]; var yXA = cpc.data.layers[ whP.Name ]; if (yXA) { ; switch (whP.Type) { case 'sprite': this.mCp(whP, yXA); break; case 'tile': this.DnH(whP, yXA); break; } } } } ; }; GSn.prototype.mCp = function(whP, VBn) { for (var nzz = 0, _aT = VBn.length; nzz < _aT; nzz++) { var vlH = VBn[nzz]; var eqW = LKR.Ltf[ vlH.type ]; if (!eqW) return acp("Could not find sprite definition: " + sprite.type); if (!eqW._media_loaded) {
LKR.Qzd( vlH.type ); } } }; GSn.prototype.DnH = function(whP, yXA) { if (yXA.objectData) { var hdv = yXA.objectData; for (var tpK = 0, _max_tx = hdv.length; tpK < _max_tx; tpK++) { var CDU = hdv[tpK]; if (CDU) { for (var ubH = 0, _max_ty = CDU.length; ubH < _max_ty; ubH++) { var CEV = CDU[ubH]; if (CEV) { var vaT = (typeof(CEV) == 'object') ? CEV.type : CEV; var YZA = LKR.hLr[ vaT ]; if (!YZA) return acp("Could not find tile definition: " + vaT); if (!YZA._media_loaded) { LKR.w_O( vaT ); } } } } } } if (yXA.map) { var mxV = yXA.map; for (var LwV in mxV) { var zdv = mxV[LwV]; if (zdv.match(/\?.+/)) { var qkb = JwD( LKR.asW.Tilesets.Tileset, { Name: whP.Tileset } ); var RBT = qkb.Path + zdv; if (ua.ie6 && RBT.match(/\.png/i)) { if (RBT.match(/\?/)) RBT += '&format=gif'; else RBT += '?format=gif'; } ; LKR.Bay += qiQ.loadImages( RBT ); } } } 
}; GSn.prototype.JoH = function() { if ((jME(this.hWO) - this.zBu) == 0) return 1.0; var hCk = 0; for (var hjM in this.hWO) { if (this.hWO[hjM].loaded) hCk++; else { var cpc = this.hWO[hjM]; if (cpc.loaded) hCk++; } } return ((hCk - this.zBu) / (jME(this.hWO) - this.zBu)); }; GSn.prototype.WTw = function() { this.zBu = jME(this.hWO); }; GSn.prototype.lookupLevel = function(hjM) { return this.hWO[hjM] ? this.hWO[hjM].data : null; };; function TfM() { this.id = 'd_progress'; this.width = 0; this.height = 0; this.zIndex = 99; this.div = null; this.GAx = null; this.VWC = 0; this.umP = 1; }; TfM.prototype = new pqr(); TfM.prototype.MiV = function(gYe) { this.setHandler('onPreload', gYe); var Urw = LKR.PQ_ + 'images/engine/toolbar'; var EaM = LKR.PQ_ + 'images/engine/dialog'; var bYt = [ Urw + '/background.png', Urw + '/border-left.png', Urw + '/border-right.png', Urw + '/logo.png', Urw + '/divider.png',
Urw + '/icons.png', Urw + '/loading-under.png', Urw + '/loading-over.png', Urw + '/msgs.png', EaM + '/titles.png', EaM + '/play.png' ]; if (LKR.EYO && !ICK.autoplay) { bYt.push( EaM + '/play.png' ); } this.images = []; for (var nzz = 0, _aT = bYt.length; nzz < _aT; nzz++) { this.zrX( bYt[nzz] ); } if (LKR.asW.BackgroundImage) { this.GZw = LKR.getGamePath() + LKR.asW.BackgroundImage; if (!LKR.jiT) this.GZw += '?zoom=' + qBq.tdu + '&zoom_filter=' + LKR.asW.ZoomFilter; this.Pii = this.zrX( this.GZw ); } else { this.GZw = LKR.PQ_ + 'images/logo_80.png'; this.Pii = this.zrX( this.GZw ); } if (LKR.asW.SplashImage) { this.LsH = LKR.getGamePath() + LKR.asW.SplashImage; if (!LKR.jiT) this.LsH += '?zoom=' + qBq.tdu + '&zoom_filter=' + LKR.asW.ZoomFilter; this.pfT = this.zrX( this.LsH ); } else { this.LsH = this.GZw; this.pfT = this.Pii; } this.fid(); }; TfM.prototype.zrX = function(vlv) { var WxE = new Image(); WxE.src = vlv; this.images.push( WxE ); return WxE; };
TfM.prototype.fid = function() { var Qpn = 0; for (var nzz = 0, _aT = this.images.length; nzz < _aT; nzz++) { if (this.images[nzz].complete || this.images[nzz].width) Qpn++; } if (Qpn == this.images.length) { this.fireHandler('onPreload'); } else { setTimeout( function() { iSy.fid(); }, 100 ); } }; TfM.prototype.YQG = function() { if (LKR.asW.BackgroundImage) { this.GZw = this.GZw.replace(/\?.+$/, '') + '?zoom=' + qBq.tdu + '&zoom_filter=' + LKR.asW.ZoomFilter; this.Pii = new Image(); this.Pii.src = this.GZw; } }; TfM.prototype.etv = function() { return( (this.Pii.complete || this.Pii.width) ? 1.0 : 0.0 ); }; TfM.prototype.setPosition = function(Elw) { var jtY = 0; var jdY = null; if (Elw) { this.width = this.pfT.width; this.height = this.pfT.height; } else { this.width = this.Pii.width; this.height = this.Pii.height; } var bKv = el('effect_container'); if (bKv) { this.GAx = bKv; this.left = parseInt( (qBq.div.offsetWidth / 2) - (this.width / 2), 10 ); this.top = parseInt( (qBq.div.offsetHeight / 2) - (this.height / 2), 10 ); } else {
if (LKR.NvE) { for (var nzz = 0; nzz < LKR.NvE.length; nzz++) { var zhp = LKR.NvE[nzz]; if (zhp.portWidth * zhp.portHeight > jtY) { jtY = zhp.portWidth * zhp.portHeight; jdY = zhp; } } } if (jdY) { this.GAx = jdY.div; this.left = parseInt( (this.GAx.offsetWidth / 2) - (this.width / 2), 10 ); this.top = parseInt( (this.GAx.offsetHeight / 2) - (this.height / 2), 10 ); } else { return acp('Could not find suitable port for progress.'); } } }; TfM.prototype.show = function(Elw) { this.hide(); this.setPosition(Elw); this.div = document.createElement('DIV'); this.div.setAttribute( 'id', this.id ); this.div.id = this.id; this.div.style.position = 'absolute'; this.div.style.left = this.left + 'px'; this.div.style.top = this.top + 'px'; this.div.style.width = this.width + 'px'; this.div.style.height = this.height + 'px'; this.div.style.zIndex = Elw ? 3 : this.zIndex; this.div.style.visibility = 'visible'; this.GAx.appendChild(this.div); var vlv = Elw ? this.LsH : this.GZw; if (ua.ie6 && vlv.match(/\.png(\?|$)/i)) { this.div.innerHTML = "<div " + " style=\"" + "width:" + this.width + "px; height:" + this.height + "px;" + "filter:progid:DXImageTransform.Microsoft.AlphaImageLoader" + "(src=\'" + vlv + "\', sizingMethod='scale');\"></div>"; }
else { this.div.style.backgroundImage = 'url('+vlv+')'; } if (!LKR.HpS) { LKR.QZW.Ril('loading'); LKR.QZW.FIR(); } this.NWN(); }; TfM.prototype.hide = function() { if (this.div) { this.div.style.left = '-4000px'; this.div.style.visibility = 'hidden'; try { this.GAx.removeChild(this.div); } catch (e) { var xou = el( this.id ); try { this.GAx.removeChild(xou); } catch (e) { ; }; }; this.div = null; if (!LKR.HpS) { LKR.QZW.Ril('icons'); LKR.QZW.FuS(); } } }; TfM.prototype.NWN = function(maw, mqe) { if (typeof(maw) != 'undefined') this.VWC = maw; if (typeof(mqe) != 'undefined') this.umP = mqe; var kMU = this.VWC / this.umP; if (!LKR.HpS) LKR.QZW.LAc( kMU ); };; function AUG(XcS, jwX) { this.handler = XcS; this.id = jwX; this.volume = 1.0; this.balance = 0.0; }; AUG.prototype.pYw = function() { var xou = this.div = document.createElement('div'); var NAT = this.style = xou.style; NAT.position = 'absolute';
NAT.left = '0px'; NAT.top = '0px'; NAT.width = '1px'; NAT.height = '1px'; qBq.div.appendChild(xou); xou.innerHTML = this.jRy(1,1) + '<div id="d_video_overlay_'+this.id+'" style="position:absolute; left:0px; top:0px; width:1px; height:1px; z-index:2"></div>'; }; AUG.prototype.uXE = function() { this._stop(); this.FNl(); this.wpf(1, 1); this.style.left = '-300px'; this.style.top = '-300px'; }; AUG.prototype.OWR = function(Jnw, lFq) { switch (Jnw) { case 'flashLoadComplete': var kqK = this; setTimeout( function() { kqK.loaded = true; kqK.movie = document.getElementById('swf_effect_video_'+kqK.id); if (kqK.handler.fireHandler) kqK.handler.fireHandler('onPlayerLoad', kqK.id); }, 1 ); break; case 'error': acp("Video Clip Error: " + this.id + ": " + lFq); break; case 'debug': ; break; case 'clipInfo': ; this.metadata = nyZ( lFq ); break; default: var fQa = Effect.VideoManager._videos[ this.id ]; if (fQa.handler.fireHandler) fQa.handler.fireHandler(Jnw, this.id, lFq); break; }
}; AUG.prototype.mGt = function() { if (!gAudio.enabled || !gAudio.rWc['video'].enabled) return 0.0; return ( this.volume * gAudio.PgU('video') ); }; AUG.prototype.Euh = function() { return ( this.balance ); }; AUG.prototype.jRy = function(EmD, dRa) { var ynh = ''; var JoN = 'id=' + this.id + '&width=' + EmD + '&height=' + dRa + '&volume=' + this.mGt() + '&balance=' + this.Euh() + '&smoothing=' + ((LKR.asW.ZoomFilter == 'Smooth') ? 1 : 0); if (ua.ie) { ynh += '<object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" codebase="'+EIG+'://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=9,0,0,0" width="'+EmD+'" height="'+dRa+'" id="swf_effect_video_'+this.id+'" align="middle"><param name="allowScriptAccess" value="always" /><param name="allowFullScreen" value="false" /><param name="movie" value="'+Effect.VideoManager.Qag+'" /><param name="loop" value="false" /><param name="menu" value="false" /><param name="quality" value="best" /><param name="bgcolor" value="#ffffff" /><param name="flashvars" value="'+JoN+'"/><param name="wmode" value="transparent"/></object>'; } else { ynh += '<embed id="swf_effect_video_'+this.id+'" src="'+Effect.VideoManager.Qag+'" loop="false" menu="false" quality="best" bgcolor="#ffffff" width="'+EmD+'" height="'+dRa+'" name="swf_effect_video_'+this.id+'" align="middle" allowScriptAccess="always" allowFullScreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="'+JoN+'" wmode="transparent" />'; } return ynh; }; AUG.prototype._load = function(vlv, zwh) { if (!zwh) zwh = false; this.movie.v_load( LKR.getGamePath() + vlv + '?mod=' + LKR.Fvp + '&ttl=static', zwh ); }; AUG.prototype._play = function() { this.movie.v_play(); this.movie.v_set_volume( this.mGt() ); }; AUG.prototype._stop = function() { this.movie.v_stop(); }; AUG.prototype._rewind = function() { this.movie.v_rewind(); }; AUG.prototype.Jec = function(vlv) { if (!this.movie.v_set_active( LKR.getGamePath() + vlv + '?mod=' + LKR.Fvp + '&ttl=static')) {
acp("Unable to set active video clip: " + vlv); } }; AUG.prototype.FNl = function() { this.movie.v_deactivate(); }; AUG.prototype.xye = function() { return this.movie.v_get_position(); }; AUG.prototype.MpX = function(pos) { this.movie.v_set_position(pos); }; AUG.prototype.USo = function() { if (!this.loaded) return 0.0; return this.movie.v_get_load_progress(); }; AUG.prototype.wpf = function(EmD, dRa) { this.movie.style.width = '' + EmD + 'px'; this.movie.style.height = '' + dRa + 'px'; this.movie.v_set_size(EmD, dRa); var Bcg = el('d_video_overlay_'+this.id); if (Bcg) { Bcg.style.width = '' + EmD + 'px'; Bcg.style.height = '' + dRa + 'px'; } }; AUG.prototype.FHB = function(zwh) { this.movie.v_set_loop( !!zwh ); }; AUG.prototype._set_volume = function(Cgr) { this.volume = Cgr; if (this.movie) this.movie.v_set_volume( this.mGt() ); }; AUG.prototype.xrR = function() { if (this.movie) this.movie.v_set_volume( this.mGt() ); };; Effect.VideoManager = { enabled: true, Qag: 'engine/EffectVideo.swf', _videos: {},
KWu: function(XcS, jwX) { if (!jwX) jwX = rTx(); var CPJ = new fdj(XcS, jwX); var fQa = { id: jwX, handler: XcS, clip: CPJ }; this._videos[jwX] = fQa; CPJ.pYw(); return CPJ; }, notify: function(jwX, Jnw, lFq) { var fQa = this._videos[jwX]; if (!fQa) return acp("Could not locate video: " + jwX); fQa.clip.OWR(Jnw, lFq); }, xrR: function() { for (var jwX in this._videos) { var fQa = this._videos[jwX]; if (fQa.clip && fQa.clip.loaded) fQa.clip.xrR(); } } }; function fdj() {}; if (ua.safari3 && ua.mac) { fdj = AUG; } else { fdj = AUG; } function sDd() { this.lZU = {}; this.addEventListener('onPlayerLoad', [this, 'cqm']); }; sDd.prototype = new pqr(); sDd.prototype.kXW = function(HCD) { if (!Effect.VideoManager.enabled) return 0; var uQg = Esx(HCD); var WBO = 0;
for (var nzz = 0; nzz < uQg.length; nzz++) { var vlv = uQg[nzz]; if (!this.lZU[vlv]) { ; var CPJ = this.lZU[vlv] = Effect.VideoManager.KWu(this); CPJ.url = vlv; WBO++; } } return WBO; }; sDd.prototype.cqm = function(fZk) { var CPJ = Effect.VideoManager._videos[fZk].clip; ; CPJ._load( CPJ.url ); }; sDd.prototype.JoH = function() { if (!Effect.VideoManager.enabled) return 1.0; var qFF = 0; var WBO = 0; for (var vlv in this.lZU) { var CPJ = this.lZU[vlv]; if (!CPJ.ignore) { qFF += CPJ.USo(); WBO++; } } return (WBO > 0) ? (qFF / WBO) : 1.0; }; sDd.prototype.WTw = function() { for (var vlv in this.lZU) { var CPJ = this.lZU[vlv]; CPJ.ignore = true; } }; sDd.prototype.Rgk = function(vlv) { var CPJ = this.lZU[vlv]; if (!CPJ) { return acp("Movie not loaded: " + vlv); }
return CPJ; };; function Portal(jwX) { if (!jwX) return acp("You must pass an ID"); this.id = jwX; this.div = el(jwX); if (!this.div) return acp("Cannot locate DOM element: " + jwX); this.style = this.div.style; if (!this.div.style.position) this.div.style.position = 'relative'; this.div.style.overflow = 'hidden'; this.KIO = []; this.tdu = 1; this.KCz = 1; this.portWidth = 0; this.portHeight = 0; this.virtualWidth = 0; this.virtualHeight = 0; this.scrollX = 0; this.scrollY = 0; this.hOY = -1000; this.OxG = -1000; this.cursor = true; this.hc = { div: null, last_x: 0, last_y: 0, size: 192, padding: 64 }; this.rVo = null; this.K_k = '_bkgnd_' + this.id; this.backgroundOffsetX = 0; this.backgroundOffsetY = 0; this.ltl = false; }; Portal.prototype = new pqr(); Portal.prototype.init = function() { if (!this.portWidth || !this.portHeight) { this.portWidth = this.div.offsetWidth / this.tdu; this.portHeight = this.div.offsetHeight / this.tdu;
} if (!this.virtualWidth) this.virtualWidth = this.portWidth; if (!this.virtualHeight) this.virtualHeight = this.portHeight; var vFb = this.portWidth * this.tdu; var mHW = this.portHeight * this.tdu; this.div.style.width = vFb + 'px'; this.div.style.height = mHW + 'px'; if (this.nUo) { el('effect_container').style.width = vFb + 'px'; } for (var nzz = 0; nzz < this.KIO.length; nzz++) { if (this.KIO[nzz].init) this.KIO[nzz].init(); } this.setBackground(); }; Portal.prototype.setZoomLevel = function(MUq) { this.tdu = parseInt(MUq, 10); }; Portal.prototype.getZoomLevel = function() { return this.tdu; }; Portal.prototype.setBackgroundColor = function(SiQ) { this.dnj(); this.div.style.backgroundColor = SiQ; }; Portal.prototype.setBackgroundOpacity = function(eZe) { if (this.rVo) { RRP( this.rVo, eZe ); } }; Portal.prototype.setBackgroundOffset = function(Nve, VaM) { this.backgroundOffsetX = Nve; this.backgroundOffsetY = VaM; if (this.rVo) { this.nRM(); } }; Portal.prototype.mdS = function() { this.dnj(); if (this.background.url) { var Ezd = LKR.ghs.lookupImage( this.background.url ); if (!Ezd) {
; this.background.width = 0; this.background.height = 0; return; } ; this.background.width = Ezd.img.width; this.background.height = Ezd.img.height; var vFb = this.portWidth * this.tdu; var mHW = this.portHeight * this.tdu; var EmD = 0; switch (this.background.xMode || 'fit') { case 'fit': EmD = Math.max( this.background.width, vFb ); break; case 'infinite': EmD = vFb + this.background.width; break; } if (EmD % this.background.width > 0) EmD = this.background.width * Math.ceil( EmD / this.background.width ); var dRa = 0; switch (this.background.yMode || 'fit') { case 'fit': dRa = Math.max( this.background.height, mHW ); break; case 'infinite': dRa = mHW + this.background.height; break; } if (dRa % this.background.height > 0) dRa = this.background.height * Math.ceil( dRa / this.background.height ); this.rVo = document.createElement('div'); this.rVo.setAttribute('id', this.K_k); this.rVo.id = this.K_k; if (ua.ie) this.rVo.setAttribute( 'onselectstart', "return false" ); var znG = this.rVo.style; znG.position = 'absolute'; znG.width = '' + EmD + 'px'; znG.height = '' + dRa + 'px'; znG.left = '0px'; znG.top = '0px';
znG.zIndex = 0; var WBO = Math.floor( EmD / this.background.width ) * Math.floor( dRa / this.background.height ); if (ua.portalBkgndImage || ua.ie || (WBO > 64)) { znG.backgroundImage = 'url(' + Ezd.img.src + ')'; } else { var ynh = ''; for (var nzz = 0; nzz < WBO; nzz++) { ynh += '<img src="'+Ezd.img.src+'" width="'+this.background.width+'" height="'+this.background.height+'"'; if (ua.ie) ynh += ' onselectstart="return false"'; ynh += '/>'; } this.rVo.innerHTML = ynh; } this.div.appendChild( this.rVo ); } }; Portal.prototype.dnj = function() { if (this.rVo) { try { this.div.removeChild(this.rVo); } catch (e) { var xou = el( this.K_k ); try { this.div.removeChild(xou); } catch (e) { ; }; }; this.rVo = null; } }; Portal.prototype.setBackground = function(_RI) { if (_RI) this.background = LIu( _RI ); if (!this.background) return; ; this.div.style.backgroundColor = this.background.color ? this.background.color : 'black'; if (this.background.url) { this.mdS(); if (this.background.xSpeed) { this.background.xDiv = this.background.xSpeed; delete this.background.xSpeed; } if (this.background.ySpeed) { this.background.yDiv = this.background.ySpeed; delete this.background.ySpeed;
} if (!this.background.xDiv && this.background.xyDiv) this.background.xDiv = this.background.xyDiv; if (!this.background.xDiv) this.background.xDiv = 0; if (!this.background.yDiv && this.background.xyDiv) this.background.yDiv = this.background.xyDiv; if (!this.background.yDiv) this.background.yDiv = 0; this.nRM(); } }; Portal.prototype.nRM = function() { if (this.background && this.background.url && this.rVo) { var Nve = 0; var VaM = 0; var oqP = this.scrollX; var wqv = this.scrollY; if (this.background.xMode) { if (this.background.xMode == 'infinite') { Nve = Math.floor( oqP * this.background.xDiv ); } else if (this.background.xMode == 'fit') { if (this.virtualWidth == this.portWidth) Nve = 0; else { var vFb = this.portWidth * this.tdu; var dhM = this.background.width - vFb; Nve = Math.floor( (oqP * dhM) / (this.virtualWidth - this.portWidth) ); } } } if (this.background.yMode) { if (this.background.yMode == 'infinite') { VaM = Math.floor( wqv * this.background.yDiv ); } else if (this.background.yMode == 'fit') { if (this.virtualHeight == this.portHeight) VaM = 0; else { var mHW = this.portHeight * this.tdu; var PTN = this.background.height - mHW; VaM = Math.floor( (wqv * PTN) / (this.virtualHeight - this.portHeight) ); } } } 
Nve += Math.floor( this.backgroundOffsetX * this.getZoomLevel() ); VaM += Math.floor( this.backgroundOffsetY * this.getZoomLevel() ); Nve = 0 - (Nve % this.background.width); VaM = 0 - (VaM % this.background.height); this.rVo.style.left = '' + Nve + 'px'; this.rVo.style.top = '' + VaM + 'px'; } }; Portal.prototype.attach = function(HCD) { if (!HCD.IjT) return acp("Cannot attach non-plane object to portal"); HCD.port = this; if (!JwD(this.KIO, {id: HCD.id})) JGI( this.KIO, HCD ); if (HCD.init) HCD.init(); }; Portal.prototype.remove = function(rEQ) { var jwX = ''; var HCD = null; if (typeof(rEQ) == 'object') { HCD = rEQ; jwX = rEQ.id; } else { HCD = JwD( this.KIO, { id: rEQ } ); if (!HCD) return false; jwX = HCD.id; } var nzz = jmP( this.KIO, { id: jwX } ); if (nzz == -1) return false; HCD.reset(); this.KIO.splice( nzz, 1 ); }; Portal.prototype.removeAll = function() { for (var nzz = 0, _aT = this.KIO.length; nzz < _aT; nzz++) { this.KIO[nzz].reset(); } this.KIO = []; }; Portal.prototype.getPlane = function(jwX) { return JwD( this.KIO, { id: jwX } ); };
Portal.prototype.setSize = function(KSH, mtq) { this.portWidth = parseInt(KSH, 10); this.portHeight = parseInt(mtq, 10); }; Portal.prototype.setVirtualSize = function(KSH, mtq) { this.virtualWidth = parseInt(KSH, 10); this.virtualHeight = parseInt(mtq, 10); }; Portal.prototype.setScroll = function(oqP, wqv) { if (oqP < 0) oqP = 0; if (wqv < 0) wqv = 0; if (oqP > this.virtualWidth - this.portWidth) oqP = this.virtualWidth - this.portWidth; if (wqv > this.virtualHeight - this.portHeight) wqv = this.virtualHeight - this.portHeight; for (var nzz = 0, _aT = this.KIO.length; nzz < _aT; nzz++) { if (this.KIO[nzz].setScroll) this.KIO[nzz].setScroll(oqP, wqv); } this.scrollX = oqP; this.scrollY = wqv; }; Portal.prototype.follow = function(vlH, bja) { if (!bja) bja = 1; var TSN = Math.floor( (vlH.x + (vlH.width / 2)) - (this.portWidth / 2) ); var Mgm = Math.floor( (vlH.y + (vlH.height / 2)) - (this.portHeight / 2) ); if ((this.scrollX != TSN) || (this.scrollY != Mgm)) { this.setScroll( Math.floor( this.scrollX + ((TSN - this.scrollX) * bja) ), Math.floor( this.scrollY + ((Mgm - this.scrollY) * bja) ) ); } }; Portal.prototype.tween = function(_RI) { _RI.target = this; gVl.addTween(_RI); }; Portal.prototype.onTweenUpdate = function(Zgt) { var UWS = Zgt.properties; if (UWS.scrollX || UWS.scrollY) this.setScroll( this.scrollX, this.scrollY ); if (UWS.backgroundOffsetX || UWS.backgroundOffsetY) this.nRM(); }; Portal.prototype.draw = function(aMv) {
if (!aMv) aMv = false; if (this.ltl) aMv = true; for (var nzz = 0, _aT = this.KIO.length; nzz < _aT; nzz++) { this.KIO[nzz].draw(aMv); } if (this.background && this.background.url && ((this.scrollX != this.hOY) || (this.scrollY != this.oldScrollY))) { this.nRM(); this.hOY = this.scrollX; this.OxG = this.scrollY; } if (!this.cursor && this.hc.div) { var qlK = new Point( LKR.mousePt.x, LKR.mousePt.y ); var RUp = hGi(this.div); qlK.x -= RUp.left; qlK.y -= RUp.top; var WHQ = Math.floor(qlK.x / this.hc.size); var iVk = Math.floor(qlK.y / this.hc.size); if ((WHQ != this.hc.last_x) || (iVk != this.hc.last_y)) { var acQ = WHQ * this.hc.size; var hfU = iVk * this.hc.size; var vFb = this.portWidth * this.tdu; var mHW = this.portHeight * this.tdu; if ((qlK.x < 0) || (qlK.x >= vFb) || (qlK.y < 0) || (qlK.y >= mHW)) { acQ = -4000; hfU = 0; } acQ -= (this.hc.padding / 2); hfU -= (this.hc.padding / 2); this.hc.div.style.left = acQ + 'px'; this.hc.div.style.top = hfU + 'px'; this.hc.last_x = WHQ; this.hc.last_y = iVk; } } this.ltl = false; }; Portal.prototype.logic = function(Ssl) { for (var nzz = 0, _aT = this.KIO.length; nzz < _aT; nzz++) { this.KIO[nzz].logic(Ssl); } };
Portal.prototype.reset = function() { for (var nzz = 0; nzz < this.KIO.length; nzz++) { if (this.KIO[nzz].reset) this.KIO[nzz].reset(); } this.hOY = -1000; this.OxG = -1000; this.dnj(); }; Portal.prototype.hide = function() { for (var nzz = 0; nzz < this.KIO.length; nzz++) { if (this.KIO[nzz].hide) this.KIO[nzz].hide(); } }; Portal.prototype.show = function() { for (var nzz = 0; nzz < this.KIO.length; nzz++) { if (this.KIO[nzz].show) this.KIO[nzz].show(); } }; Portal.prototype.loadlevel = function() { for (var nzz = 0; nzz < this.KIO.length; nzz++) { if (this.KIO[nzz].loadlevel) this.KIO[nzz].loadlevel(); } }; Portal.prototype.pause = function() { for (var nzz = 0; nzz < this.KIO.length; nzz++) { if (this.KIO[nzz].pause) this.KIO[nzz].pause(); } }; Portal.prototype.resume = function() { for (var nzz = 0; nzz < this.KIO.length; nzz++) { if (this.KIO[nzz].resume) this.KIO[nzz].resume(); } }; Portal.prototype.hideCursor = function() { if (!this.cursor) return; if (ua.mac) { if (ua.ff3 || ua.safari3 || ua.chrome) { this.div.style.cursor = 'none'; } else {
if (!this.hc.div) { var NIE = this.hc.size + this.hc.padding; var xou = document.createElement('DIV'); xou.style.position = 'absolute'; xou.style.width = ''+NIE+'px'; xou.style.height = ''+NIE+'px'; xou.style.left = '-4000px'; xou.style.top = '0px'; xou.style.zIndex = 999; xou.innerHTML = '<embed src="'+LKR.PQ_+'engine/hide_cursor.swf" quality="high" swliveconnect="true" bgcolor="#ffffff" width="'+NIE+'" height="'+NIE+'" align="middle" allowScriptAccess="always" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" wmode="transparent" />'; this.div.appendChild(xou); this.hc.div = xou; } this.hc.div.style.visibility = 'visible'; this.div.style.cursor = 'crosshair'; } } else { if (ua.ff3) { this.div.style.cursor = 'none'; } else if (ua.chrome || ua.safari) { this.div.style.cursor = 'url(' + LKR.PQ_ + 'engine/1px.cur) 8 8, none'; } else if (ua.ie) { this.div.style.cursor = 'url(' + LKR.PQ_ + 'engine/transparent.cur), none, crosshair'; } else { this.div.style.cursor = 'url(' + LKR.PQ_ + 'engine/transparent.cur) 8 8, none, crosshair'; } } var overlay = el('effect_overlay'); if (overlay) { if (ua.chrome) overlay.style.cursor = 'url(' + LKR.PQ_ + 'engine/1px.cur) 8 8, none'; else overlay.style.cursor = 'none'; } this.cursor = false; }; Portal.prototype.showCursor = function() { if (this.cursor) return; 
if (ua.mac) { if (this.hc.div) { this.div.removeChild( this.hc.div ); this.hc.div = null; } } var overlay = el('effect_overlay'); if (overlay) overlay.style.cursor = 'default'; this.div.style.cursor = 'default'; this.cursor = true; }; Portal.prototype.getMouseCoords = function(bTu) { var vFb = this.portWidth * this.tdu; var mHW = this.portHeight * this.tdu; var Beo = new Point(0, 0); var qlK = new Point( LKR.mousePt.x, LKR.mousePt.y ); var RUp = hGi(this.div); qlK.x -= RUp.left; qlK.y -= RUp.top; if (bTu || ((qlK.x >= 0) && (qlK.x < vFb) && (qlK.y >= 0) && (qlK.y < mHW))) { qlK.x = Math.floor( qlK.x / this.tdu ); qlK.y = Math.floor( qlK.y / this.tdu ); qlK.x += this.scrollX; qlK.y += this.scrollY; return qlK; } else return null; }; Portal.prototype.setHandler = Portal.prototype.addEventListener = function(Vro, vMc) { if (Vro.match(/mouse/i)) { ; this.div.captureMouse = this; var overlay = el('effect_overlay'); if (overlay) overlay.captureMouse = this; } pqr.prototype.setHandler.apply(this, [Vro, vMc]); };; function Qxh() { };
Qxh.prototype.IjT = true; Qxh.prototype.scrollX = 0; Qxh.prototype.scrollY = 0; Qxh.prototype.scrollSpeed = 1.0; Qxh.prototype.zIndex = 1; Qxh.prototype.visible = true; Qxh.prototype.setZIndex = function(nzz) { this.zIndex = parseInt(nzz, 10); }; Qxh.prototype.setScrollSpeed = function(bja) { this.scrollSpeed = parseFloat(bja); }; Qxh.prototype.init = function() { }; Qxh.prototype.reset = function() { }; Qxh.prototype.logic = function() { }; Qxh.prototype.draw = function() { }; Qxh.prototype.hide = function() { }; Qxh.prototype.show = function() { }; Qxh.prototype.getMouseCoords = function() { var qlK = this.port.getMouseCoords(); if (qlK) return qlK.offset( 0 - this.port.scrollX, 0 - this.port.scrollY ).offset( this.scrollX, this.scrollY ); else return null; }; Qxh.prototype.zoom = function(kMU) { return Math.floor( kMU * this.port.tdu, 10 ); }; Qxh.prototype.unzoom = function(kMU) { return Math.floor( kMU / this.port.tdu, 10 ); }; Qxh.prototype.tween = function(_RI) { _RI.target = this; gVl.addTween(_RI); };; function TilePlane(jwX) {
if (!jwX) jwX = rTx(); this.id = jwX; this.tileSizeX = 0; this.tileSizeY = 0; this.tileImagePath = ''; this.data = [ [] ]; this.map = {}; this.rev_map = {}; this.bTD = []; this.FuH = []; this.izN = {}; this.kya = {}; this.hOY = 0; this.OxG = 0; this.ylW = 0; this.rWV = 0; this.RwB = false; this.opacity = 1.0; this.EyE = null; }; TilePlane.prototype = new Qxh(); TilePlane.prototype.setTileSize = function(EmD, dRa) { this.tileSizeX = parseInt(EmD, 10); this.tileSizeY = parseInt(dRa, 10); }; TilePlane.prototype.setTilesPerChunk = function(npE, lnG) { this.ylW = parseInt(npE, 10); this.rWV = parseInt(lnG, 10); }; TilePlane.prototype.setInstantLoad = function(vdr) { this.RwB = !!vdr; }; TilePlane.prototype.setDrawTile = function(vMc) { this.EyE = vMc; }; TilePlane.prototype.getMaxTileX = function() { return Math.ceil( (this.port.portWidth + ((this.port.virtualWidth - this.port.portWidth) * this.scrollSpeed)) / this.tileSizeX ); }; TilePlane.prototype.getMaxTileY = function() { return Math.ceil( (this.port.portHeight + ((this.port.virtualHeight - this.port.portHeight) * this.scrollSpeed)) / this.tileSizeY ); }; TilePlane.prototype.setTileset = function(Vro) { if (this.tileImagePath) return acp("Cannot change the Tileset once it is set."); var JYj = Vro; var qkb = JwD( LKR.asW.Tilesets.Tileset, { Name: JYj } ); if (!qkb) return acp("Could not locate tileset definition: " + JYj); this.tileImagePath = qkb.Path.replace(/\/$/, ''); this.setTileSize( qkb.TileWidth, qkb.TileHeight ); }; TilePlane.prototype.init = function() {
; this.globalID = this.port.id + '_' + this.id; if (!this.tileSizeX || !this.tileSizeY) return acp("No tile size specified for TilePlane."); if (!this.ylW || !this.rWV) { var djR = Math.floor( (this.port.portWidth / this.tileSizeX) / (0 ? 4 : 2) ); if (!djR) djR = 1; this.ylW = djR; var SgB = Math.floor( (this.port.portHeight / this.tileSizeY) / (0 ? 4 : 2) ); if (!SgB) SgB = 1; this.rWV = SgB; } this.Jyq = this.tileSizeX * this.ylW; this.CUk = this.tileSizeY * this.rWV; this.hGT = this.zoom(this.Jyq); this.wKe = this.zoom(this.CUk); var zHU = Math.ceil(this.port.portWidth / this.Jyq) + 1; var iuW = Math.ceil(this.port.portHeight / this.CUk) + 1; this.Hzn = zHU * iuW; for (var nzz = 0, _aT = this.Hzn; nzz < _aT; nzz++) { var LvK = this.globalID + '_' + nzz; var xou = document.createElement('DIV'); xou.setAttribute('id', LvK); xou.id = LvK; xou.style.position = 'absolute'; xou.style.left = '-1000px'; xou.style.top = '0px'; xou.style.width = this.zoom(this.Jyq) + 'px'; xou.style.height = this.zoom(this.CUk) + 'px'; xou.style.zIndex = this.zIndex; xou.style.visibility = this.visible ? 'visible' : 'hidden'; if (this.opacity != 1.0) RRP( xou, this.opacity ); if (ua.ie) xou.setAttribute( 'onselectstart', "return false" ); this.port.div.appendChild(xou); var Ktg = this.zoom(this.tileSizeX); var IQt = this.zoom(this.tileSizeY); var yxC = LKR.getGamePath() + this.tileImagePath; var ynh = ''; if (this.EyE) { var ZsR = Ktg * this.ylW; var KqM = IQt * this.rWV;
ynh = '<table cellspacing="0" cellpadding="0" border="0" ' + 'style="border-collapse:collapse; table-layout:fixed; width:'+ZsR+'px; height:'+KqM+'px;">'; } for (var hfU = 0; hfU < this.rWV; hfU++) { if (this.EyE) ynh += '<tr>'; for (var acQ = 0; acQ < this.ylW; acQ++) { if (this.EyE) ynh += '<td width="' + Ktg + '" height="' + IQt + '">'; var HYp = LvK + '_' + acQ + '_' + hfU; if (this.EyE) { ynh += '<div id="' + HYp + '" style="width:'+Ktg+'px; height:'+IQt+'px;"></div>'; } else { ynh += '<img id="' + HYp + '" src="' + this.Brx() + '" width="' + Ktg + '" height="' + IQt + '" border="0"'; if (ua.ie) ynh += ' onselectstart="return false"'; ynh += '/>'; } if (this.EyE) ynh += '</td>'; } if (this.EyE) ynh += '</tr>'; else ynh += '<br/>'; } if (this.EyE) ynh += '</table>'; xou.innerHTML = ynh; JGI( this.FuH, LvK ); this.izN[ LvK ] = xou; this.kya[ LvK ] = { id: LvK, div: xou, style: xou.style, left: -1000, top: 0, data: edk( this.ylW, this.rWV, 0 ) }; } }; TilePlane.prototype.reset = function() { for (var LvK in this.izN) { try { this.port.div.removeChild(this.izN[LvK]); } catch (e) { var xou = el( divID );
try { this.port.div.removeChild(xou); } catch (e) { ; }; } } this.bTD = []; this.FuH = []; this.izN = {}; this.kya = {}; }; TilePlane.prototype.setZIndex = function(nzz) { this.zIndex = parseInt(nzz, 10); for (var LvK in this.izN) { this.izN[ LvK ].style.zIndex = nzz; } }; TilePlane.prototype.setOpacity = function(VTe) { this.opacity = VTe; for (var LvK in this.izN) { RRP( this.izN[ LvK ], VTe ); } }; TilePlane.prototype.fZb = function() { ; ; for (var nzz = 0, _aT = this.bTD.length; nzz < _aT; nzz++) { ; } ; for (var nzz = 0, _aT = this.FuH.length; nzz < _aT; nzz++) { ; } }; TilePlane.prototype.draw = function(aMv) { var kzA = this.scrollX % this.Jyq; var LLt = this.scrollY % this.CUk; var vFb = this.port.div.offsetWidth; var mHW = this.port.div.offsetHeight; var hGT = this.hGT; var wKe = this.wKe; var Q_a = vFb; if (vFb % hGT) Q_a += (hGT - (vFb % hGT));
var qFw = mHW; if (mHW % wKe) qFw += (wKe - (mHW % wKe)); var PTp = this.zoom( this.scrollX - this.hOY ); var ffR = this.zoom( this.scrollY - this.OxG ); if (PTp || ffR) { for (var nzz = 0, _aT = this.bTD.length; nzz < _aT; nzz++) { var HCD = this.kya[ this.bTD[nzz] ] ; var oDW = HCD.left - PTp; var oGF = HCD.top - ffR; if ((oDW <= 0 - hGT) || (oDW >= Q_a) || (oGF <= 0 - wKe) || (oGF >= qFw)) { HCD.style.left = '-1000px'; HCD.left = -1000; this.FuH.push( this.bTD.splice(nzz, 1)[0] ); nzz--; _aT--; } else { HCD.style.left = oDW + 'px'; HCD.style.top = oGF + 'px'; HCD.left = oDW; HCD.top = oGF; } } } if (!ua.ff3) { this.vYP = {}; for (var nzz = 0, _aT = this.bTD.length; nzz < _aT; nzz++) { this.vYP[this.bTD[nzz]] = this.kya[ this.bTD[nzz] ]; } } for (var oDW = 0; oDW <= Q_a; oDW += hGT) { for (var oGF = 0; oGF <= qFw; oGF += wKe) { if (!this.bLQ(oDW, oGF)) { if (!kzA && (oDW == Q_a)) continue; if (!LLt && (oGF == qFw)) continue; var jwX = this.FuH.pop(); if (!jwX) { this.fZb(); ; ;
; return; } this.bTD.push( jwX ); var HCD = this.kya[jwX]; var rWI = oDW - this.zoom( kzA ); var mGY = oGF - this.zoom( LLt ); var Ghz = parseInt( (this.unzoom(rWI) + this.scrollX) / this.tileSizeX, 10 ); var jJx = parseInt( (this.unzoom(mGY) + this.scrollY) / this.tileSizeY, 10 ); for (var ftc = 0; ftc < this.rWV; ftc++) { for (var knP = 0; knP < this.ylW; knP++) { var HYp = HCD.id + '_' + knP + '_' + ftc; var PPt = 0; if (Ghz + knP < this.data.length) { var CDU = this.data[Ghz + knP]; if (CDU && (jJx + ftc < CDU.length)) { PPt = CDU[jJx + ftc]; } } if ((HCD.data[knP][ftc] == PPt) && !this.EyE) continue; HCD.data[knP][ftc] = PPt; var RBT = ''; if (PPt) { RBT = this.tileImagePath + '/' + this.map[PPt]; if (ua.ie6 && RBT.match(/\.png/i)) { if (RBT.match(/\?/)) RBT += '&format=gif'; else RBT += '?format=gif'; } } var vlv = PPt ? LKR.ghs.getImageURL(RBT) : this.Brx(); if (this.EyE) { var JlI = el(HYp); ; this.EyE( JlI, Ghz + knP, jJx + ftc, this.map[PPt], this.lookupTile(Ghz + knP, jJx + ftc, 'objectData'), vlv ); } else { var usd = 1.0; if (PTp > 0) usd *= (knP / (this.ylW - 1)); else if (PTp < 0) usd *= (((this.ylW - 1) - knP) / (this.ylW - 1)); if (ffR > 0) usd *= (ftc / (this.rWV - 1));
else if (ffR < 0) usd *= (((this.rWV - 1) - ftc) / (this.rWV - 1)); if (aMv || this.RwB || !usd || (Math.abs(PTp) >= hGT) || (Math.abs(ffR) >= wKe)) { var WxE = el(HYp); ; WxE.src = vlv; delete LKR.ghs.jNp[HYp]; } else { LKR.ghs.dynaLoad( HYp, PPt ? (RBT) : this.Brx(), usd ); } } } } HCD.style.left = rWI + 'px'; HCD.style.top = mGY + 'px'; HCD.left = rWI; HCD.top = mGY; if (!aMv && !this.RwB) { oDW = Q_a + 1; oGF = qFw + 1; } } } } if (LKR.inGame && this.objectData && (PTp || ffR)) this.slo(); this.hOY = this.scrollX; this.OxG = this.scrollY; }; TilePlane.prototype.slo = function() { var Uhu = 0; var ZNh = 0; var uUn = 0; var Bdl = 0; var IrX = 0; if (this.scrollX > this.hOY) { var h_r = parseInt( (this.scrollX + this.port.portWidth - 1) / this.tileSizeX, 10 ); var EPc = parseInt( (this.hOY + this.port.portWidth - 1) / this.tileSizeX, 10 ); if (h_r != EPc) { var zyn = parseInt( this.scrollX / this.tileSizeX, 10 ); ZNh = EPc + 1;
if (ZNh < zyn) ZNh = zyn; Bdl = h_r; uUn = parseInt( this.scrollY / this.tileSizeY, 10 ); IrX = parseInt( (this.scrollY + this.port.portHeight - 1) / this.tileSizeY, 10 ); Uhu = 1; } } else if (this.scrollX < this.hOY) { var h_r = parseInt( this.scrollX / this.tileSizeX, 10 ); var EPc = parseInt( this.hOY / this.tileSizeX, 10 ); if (h_r != EPc) { var inf = parseInt( (this.scrollX + this.port.portWidth - 1) / this.tileSizeX, 10 ); ZNh = h_r; Bdl = EPc - 1; if (Bdl > inf) Bdl = inf; uUn = parseInt( this.scrollY / this.tileSizeY, 10 ); IrX = parseInt( (this.scrollY + this.port.portHeight - 1) / this.tileSizeY, 10 ); Uhu = 1; } } if (Uhu) { for (var tpK = ZNh; tpK <= Bdl; tpK++) { for (var ubH = uUn; ubH <= IrX; ubH++) { var HCD = this.lookupTile( tpK, ubH, 'objectData' ); if (HCD) HCD.onScreen(); } } Uhu = 0; } if (this.scrollY > this.OxG) { var znG = parseInt( (this.scrollY + this.port.portHeight - 1) / this.tileSizeY, 10 ); var PSY = parseInt( (this.OxG + this.port.portHeight - 1) / this.tileSizeY, 10 ); if (znG != PSY) { var OLN = parseInt( this.scrollY / this.tileSizeY, 10 ); uUn = PSY + 1; if (uUn < OLN) uUn = OLN; IrX = znG; ZNh = parseInt( this.scrollX / this.tileSizeX, 10 ); Bdl = parseInt( (this.scrollX + this.port.portWidth - 1) / this.tileSizeX, 10 ); Uhu = 1;
} } else if (this.scrollY < this.OxG) { var znG = parseInt( this.scrollY / this.tileSizeY, 10 ); var PSY = parseInt( this.OxG / this.tileSizeY, 10 ); if (znG != PSY) { var zBt = parseInt( (this.scrollY + this.port.portHeight - 1) / this.tileSizeY, 10 ); uUn = znG; IrX = PSY - 1; if (IrX > zBt) IrX = zBt; ZNh = parseInt( this.scrollX / this.tileSizeX, 10 ); Bdl = parseInt( (this.scrollX + this.port.portWidth - 1) / this.tileSizeX, 10 ); Uhu = 1; } } if (Uhu) { for (var tpK = ZNh; tpK <= Bdl; tpK++) { for (var ubH = uUn; ubH <= IrX; ubH++) { var HCD = this.lookupTile( tpK, ubH, 'objectData' ); if (HCD) HCD.onScreen(); } } } }; TilePlane.prototype.activateScreenObjects = function() { var zyn = parseInt( this.scrollX / this.tileSizeX, 10 ); var inf = parseInt( (this.scrollX + this.port.portWidth) / this.tileSizeX, 10 ); var OLN = parseInt( this.scrollY / this.tileSizeY, 10 ); var zBt = parseInt( (this.scrollY + this.port.portHeight) / this.tileSizeY, 10 ); for (var tpK = zyn - 1; tpK <= inf; tpK++) { for (var ubH = OLN; ubH <= zBt; ubH++) { var HCD = this.lookupTile( tpK, ubH, 'objectData' ); if (HCD) HCD.onScreen(); } } }; TilePlane.prototype.bLQ = function(oDW, oGF) { if (ua.ff3) return this.ZQl(oDW, oGF); for (var LwV in this.vYP) { var HCD = this.vYP[LwV];
if ((oDW >= HCD.left) && (oDW < HCD.left + this.hGT) && (oGF >= HCD.top) && (oGF < HCD.top + this.wKe)) { delete this.vYP[LwV]; return this.izN[LwV]; } } return null; }; TilePlane.prototype.ZQl = function(oDW, oGF) { for (var nzz = 0; nzz < this.bTD.length; nzz++) { var HCD = this.kya[ this.bTD[nzz] ]; if ((oDW >= HCD.left) && (oDW < HCD.left + this.hGT) && (oGF >= HCD.top) && (oGF < HCD.top + this.wKe)) { return this.izN[ this.bTD[nzz] ]; } } return null; }; TilePlane.prototype.lookupTileFromScreen = function(oDW, oGF, icF) { if (!icF) icF = 'data'; var tpK = parseInt( (this.unzoom(oDW) + this.scrollX) / this.tileSizeX, 10 ); var ubH = parseInt( (this.unzoom(oGF) + this.scrollY) / this.tileSizeY, 10 ); return this.lookupTile(tpK, ubH, icF); }; TilePlane.prototype.lookupTileFromGlobal = function(oDW, oGF, icF) { if (!icF) icF = 'data'; var tpK = parseInt( oDW / this.tileSizeX, 10 ); var ubH = parseInt( oGF / this.tileSizeY, 10 ); return this.lookupTile(tpK, ubH, icF); }; TilePlane.prototype.lookupTile = function(tpK, ubH, icF) { if (!icF) icF = 'data'; else if (icF === true) icF = 'objectData'; if (!this[icF]) return 0; if ((tpK < 0) || (ubH < 0) || (tpK >= this[icF].length)) return 0; var CDU = this[icF][tpK]; if (!CDU || (ubH >= CDU.length)) return 0; var kMU = CDU[ubH] || 0; if ((icF == 'data') && kMU) { kMU = this.map[kMU];
} return kMU; }; TilePlane.prototype.setTileFromScreen = function(oDW, oGF, nzz, icF) { if (!icF) icF = 'data'; var tpK = parseInt( (this.unzoom(oDW) + this.scrollX) / this.tileSizeX, 10 ); var ubH = parseInt( (this.unzoom(oGF) + this.scrollY) / this.tileSizeY, 10 ); return this.setTile(tpK, ubH, nzz, icF); }; TilePlane.prototype.setTileFromGlobal = function(oDW, oGF, nzz, icF) { if (!icF) icF = 'data'; var tpK = parseInt( oDW / this.tileSizeX, 10 ); var ubH = parseInt( oGF / this.tileSizeY, 10 ); return this.setTile(tpK, ubH, nzz, icF); }; TilePlane.prototype.getTileIdx = function(zdv) { var nzz = this.rev_map[zdv]; if (!nzz) { nzz = HGu(this.map); ; this.map[nzz] = zdv; this.rev_map[zdv] = nzz; } return nzz; }; TilePlane.prototype.setTile = function(tpK, ubH, nzz, icF) { if (!nzz) nzz = 0; if (!icF) icF = 'data'; else if (icF === true) icF = 'objectData'; if (!this[icF]) this[icF] = []; if ((tpK < 0) || (ubH < 0)) return 0; if (!this[icF][tpK]) this[icF][tpK] = []; var CDU = this[icF][tpK]; if ((icF == 'data') && nzz) { nzz = this.getTileIdx(nzz); } else if ((icF == 'objectData') && nzz && !LKR.HpS) { if (!nzz.type) nzz.type = nzz.__name; nzz.plane = this; nzz.tx = tpK;
nzz.ty = ubH; } this[icF][tpK][ubH] = nzz; if ((icF == 'data') || this.EyE) { var oDW = this.zoom( (tpK * this.tileSizeX) - this.hOY ); var oGF = this.zoom( (ubH * this.tileSizeY) - this.OxG ); var xou = this.ZQl(oDW, oGF); if (xou) { var knP = parseInt( this.unzoom(oDW - xou.offsetLeft) / this.tileSizeX, 10 ); var ftc = parseInt( this.unzoom(oGF - xou.offsetTop) / this.tileSizeY, 10 ); var LvK = xou.id; if (icF == 'data') this.kya[ LvK ].data[knP][ftc] = nzz; var HYp = LvK + '_' + knP + '_' + ftc; var WxE = el(HYp); if (this.EyE) { ; var PPt = (icF == 'data') ? this.map[nzz] : this.lookupTile(tpK, ubH); var JQE = (icF == 'objectData') ? nzz : this.lookupTile(tpK, ubH, 'objectData'); var vlv = PPt ? LKR.ghs.getImageURL(this.tileImagePath + '/' + PPt) : this.Brx(); this.EyE( WxE, tpK, ubH, PPt, JQE, vlv ); } else { var RBT = ''; if (nzz) { RBT = this.tileImagePath + '/' + this.map[nzz]; if (ua.ie6 && RBT.match(/\.png/i)) { if (RBT.match(/\?/)) RBT += '&format=gif'; else RBT += '?format=gif'; } } WxE.src = nzz ? LKR.ghs.getImageURL(RBT) : this.Brx(); } } } return 1; }; TilePlane.prototype.setMap = function(lZu) { this.map = lZu; this.rev_map = EAn( this.map ); for (var LwV in this.rev_map) {
this.rev_map[LwV] = parseInt( this.rev_map[LwV], 10 ); } }; TilePlane.prototype.setData = function(flY, icF) { if (!icF) icF = 'data'; this[icF] = flY; if (icF == 'data') { for (var nzz = 0, _aT = this.bTD.length; nzz < _aT; nzz++) { var xou = this.izN[ this.bTD[nzz] ]; xou.style.left = '-1000px'; this.FuH.push( this.bTD.splice(nzz, 1)[0] ); nzz--; _aT--; } } else if (icF == 'objectData') { for (var tpK = 0; tpK < this.objectData.length; tpK++) { var CDU = this.objectData[tpK]; if (CDU) for (var ubH = 0; ubH < CDU.length; ubH++) { if (CDU[ubH]) { if (typeof(CDU[ubH]) == 'string') { var Jpy = CDU[ubH]; CDU[ubH] = eval("new " + CDU[ubH] + "();"); CDU[ubH].type = Jpy; } else { var aNg = eval("new " + CDU[ubH].type + "();"); for (var LwV in CDU[ubH]) aNg[LwV] = CDU[ubH][LwV]; CDU[ubH] = aNg; } CDU[ubH].plane = this; CDU[ubH].tx = tpK; CDU[ubH].ty = ubH; } } } } }; TilePlane.prototype.setScroll = function(oqP, wqv) { this.scrollX = Math.floor( oqP * this.scrollSpeed ); this.scrollY = Math.floor( wqv * this.scrollSpeed );
}; TilePlane.prototype.logic = function(Ssl) { if (this.port.ltl && this.objectData) { this.activateScreenObjects(); } }; TilePlane.prototype.hide = function() { for (var LwV in this.izN) { this.izN[LwV].style.visibility = 'hidden'; } this.visible = false; }; TilePlane.prototype.show = function() { for (var LwV in this.izN) { this.izN[LwV].style.visibility = 'visible'; } this.visible = true; }; TilePlane.prototype.linkSpritePlane = function(dms) { this.spritePlane = dms; dms.tilePlane = this; }; TilePlane.prototype.Brx = function() { if (LKR.jiT) return qiQ.getImageURL( this.tileImagePath + '/_blank.gif' ); else return qiQ.getImageURL( LKR.PQ_ + 'api/blank_image.gif?width=' + this.tileSizeX + '&height=' + this.tileSizeY ); };; function SpritePlane(jwX) { if (!jwX) jwX = rTx(); this.id = jwX; this.sprites = {}; this.Smw = 16; this.Gul = 0.5; this.Zog = null; this.IsP = 0; this.Hr_ = 1; this.xdd = 0; this.SfG = 0; this.offsetX = 0; this.offsetY = 0; this.opacity = 1.0;
this.yFT = true; this.hOY = -1; this.OxG = -1; }; SpritePlane.prototype = new Qxh(); SpritePlane.prototype.setMinSpriteSize = function(VfO) { this.Smw = parseInt(VfO, 10); }; SpritePlane.prototype.setOffscreenDistance = function(kMU) { this.Gul = parseFloat(kMU); }; SpritePlane.prototype.setAetherDistance = function(kMU) { this.IsP = parseFloat(kMU); }; SpritePlane.prototype.setAetherCheckFreq = function(kMU) { this.Hr_ = parseInt(kMU, 10); }; SpritePlane.prototype.setLogic = function(vdr) { this.yFT = vdr; }; SpritePlane.prototype.setSoloSprite = function(vlH) { this._CJ = vlH; }; SpritePlane.prototype.clearSoloSprite = function() { this._CJ = null; }; SpritePlane.prototype.init = function() { ; this.globalID = this.port.id + '_' + this.id; for (var LwV in this.sprites) { this.sprites[LwV].init(); } }; SpritePlane.prototype.reset = function() { for (var LwV in this.sprites) { this.sprites[LwV].reset(); } }; SpritePlane.prototype.deleteAll = function() { this.reset(); this.sprites = {}; }; SpritePlane.prototype.deleteSprite = function() { for (var idx = 0, len = arguments.length; idx < len; idx++) { var id = arguments[idx]; if (this.sprites[id]) { this.sprites[id].destroy(); delete this.sprites[id]; } } }; SpritePlane.prototype.deleteSprites = SpritePlane.prototype.deleteSprite; SpritePlane.prototype.createSprite = function(DDE, _RI) { if (!_RI) _RI = {};
if (!_RI.type) _RI.type = DDE; if (_RI.id && this.sprites[_RI.id]) return acp("A sprite with that ID ("+_RI.id+") already exists in this plane ("+this.id+")."); var vlH = null; if (typeof(_RI.type) == 'string') { if (!LKR.Ltf[_RI.type]) return acp("No sprite definition found for: " + _RI.type); if (!LKR.Ltf[_RI.type].KWT) return acp("No sprite constructor found for: " + _RI.type); vlH = new LKR.Ltf[_RI.type].KWT; } else { vlH = new _RI.type; } for (var LwV in _RI) { vlH[LwV] = _RI[LwV]; } if (typeof(_RI.zIndex) == 'undefined') vlH.zIndex = this.zIndex; if (typeof(_RI.visible) == 'undefined') vlH.visible = this.visible; this.attach(vlH); return vlH; }; SpritePlane.prototype.attach = function(vlH) { vlH.plane = this; vlH.port = this.port; vlH.init(); vlH.setup(); if (this.sprites[ vlH.id ]) { ; } this.sprites[ vlH.id ] = vlH; }; SpritePlane.prototype.setOpacity = function(eZe) { if (eZe != this.opacity) { this.opacity = eZe; this.BJr = true; } }; SpritePlane.prototype.draw = function(aMv) { var CtC = LKR.drawClock; for (var LwV in this.sprites) { var vlH = this.sprites[LwV]; if (this.BJr) vlH.BJr = true;
vlH.draw(CtC); if (vlH.destroyed) delete this.sprites[LwV]; } if (aMv) { this.cK_(true); } this.BJr = false; }; SpritePlane.prototype.logic = function(Ssl) { if (!this.yFT) return; if (this._CJ) { this._CJ.logic(Ssl); if (this._CJ && this._CJ.destroyed) { delete this.sprites[this._CJ.id]; this._CJ = null; } } else { var LZ_ = []; for (var LwV in this.sprites) { var vlH = this.sprites[LwV]; if (vlH.lateLogic) LZ_.push(LwV); else { if (!vlH.destroyed) vlH.logic(Ssl); if (vlH.destroyed) delete this.sprites[LwV]; } } if (LZ_.length > 0) { for (var nzz = 0, _aT = LZ_.length; nzz < _aT; nzz++) { var LwV = LZ_[nzz]; var vlH = this.sprites[LwV]; if (!vlH.destroyed) vlH.logic(Ssl); if (vlH.destroyed) delete this.sprites[LwV]; } } } }; SpritePlane.prototype.setScroll = function(oqP, wqv) { this.scrollX = Math.floor( oqP * this.scrollSpeed ); this.scrollY = Math.floor( wqv * this.scrollSpeed );
if ((this.scrollX != this.hOY) || (this.scrollY != this.OxG)) { this.cK_(false); this.hOY = this.scrollX; this.OxG = this.scrollY; } }; SpritePlane.prototype.llt = function(acQ, hfU) { return '' + Math.floor(acQ / this.port.portWidth) + 'x' + Math.floor(hfU / this.port.portHeight); }; SpritePlane.prototype.setupAether = function(Zog) { this.Zog = {}; for (var nzz = 0, _aT = Zog.length; nzz < _aT; nzz++) { var HCD = Zog[nzz]; var asW = LKR.Ltf[ HCD.type ]; if (!asW) return acp("No sprite definition found for: " + HCD.type); if (!asW.Width || !asW.Height) return acp("Sprite definition has no size: " + HCD.type); HCD.width = parseInt( asW.Width, 10 ); HCD.height = parseInt( asW.Height, 10 ); if (asW.Persist == 1) { this.createSprite( HCD.type, merge_objects(HCD, { type: HCD.type, visible: this.visible }) ); } else { if (HCD.width > this.xdd) this.xdd = HCD.width; if (HCD.height > this.SfG) this.SfG = HCD.height; var LwV = this.llt(HCD.x, HCD.y); if (!this.Zog[LwV]) this.Zog[LwV] = []; this.Zog[LwV].push( HCD ); } } }; SpritePlane.prototype.addToAether = function(HCD) { if (HCD.bNe) return acp("Cannot add real sprite objects to aether. Must be a generic stub object."); if (typeof(HCD.type) == 'undefined') return acp("Aether stub has no type."); if ((typeof(HCD.x) == 'undefined') || (typeof(HCD.y) == 'undefined')) return acp("Aether stub has no position (x,y)"); var asW = LKR.Ltf[ HCD.type ]; if (asW && !HCD.width && !HCD.height) {
HCD.width = parseInt( asW.Width, 10 ); HCD.height = parseInt( asW.Height, 10 ); } var uSZ = this.llt(HCD.x, HCD.y); if (!this.Zog) this.Zog = {}; if (!this.Zog[uSZ]) this.Zog[uSZ] = []; this.Zog[uSZ].push( HCD ); if (HCD.width > this.xdd) this.xdd = HCD.width; if (HCD.height > this.SfG) this.SfG = HCD.height; }; SpritePlane.prototype.sendAllToAether = function() { for (var LwV in this.sprites) { this.sprites[LwV].sendToAether(); } }; SpritePlane.prototype.getAllAetherSprites = function() { var kya = []; for (var uSZ in this.Zog) { if (this.Zog[uSZ]) { var qsg = this.Zog[uSZ]; for (var nzz = 0, _aT = qsg.length; nzz < _aT; nzz++) { kya.push( qsg[nzz] ); } } } return kya; }; SpritePlane.prototype.cK_ = function(aMv) { if (this.Zog && (aMv || (LKR.logicClock % this.Hr_ == 0))) { var RGi = (this.port.portWidth * this.IsP); if (RGi < this.xdd) RGi = this.xdd; var kCw = (this.port.portHeight * this.IsP); if (kCw < this.SfG) kCw = this.SfG; var HpC = new Rect( this.scrollX - RGi, this.scrollY - kCw, this.scrollX + this.port.portWidth + (this.port.portWidth * this.IsP), this.scrollY + this.port.portHeight + (this.port.portHeight * this.IsP) ); var uIL = {};
var vIY = Math.ceil(HpC.height() / this.port.portHeight); var ZMw = Math.ceil(HpC.width() / this.port.portWidth); for (var yDy = 0; yDy <= vIY; yDy++) { for (var PlK = 0; PlK <= ZMw; PlK++) { var acQ = HpC.left + (PlK * this.port.portWidth); if (acQ > HpC.right) acQ = HpC.right; var hfU = HpC.top + (yDy * this.port.portHeight); if (hfU > HpC.bottom) hfU = HpC.bottom; uIL[ this.llt(acQ, hfU) ] = 1; } } HpC.left = this.scrollX - (this.port.portWidth * this.IsP); HpC.top = this.scrollY - (this.port.portHeight * this.IsP); for (var uSZ in uIL) { if (this.Zog[uSZ]) { var qsg = this.Zog[uSZ]; for (var nzz = 0, _aT = qsg.length; nzz < _aT; nzz++) { var lrZ = qsg[nzz]; var wyJ = new Rect( lrZ.x, lrZ.y, lrZ.x + lrZ.width, lrZ.y + lrZ.height ); if (HpC.rectIn(wyJ)) { var vlH = this.createSprite( lrZ.type, merge_objects(lrZ, { type: lrZ.type, visible: this.visible, Zog: lrZ }) ); qsg.splice(nzz, 1); nzz--; _aT--; } } } } } }; SpritePlane.prototype.hide = function() { for (var LwV in this.sprites) { this.sprites[LwV].hide(); }
this.visible = false; }; SpritePlane.prototype.show = function() { for (var LwV in this.sprites) { this.sprites[LwV].show(); } this.visible = true; }; SpritePlane.prototype.movePointX = function(oDW, oGF, GWM, cxT, dYg) { if (oDW._uL) { var qlK = oDW; oDW = qlK.x; oGF = qlK.y; GWM = arguments[1]; cxT = arguments[2]; dYg = arguments[3]; } if (typeof(cxT) == 'undefined') cxT = true; if (typeof(dYg) == 'undefined') dYg = this.tilePlane; var HI_ = oDW + GWM; if (parseInt(oDW, 10) == parseInt(HI_, 10)) return null; while (oDW != HI_) { if (GWM > 0) { oDW += this.Smw; if (oDW > HI_) oDW = HI_; } else { oDW -= this.Smw; if (oDW < HI_) oDW = HI_; } if (cxT) { for (var LwV in this.sprites) { var vlH = this.sprites[LwV]; if (vlH.collisions && !vlH.destroyed && vlH.ptIn(oDW, oGF)) { var Aiy = HI_; if (vlH.solid) { if (GWM > 0) { if (vlH.hitRect) Aiy = (vlH.x + vlH.hitRect.left) - 1; else Aiy = vlH.x - 1; }
else { if (vlH.hitRect) Aiy = (vlH.x + vlH.hitRect.right); else Aiy = vlH.x + vlH.width; } } var GPs = { type: 'collision', targetType: 'sprite', target: vlH, correctedX: Aiy, correctedY: oGF }; return GPs; } } } if (dYg && dYg.objectData) { var HCD = dYg.lookupTileFromGlobal(oDW, oGF, 'objectData'); if (HCD && HCD.collisions) { var Aiy = oDW; if (HCD.solid) { var gMJ = oDW % dYg.tileSizeX; if (GWM > 0) Aiy = (oDW - gMJ) - 1; else Aiy = oDW + (dYg.tileSizeX - gMJ); } var GPs = { type: 'collision', targetType: 'tile', target: HCD, correctedX: Aiy, correctedY: oGF }; return GPs; } } } return null; }; SpritePlane.prototype.movePointY = function(oDW, oGF, IMv, cxT, dYg) { if (oDW._uL) {
var qlK = oDW; oDW = qlK.x; oGF = qlK.y; IMv = arguments[1]; cxT = arguments[2]; dYg = arguments[3]; } if (typeof(cxT) == 'undefined') cxT = true; if (typeof(dYg) == 'undefined') dYg = this.tilePlane; var hdK = oGF + IMv; if (parseInt(oGF, 10) == parseInt(hdK, 10)) return null; while (oGF != hdK) { if (IMv > 0) { oGF += this.Smw; if (oGF > hdK) oGF = hdK; } else { oGF -= this.Smw; if (oGF < hdK) oGF = hdK; } if (cxT) { for (var LwV in this.sprites) { var vlH = this.sprites[LwV]; if (vlH.collisions && !vlH.destroyed && vlH.ptIn(oDW, oGF)) { var aQR = hdK; if ((IMv > 0) && (vlH.ground || vlH.solid)) { if (vlH.hitRect) aQR = (vlH.y + vlH.hitRect.top) - 1; else aQR = vlH.y - 1; } else if ((IMv < 0) && vlH.solid) { if (vlH.hitRect) aQR = vlH.y + vlH.hitRect.bottom; else aQR = vlH.y + vlH.height; } var GPs = { type: 'collision', targetType: 'sprite', target: vlH, correctedX: oDW, correctedY: aQR };
return GPs; } } } if (dYg && dYg.objectData) { var HCD = dYg.lookupTileFromGlobal(oDW, oGF, 'objectData'); if (HCD && HCD.collisions) { var aQR = oGF; if ((((IMv > 0) && (HCD.ground || HCD.solid)) || ((IMv < 0) && HCD.solid))) { var MVJ = oGF % dYg.tileSizeY; if (IMv > 0) aQR = (oGF - MVJ) - 1; else aQR = oGF + (dYg.tileSizeY - MVJ); } var GPs = { type: 'collision', targetType: 'tile', target: HCD, correctedX: oDW, correctedY: aQR }; return GPs; } } } return null; }; SpritePlane.prototype.moveLineX = function(oDW, FpN, DLr, GWM, cxT, dYg) { var NAu = []; for (var oGF = FpN; oGF < DLr; oGF += this.Smw) { var GPs = this.movePointX( oDW, oGF, GWM, cxT, dYg ); if (GPs) NAu.push(GPs); } var oGF = DLr - 1; var GPs = this.movePointX( oDW, oGF, GWM, cxT, dYg ); if (GPs) NAu.push(GPs); if (!NAu.length) return null; for (var nzz = 0, _aT = NAu.length; nzz < _aT; nzz++) { if (NAu[nzz].target.solid) return NAu[nzz]; } return NAu[0];
}; SpritePlane.prototype.moveLineY = function(oGF, mAb, aly, IMv, cxT, dYg) { var NAu = []; for (var oDW = mAb; oDW < aly; oDW += this.Smw) { var GPs = this.movePointY( oDW, oGF, IMv, cxT, dYg ); if (GPs) NAu.push(GPs); } var oDW = aly - 1; var GPs = this.movePointY( oDW, oGF, IMv, cxT, dYg ); if (GPs) NAu.push(GPs); if (!NAu.length) return null; for (var nzz = 0, _aT = NAu.length; nzz < _aT; nzz++) { if (NAu[nzz].target.solid) return NAu[nzz]; } return NAu[0]; }; SpritePlane.prototype.checkFreeTile = function(tpK, ubH) { var oqP = this.tilePlane.tileSizeX; var wqv = this.tilePlane.tileSizeY; var acQ = tpK * oqP; var hfU = ubH * wqv; if (this.movePointX(acQ, hfU, 1)) return false; if (this.movePointY(acQ + oqP - 1, hfU, 1)) return false; if (this.movePointX(acQ + oqP - 1, hfU + wqv - 1, -1)) return false; if (this.movePointY(acQ, hfU + wqv - 1, -1)) return false; return true; }; SpritePlane.prototype.findSprite = function(oqc, xek) { if (typeof(oqc) != 'object') oqc = { id: ''+oqc }; var Emu = jME(oqc); for (var LwV in this.sprites) { var vlH = this.sprites[LwV]; if (!vlH.destroyed) { var van = 0; for (var xwl in oqc) { if (vlH[xwl] == oqc[xwl]) van++; } if (van >= Emu) return vlH; } }
if (xek && this.Zog) { for (var uSZ in this.Zog) { if (this.Zog[uSZ]) { var qsg = this.Zog[uSZ]; for (var nzz = 0, _aT = qsg.length; nzz < _aT; nzz++) { var vlH = qsg[nzz]; var van = 0; for (var xwl in oqc) { if (vlH[xwl] == oqc[xwl]) van++; } if (van >= Emu) return vlH; } } } } return null; }; SpritePlane.prototype.findSprites = function(oqc, xek) { if (!oqc) oqc = {}; var VVF = []; if (typeof(oqc) == 'function') { for (var LwV in this.sprites) { var vlH = this.sprites[LwV]; if (!vlH.destroyed) { if (oqc.call(vlH, vlH)) VVF.push(vlH); } } if (xek && this.Zog) { for (var uSZ in this.Zog) { if (this.Zog[uSZ]) { var qsg = this.Zog[uSZ]; for (var nzz = 0, _aT = qsg.length; nzz < _aT; nzz++) { var vlH = qsg[nzz]; if (oqc.call(vlH, vlH)) VVF.push(vlH); } } } } } else {
var Emu = jME(oqc); for (var LwV in this.sprites) { var vlH = this.sprites[LwV]; if (!vlH.destroyed) { var van = 0; for (var xwl in oqc) { if (vlH[xwl] == oqc[xwl]) van++; } if (van >= Emu) VVF.push(vlH); } } if (xek && this.Zog) { for (var uSZ in this.Zog) { if (this.Zog[uSZ]) { var qsg = this.Zog[uSZ]; for (var nzz = 0, _aT = qsg.length; nzz < _aT; nzz++) { var vlH = qsg[nzz]; var van = 0; for (var xwl in oqc) { if (vlH[xwl] == oqc[xwl]) van++; } if (van >= Emu) VVF.push(vlH); } } } } } if (!VVF.each) VVF.each = function(gYe) { for (var nzz = 0, _aT = this.length; nzz < _aT; nzz++) { gYe.call(this[nzz], this[nzz]); } }; return VVF; }; SpritePlane.prototype.lookupSprite = function(jwX, xek) { var vlH = this.sprites[ jwX ]; if (!vlH && xek && this.Zog) { for (var uSZ in this.Zog) { if (this.Zog[uSZ]) { var qsg = this.Zog[uSZ];
for (var nzz = 0, _aT = qsg.length; nzz < _aT; nzz++) { var lAg = qsg[nzz]; if (lAg.id == jwX) return lAg; } } } } return vlH; }; SpritePlane.prototype.getSprite = SpritePlane.prototype.lookupSprite; SpritePlane.prototype.lookupSpriteFromGlobal = function() { var qlK = (arguments.length == 1) ? arguments[0].clone() : new Point(arguments[0], arguments[1]); var jUc = []; for (var LwV in this.sprites) { var vlH = this.sprites[LwV]; if (!vlH.destroyed && vlH.pointIn(qlK)) jUc.push( vlH ); } if (!jUc.length) return null; var USV = 0; var WGh = null; for (var nzz = 0, _aT = jUc.length; nzz < _aT; nzz++) { var vlH = jUc[nzz]; if (vlH.zIndex > USV) { USV = vlH.zIndex; WGh = vlH; } } return WGh; }; SpritePlane.prototype.lookupSpriteFromScreen = function() { var qlK = (arguments.length == 1) ? arguments[0].clone() : new Point(arguments[0], arguments[1]); qlK.x = this.unzoom(qlK.x) + this.scrollX; qlK.y = this.unzoom(qlK.y) + this.scrollY; return this.lookupSpriteFromGlobal(qlK); }; SpritePlane.prototype.findSpritesByPoint = function(qlK, xek) { var VVF = []; for (var LwV in this.sprites) { var vlH = this.sprites[LwV]; if (!vlH.destroyed && vlH.getRect().pointIn(qlK)) {
VVF.push(vlH); } } if (xek && this.Zog) { for (var uSZ in this.Zog) { if (this.Zog[uSZ]) { var qsg = this.Zog[uSZ]; for (var nzz = 0, _aT = qsg.length; nzz < _aT; nzz++) { var vlH = qsg[nzz]; var _hd = new Rect( vlH.x, vlH.y, vlH.x + vlH.width, vlH.y + vlH.height ); if (_hd.pointIn(qlK)) VVF.push(vlH); } } } } if (!VVF.each) VVF.each = function(gYe) { for (var nzz = 0, _aT = this.length; nzz < _aT; nzz++) { gYe.call(this[nzz], this[nzz]); } }; return VVF; }; SpritePlane.prototype.findSpritesByRect = function(DqG, xek) { var VVF = []; for (var LwV in this.sprites) { var vlH = this.sprites[LwV]; if (!vlH.destroyed && vlH.getRect().rectIn(DqG)) { VVF.push(vlH); } } if (xek && this.Zog) { for (var uSZ in this.Zog) { if (this.Zog[uSZ]) { var qsg = this.Zog[uSZ]; for (var nzz = 0, _aT = qsg.length; nzz < _aT; nzz++) { var vlH = qsg[nzz]; var _hd = new Rect( vlH.x, vlH.y, vlH.x + vlH.width, vlH.y + vlH.height ); if (_hd.rectIn(DqG)) VVF.push(vlH); } } 
} } if (!VVF.each) VVF.each = function(gYe) { for (var nzz = 0, _aT = this.length; nzz < _aT; nzz++) { gYe.call(this[nzz], this[nzz]); } }; return VVF; }; SpritePlane.prototype.linkTilePlane = function(dms) { this.tilePlane = dms; dms.spritePlane = this; }; SpritePlane.prototype.tween = function(_RI) { _RI.target = this; gVl.addTween(_RI); }; SpritePlane.prototype.onTweenUpdate = function(Zgt) { var UWS = Zgt.properties; if (UWS.opacity) this.BJr = true; }; SpritePlane.prototype.getScreenRect = function() { return new Rect( this.scrollX, this.scrollY, this.scrollX + this.port.portWidth, this.scrollY + this.port.portHeight ); };; function HUD(id) { if (!id) id = rTx(); this.id = id; this.x = 0; this.y = 0; this.scrollX = 0; this.scrollY = 0; this.zIndex = 99; }; HUD.prototype = new Qxh(); HUD.prototype.cols = 0;
HUD.prototype.rows = 0; HUD.prototype.skk = 8; HUD.prototype.hWV = 8; HUD.prototype.font = null; HUD.prototype.jWB = ''; HUD.prototype.qff = null; HUD.prototype.zex = [ [] ]; HUD.prototype.ZTV = 1.0; HUD.prototype.Zje = 1.0; HUD.prototype.setTableSize = function(fVS, Ity) { ; this.cols = fVS; this.rows = Ity; this.zex = []; for (var acQ = 0; acQ < fVS; acQ++) { this.zex[acQ] = []; for (var hfU = 0; hfU < Ity; hfU++) { this.zex[acQ][hfU] = { ch: ' ' }; } } }; HUD.prototype.setCharSize = function(Xgv, Zgh) { this.skk = Xgv; this.hWV = Zgh; }; HUD.prototype.setPosition = function(tUn, Adf) { this.x = tUn; this.y = Adf; }; HUD.prototype.setTracking = function(tpK, ubH) { this.ZTV = tpK; this.Zje = ubH; }; HUD.prototype.setFont = function(imw) { var uEq = LKR.FCk.lookupFont( imw ); if (!uEq) return acp("Font not found: " + imw); this.jWB = imw; this.qff = null; this.font = uEq; this.setCharSize( uEq.GlyphWidth, uEq.GlyphHeight );
}; HUD.prototype.setCustomFont = function(vlv, Xgv, Zgh) { var WxE = LKR.ghs.lookupImage( vlv ); if (!WxE) return acp("Image not found: " + vlv); if (!Xgv || !Zgh) return acp("Glyph width/height not specified."); this.jWB = ''; this.qff = { url: vlv, charWidth: Xgv, charHeight: Zgh }; this.font = { img: WxE.img, loaded: true }; this.setCharSize( Xgv, Zgh ); }; HUD.prototype.init = function() { if (!this.port) return acp( "No port attached to HUD plane" ); if (!this.cols || !this.rows) return acp( "HUD is not properly setup for init -- must set cols, rows" ); if (!this.font && this.jWB) this.setFont( this.jWB ); else if (!this.font && this.qff) this.setCustomFont( this.qff.url, this.qff.charWidth, this.qff.charHeight ); if (!this.font) return acp("No font selected for HUD"); if (!this.font.loaded) return acp("Font is not loaded, HUD cannot init."); this.fontPath = this.font.img.src; this.img = this.font.img; var RGH = this.skk * this.port.tdu; var sNF = this.hWV * this.port.tdu; var ZkR = RGH * this.cols; var Lnj = sNF * this.rows; var yQQ = this.x * this.port.tdu; var aMY = this.y * this.port.tdu; this.RGH = RGH; this.sNF = sNF; this.globalID = this.port.id + '_' + this.id; this.div = document.createElement('DIV'); this.style = this.div.style; this.div.setAttribute('id', this.globalID); this.div.id = this.globalID; this.style.position = 'absolute';
this.style.overflow = 'hidden'; this.style.width = ZkR + 'px'; this.style.height = Lnj + 'px'; this.style.left = yQQ + 'px'; this.style.top = aMY + 'px'; this.style.zIndex = this.zIndex; this.style.visibility = this.visible ? 'visible' : 'hidden'; if (ua.ie) this.div.setAttribute( 'onselectstart', "return false" ); this.port.div.appendChild(this.div); for (var ubH = 0; ubH < this.rows; ubH++) { for (var tpK = 0; tpK < this.cols; tpK++) { if (this.zex[tpK][ubH].ch != ' ') this.gKW( tpK, ubH ); } } }; HUD.prototype.gKW = function(tpK, ubH) { var hrx = this.zex[tpK][ubH]; var acQ = tpK * this.RGH * this.ZTV; var hfU = ubH * this.sNF * this.Zje; var FCI = document.createElement('div'); var znG = FCI.style; znG.position = 'absolute'; znG.width = '' + this.RGH + 'px'; znG.height = '' + this.sNF + 'px'; znG.top = '' + hfU + 'px'; if (ua.clipnest) { znG.width = this.img.width + 'px'; znG.height = this.img.height + 'px'; znG.clip = this.Wxu( hrx.ch ); znG.left = this.FDG( hrx.ch, acQ ); } else { znG.left = '' + acQ + 'px'; znG.width = '' + this.RGH + 'px'; znG.height = '' + this.sNF + 'px'; znG.backgroundPosition = this.Qje( hrx.ch ); } if (ua.ie6 && this.fontPath.match(/\.png(\?|$)/i)) { FCI.innerHTML = "<div " + " style=\"" + "width:" + this.img.width + "px; height:" + this.img.height + "px;"
+ "filter:progid:DXImageTransform.Microsoft.AlphaImageLoader" + "(src=\'" + this.img.src + "\', sizingMethod='scale');\"></div>"; } else if (ua.clipnest) { FCI.innerHTML = '<img src="'+this.img.src+'" width="'+this.img.width+'" height="'+this.img.height+'" border="0"/>' + "\n"; } else { znG.backgroundImage = 'url(' + this.img.src + ')'; znG.backgroundRepeat = 'no-repeat'; } this.div.appendChild(FCI); hrx.glyph = FCI; hrx.sty = znG; }; HUD.prototype.bDc = function(TyF) { return TyF.charCodeAt(0) - 33; }; HUD.prototype.Wxu = function(TyF) { var nzz = this.bDc(TyF); var acQ = nzz * this.RGH; return 'rect(0px '+Math.floor(acQ + this.RGH)+'px '+this.sNF+'px '+Math.floor(acQ)+'px)'; }; HUD.prototype.FDG = function(TyF, acQ) { var nzz = this.bDc(TyF); var cwU = nzz * this.RGH; return '' + Math.floor(acQ - cwU) + 'px'; }; HUD.prototype.Qje = function(TyF) { var nzz = this.bDc(TyF); var cwU = 0 - (nzz * this.RGH); return '' + cwU + 'px 0px'; }; HUD.prototype.reset = function() { for (var ubH = 0; ubH < this.rows; ubH++) { for (var tpK = 0; tpK < this.cols; tpK++) { this.zex[tpK][ubH].sty = null; this.zex[tpK][ubH].glyph = null; } } try { this.port.div.removeChild(this.div); } catch (e) {
var xou = el( this.globalID ); try { this.port.div.removeChild(xou); } catch (e) { ; }; } this.style = null; this.div = null; this.font = null; }; HUD.prototype.setChar = function(tpK, ubH, TyF) { if ((tpK < 0) || (ubH < 0) || (tpK >= this.cols) || (ubH >= this.rows)) return; var hrx = this.zex[tpK][ubH]; if (hrx.ch != TyF) { hrx.ch = TyF; if (hrx.sty) { if (ua.clipnest) { hrx.sty.clip = this.Wxu( TyF ); var acQ = tpK * this.RGH * this.ZTV; hrx.sty.left = this.FDG( TyF, acQ ); } else { hrx.sty.backgroundPosition = this.Qje( TyF ); } } else if (this.div) { this.gKW(tpK, ubH); } } }; HUD.prototype.setString = function(acQ, hfU, tjn) { if (typeof(tjn) != 'string') tjn = tjn.toString(); var _aT = tjn.length; var zdJ = acQ; for (var nzz = 0; nzz < _aT; nzz++) { var TyF = tjn.substring(nzz, nzz + 1); if ((TyF == 13) || (TyF == 10)) { acQ = zdJ; hfU++; } else { this.setChar( acQ++, hfU, TyF ); } }
}; HUD.prototype.setPadInt = function(acQ, hfU, kMU, hEg) { var tjn = '' + kMU; while (tjn.length < hEg) tjn = '0' + tjn; this.setString(acQ, hfU, tjn); }; HUD.prototype.logic = function(Ssl) { }; HUD.prototype.draw = function() { }; HUD.prototype.hide = function() { this.div.style.visibility = 'hidden'; this.visible = false; }; HUD.prototype.show = function() { this.div.style.visibility = 'visible'; this.visible = true; };; function VideoPlane(jwX) { if (!jwX) jwX = rTx(); this.id = jwX; }; VideoPlane.prototype = merge_objects( new Qxh(), new pqr() ); VideoPlane.prototype.scrollX = 0; VideoPlane.prototype.scrollY = 0; VideoPlane.prototype.scrollSpeed = 1.0; VideoPlane.prototype.zIndex = 1; VideoPlane.prototype.visible = true; VideoPlane.prototype.url = ''; VideoPlane.prototype.loop = false; VideoPlane.prototype.volume = 1.0; VideoPlane.prototype.playing = false; VideoPlane.prototype.setZIndex = function(nzz) { this.zIndex = nzz; }; VideoPlane.prototype.init = function() { if (!this.port) return acp( "No port attached to VideoPlane" ); if (this.url) { this.setMovie( this.url, this.loop ); if (this.playing && (LKR.inGame || LKR.RbJ)) {
; this.play(); } } }; VideoPlane.prototype.setMovie = function(vlv, zwh) { if (this.clip) this.reset(); this.url = vlv; this.loop = zwh; if (!this.port) return; this.clip = LKR.Lkw.Rgk( vlv ); this.clip.Jec( vlv ); this.clip.FHB( zwh ); this.clip._set_volume( this.volume ); var video = Effect.VideoManager._videos[ this.clip.id ]; video.handler = this; this.style = this.clip.style; this.style.left = '0px'; this.style.top = '0px'; this.style.zIndex = this.zIndex; this.style.visibility = this.visible ? "visible" : "hidden"; this.clip.wpf( this.port.portWidth * this.port.getZoomLevel(), this.port.portHeight * this.port.getZoomLevel() ); }; VideoPlane.prototype.reset = function() { this.clip.FNl(); var video = Effect.VideoManager._videos[ this.clip.id ]; video.handler = LKR.Lkw; delete this.clip; delete this.style; }; VideoPlane.prototype.logic = function(Ssl) { }; VideoPlane.prototype.draw = function() { }; VideoPlane.prototype.setScroll = function(oqP, wqv) { this.scrollX = oqP * this.scrollSpeed; this.scrollY = wqv * this.scrollSpeed; }; VideoPlane.prototype.hide = function() { this.visible = false;
if (this.style) this.style.visibility = this.visible ? "visible" : "hidden"; }; VideoPlane.prototype.show = function() { this.visible = true; if (this.style) this.style.visibility = this.visible ? "visible" : "hidden"; }; VideoPlane.prototype.play = function() { if (this.clip) { this.clip._play(); } this.playing = true; }; VideoPlane.prototype.stop = function() { if (this.clip) { this.clip._stop(); } this.playing = false; }; VideoPlane.prototype.rewind = function() { if (this.clip) { this.clip._rewind(); } }; VideoPlane.prototype.setPostion = function(USi) { if (this.clip) { this.clip.MpX(USi); } }; VideoPlane.prototype.getPosition = function() { if (this.clip) { return this.clip.xye(); } else return 0; }; VideoPlane.prototype.setLoop = function(zwh) { this.loop = zwh; if (this.clip) this.clip.FHB( this.loop ); }; VideoPlane.prototype.setVolume = function(Cgr) { this.volume = Cgr;
if (this.clip) this.clip._set_volume( this.volume ); }; VideoPlane.prototype.pause = function() { if (this.playing && this.clip) { this.clip._stop(); } }; VideoPlane.prototype.resume = function() { if (this.playing && this.clip) { this.clip._play(); } };; function Sprite() { }; Sprite.prototype.__name = 'Sprite'; Sprite.extend = function(Vro, uOQ) { Class.extend(this, Vro, uOQ); }; Sprite.subclass = Sprite.extend; Sprite.prototype.bNe = true; Sprite.prototype.x = 0; Sprite.prototype.y = 0; Sprite.prototype.xd = 0; Sprite.prototype.yd = 0; Sprite.prototype.width = 0; Sprite.prototype.height = 0; Sprite.prototype.frameX = 0; Sprite.prototype.frameY = 0; Sprite.prototype.zIndex = 1; Sprite.prototype.opacity = 1.0; Sprite.prototype.url = ''; Sprite.prototype.div = null; Sprite.prototype.visible = true; Sprite.prototype.offsetX = 0; Sprite.prototype.offsetY = 0; Sprite.prototype.clipX = 0; Sprite.prototype.clipY = 0; Sprite.prototype.tyK = 0; Sprite.prototype.BOO = 0; Sprite.prototype.UYb = -99999; Sprite.prototype.oMD = -99999; Sprite.prototype.solid = false;
Sprite.prototype.ground = false; Sprite.prototype.collisions = false; Sprite.prototype.dieOffscreen = false; Sprite.prototype.asW = null; Sprite.prototype.setDef = function(def) { this.asW = def; }; Sprite.prototype.getDef = function(def) { return this.asW; }; Sprite.prototype.setup = function() { }; Sprite.prototype.init = function() { if (!this.id) this.id = rTx(); this.require('port', 'url', 'width', 'height'); this.asW = LKR.Ltf[ this.__name ] || null; if (!this.offsetX) this.offsetX = 0; if (!this.offsetY) this.offsetY = 0; this.globalID = this.port.id + '_' + this.id; this.div = document.createElement('DIV'); this.style = this.div.style; this.div.setAttribute('id', this.globalID); this.div.id = this.globalID; this.style.position = 'absolute'; this.setImage(); this.style.left = '-4000px'; this.style.top = '-4000px'; this.style.zIndex = this.zIndex; this.style.visibility = this.visible ? "visible" : "hidden"; this.Lks(); if (ua.ie) this.div.setAttribute( 'onselectstart', "return false" ); this.port.div.appendChild(this.div); if (this.saveCaptureMouse) { this.captureMouse(); delete this.saveCaptureMouse; } }; Sprite.prototype.reset = function() { if (this.div.captureMouse) this.saveCaptureMouse = this.div.captureMouse; try { this.port.div.removeChild(this.div); } catch (e) { var xou = el( this.globalID ); try { this.port.div.removeChild(xou); } catch (e) { ; }; } this.style = null;
this.div = null; }; Sprite.prototype.setImage = function(vlv) { if (vlv) this.url = vlv; if (this.asW && this.asW._image_urls && this.asW._image_urls[this.url]) { this.url = this.asW._image_urls[this.url]; } var Ezd = LKR.ghs.lookupImage( this.url ); if (!Ezd) return acp(this.__name + ": Sprite image not found: " + this.url); if (!Ezd.loaded || !Ezd.img || !Ezd.img.width) return acp(this.__name + ": Sprite image " + this.url + " is not yet loaded."); var WxE = Ezd.img; this.img = WxE; if (!this.width) this.width = this.unzoom( WxE.width ); if (!this.height) this.height = this.unzoom( WxE.height ); if (this.url.match(/\bfilter\=rotate_pad\b/)) { var qpd = this.unzoom(WxE.height) - this.height; this.width = this.unzoom(WxE.height); this.height = this.unzoom(WxE.height); this.offsetX = 0 - Math.floor(qpd / 2); this.offsetY = 0 - Math.floor(qpd / 2); } if (ua.clipnest) { this.style.width = WxE.width + 'px'; this.style.height = WxE.height + 'px'; this.style.clip = this.KKt(); } else { this.style.width = '' + this.zoom(this.width) + 'px'; this.style.height = '' + this.zoom(this.height) + 'px'; this.style.backgroundPosition = this.EXv(); } this.style.left = this.QUM() + 'px'; this.style.top = this.SMB() + 'px'; if (ua.ie6 && this.url.match(/\.png(\?|$)/i)) { this.div.innerHTML = "<div " + " style=\"" + "width:" + WxE.width + "px; height:" + WxE.height + "px;" + "filter:progid:DXImageTransform.Microsoft.AlphaImageLoader" + "(src=\'" + WxE.src + "\', sizingMethod='scale');\"></div>"; } else if (ua.clipnest) {
this.div.innerHTML = '<img src="'+WxE.src+'" width="'+WxE.width+'" height="'+WxE.height+'" border="0"/>' + "\n"; } else { this.style.backgroundImage = 'url(' + WxE.src + ')'; } this.BJr = 1; this.UYb = -99999; this.oMD = -99999; this.tyK = -1; this.BOO = -1; return this; }; Sprite.prototype.setRotation = function(b_j) { if (!this.img) return this; if (b_j < 0) b_j = 360 - ((-1 * b_j) % 360); else if (b_j >= 360) b_j = b_j % 360; var Twc = Math.floor( this.unzoom(this.img.width) / this.width ); this.setFrameX( Math.floor( (b_j / 360) * Twc ) ); return this; }; Sprite.prototype.setScale = function(yAP) { if (!this.img) return this; if (yAP < 0) yAP = 0; if (yAP > 1.0) yAP = 1.0; var Twc = Math.floor( this.unzoom(this.img.width) / this.width ); this.setFrameX( Math.floor( yAP * Twc ) ); return this; }; Sprite.prototype.setBackground = function(vlv) { if (ua.ue6 && url.match(/\.png$/i)) { this.style.filter = "progid:DXImageTransform.Microsoft.AlphaImageLoader" + "(src=\'" + qiQ.getImageURL(vlv) + "\', sizingMethod='scale')"; } else { this.style.backgroundImage = 'url(' + qiQ.getImageURL(vlv) + ')'; } return this; }; Sprite.prototype.setZIndex = function(NZC) { NZC = parseInt(NZC, 10);
if (NZC < 1) NZC = 1; if (NZC > 999) NZC = 999; if (this.style) this.style.zIndex = NZC; this.zIndex = NZC; return this; }; Sprite.prototype.setOpacity = function(eZe) { if (eZe != this.opacity) { this.opacity = eZe; this.BJr = 1; } return this; }; Sprite.prototype.Lks = function() { var K_Y = this.opacity * this.plane.opacity; this.style.visibility = (K_Y && this.visible) ? "visible" : "hidden"; if ((K_Y > 0) && (K_Y < 1.0)) { this.style.opacity = K_Y; if (ua.moz) this.style.MozOpacity = K_Y; else if (ua.ie) this.style.filter = "alpha(opacity=" + parseInt(K_Y * 100, 10) + ")"; } else { this.style.opacity = 1.0; if (ua.moz) this.style.MozOpacity = 1.0; else if (ua.ie) this.style.filter = ""; } }; Sprite.prototype.EXv = function() { this.clipX = 0; this.clipY = 0; return '' + Math.floor( 0 - this.zoom(this.frameX * this.width) ) + 'px ' + Math.floor( 0 - this.zoom(this.frameY * this.height) ) + 'px'; }; Sprite.prototype.KKt = function() { this.clipX = Math.floor( this.frameX * this.width ); this.clipY = Math.floor( this.frameY * this.height ); return 'rect(' + this.zoom(this.clipY) + 'px ' + this.zoom(this.clipX + this.width) + 'px ' + this.zoom(this.clipY + this.height) + 'px ' + this.zoom(this.clipX) + 'px)'; }; Sprite.prototype.QUM = function() { return this.zoom( ((Math.floor(this.x + this.offsetX) - this.clipX) - this.plane.scrollX) + this.plane.offsetX );
}; Sprite.prototype.SMB = function() { return this.zoom( ((Math.floor(this.y + this.offsetY) - this.clipY) - this.plane.scrollY) + this.plane.offsetY ); }; Sprite.prototype.isOnScreen = function() { return this.plane.getScreenRect().rectIn( this.getRect() ); }; Sprite.prototype.draw = function() { if (this.BJr) { if (ua.clipnest) this.style.clip = this.KKt(); else this.style.backgroundPosition = this.EXv(); this.Lks(); this.BJr = 0; } var Ibq = this.QUM(); var uVZ = this.SMB(); if ((Ibq != this.UYb) || (uVZ != this.oMD)) { this.style.left = Ibq + 'px'; this.style.top = uVZ + 'px'; if (this.dieOffscreen) { var t_t = 0; if (this.x + this.width < this.plane.scrollX - (this.port.portWidth * this.plane.Gul)) t_t = 1; else if (this.y + this.height < this.plane.scrollY - (this.port.portHeight * this.plane.Gul)) t_t = 1; else if (this.x >= this.plane.scrollX + this.port.portWidth + (this.port.portWidth * this.plane.Gul)) t_t = 1; else if (this.y >= this.plane.scrollY + this.port.portHeight + (this.port.portHeight * this.plane.Gul)) t_t = 1; if (t_t) this.destroy(); } else if (this.Zog) { var t_t = 0; if (this.x + this.width < this.plane.scrollX - (this.port.portWidth * this.plane.IsP)) t_t = 1; else if (this.y + this.height < this.plane.scrollY - (this.port.portHeight * this.plane.IsP)) t_t = 1; else if (this.x >= this.plane.scrollX + this.port.portWidth + (this.port.portWidth * this.plane.IsP)) t_t = 1; else if (this.y >= this.plane.scrollY + this.port.portHeight + (this.port.portHeight * this.plane.IsP)) t_t = 1; if (t_t) { this.sendToAether(); } } else if (this.screenLoop) { if (this.x + this.width < this.plane.scrollX) this.x = this.plane.scrollX + this.port.portWidth; else if (this.y + this.height < this.plane.scrollY) this.y = this.plane.scrollY + this.port.portHeight;
else if (this.x >= this.plane.scrollX + this.port.portWidth) this.x = this.plane.scrollX - this.width; else if (this.y >= this.plane.scrollY + this.port.portHeight) this.y = this.plane.scrollY - this.height; } this.UYb = Ibq; this.oMD = uVZ; } }; Sprite.prototype.sendToAether = function() { if (this.Zog) { this.destroy(); for (var LwV in this.Zog) { this.Zog[LwV] = this[LwV]; } var uSZ = this.plane.llt(this.x, this.y); if (!this.plane.Zog[uSZ]) this.plane.Zog[uSZ] = []; JGI( this.plane.Zog[uSZ], this.Zog ); } return this; }; Sprite.prototype.isAether = function() { return !!this.Zog; }; Sprite.prototype.removeFromAether = function() { if (this.Zog) delete this.Zog; return this; }; Sprite.prototype.addAetherProp = function() { if (this.Zog) { for (var nzz = 0, _aT = arguments.length; nzz < _aT; nzz++) { var Vro = arguments[nzz]; switch (typeof(this[Vro])) { case 'string': case 'number': this.Zog[Vro] = this[Vro]; break; } } } return this; };
Sprite.prototype.getAetherObj = function() { return this.Zog; }; Sprite.prototype.logic = function() { }; Sprite.prototype.destroy = function() { if (this.div && !this.destroyed) { try { this.port.div.removeChild(this.div); } catch (e) { this.style.left = "-1000px"; this.style.visibility = "hidden"; var xou = el( this.globalID ); try { this.port.div.removeChild(xou); } catch (e) { ; }; }; this.destroyed = 1; } return this; }; Sprite.prototype.hide = function() { this.style.visibility = 'hidden'; this.visible = false; return this; }; Sprite.prototype.show = function(yVo) { if (typeof(yVo) == 'undefined') yVo = true; this.style.visibility = yVo ? 'visible' : 'hidden'; this.visible = yVo; return this; }; Sprite.prototype.setFrame = function(BSX, t_W) { if (!BSX) BSX = 0; if (!t_W) t_W = 0; this.frameX = parseInt(BSX, 10); this.frameY = parseInt(t_W, 10); if ((BSX != this.tyK) || (t_W != this.BOO)) this.BJr = 1; this.tyK = BSX; this.BOO = t_W; return this; }; Sprite.prototype.setFrameX = function(BSX) {
if (!BSX) BSX = 0; this.frameX = parseInt(BSX, 10); if (BSX != this.tyK) this.BJr = 1; this.tyK = BSX; return this; }; Sprite.prototype.setFrameY = function(t_W) { if (!t_W) t_W = 0; this.frameY = parseInt(t_W, 10); if (t_W != this.BOO) this.BJr = 1; this.BOO = t_W; return this; }; Sprite.prototype.zoom = function(kMU) { return Math.floor( kMU * this.port.tdu ); }; Sprite.prototype.unzoom = function(kMU) { return Math.floor( kMU / this.port.tdu ); }; Sprite.prototype.getRect = function() { var DqG = new Rect(); if (this.hitRect) DqG.set(this.hitRect); else DqG.set(0, 0, this.width, this.height); DqG.offset(this.x, this.y); return DqG; }; Sprite.prototype.setPosFromRect = function(nqI) { if (this.hitRect) { this.x = nqI.left - this.hitRect.left; this.y = nqI.top - this.hitRect.top; } else { this.x = nqI.left; this.y = nqI.top; } return this; }; Sprite.prototype.isMouseOver = function() {
var qlK = this.plane.getMouseCoords(); if (!qlK) return false; return this.pointIn(qlK); }; Sprite.prototype.ptIn = function(tUn, Adf) { if (this.hitRect) { return ( (tUn >= this.x + this.hitRect.left) && (Adf >= this.y + this.hitRect.top) && (tUn < this.x + this.hitRect.right) && (Adf < this.y + this.hitRect.bottom) ); } else { return( (tUn >= this.x) && (Adf >= this.y) && (tUn < this.x + this.width) && (Adf < this.y + this.height) ); } }; Sprite.prototype.pointIn = function(qlK) { if (this.hitRect) return ( (qlK.x >= this.x + this.hitRect.left) && (qlK.y >= this.y + this.hitRect.top) && (qlK.x < this.x + this.hitRect.right) && (qlK.y < this.y + this.hitRect.bottom) ); else return( (qlK.x >= this.x) && (qlK.y >= this.y) && (qlK.x < this.x + this.width) && (qlK.y < this.y + this.height) ); }; Sprite.prototype.rectIn = function(jHl) { return this.getRect().rectIn( jHl ); }; Sprite.prototype.centerPointX = function() { return (this.x + (this.width / 2)); }; Sprite.prototype.centerPointY = function() { return (this.y + (this.height / 2)); }; Sprite.prototype.centerPoint = function() {
return new Point( this.centerPointX(), this.centerPointY() ); }; Sprite.prototype.move = function(PTp, ffR, RDh, dYg) { if (typeof(PTp) == 'undefined') PTp = this.xd; if (typeof(ffR) == 'undefined') ffR = this.yd; if (!PTp && !ffR) return null; if (!this.collisions) { this.x += PTp; this.y += ffR; return null; } var czS = []; if (typeof(RDh) == 'undefined') RDh = this.plane; var kWt = this.getRect(); var AnG = kWt.clone().offset(PTp, ffR); if (RDh) { var qlK = new Point(0, 0); var Prn = qlK.getDistance( PTp, ffR ); if (!Prn) return null; var nzz = 0; var ZHD = {}; while (nzz < Prn) { nzz += RDh.Smw; if (nzz > Prn) nzz = Prn; var jHl = kWt.clone().morph(AnG, nzz / Prn); for (var LwV in RDh.sprites) { var vlH = RDh.sprites[LwV]; if ((vlH.id != this.id) && vlH.collisions && !vlH.destroyed && !ZHD[vlH.id] && vlH.rectIn(jHl)) { var nqI = AnG.clone(); if (vlH.solid) { var Zxs = vlH.getRect(); var nYT = nzz; var kQo = nzz - RDh.Smw; if (kQo < 0) kQo = 0; for (var Bhi = nYT - 1; Bhi >= kQo; Bhi--) { var uqY = kWt.clone().morph(AnG, Bhi / Prn); if (!Zxs.rectIn(uqY)) { nqI = uqY; Bhi = kQo - 1; } } }
else if (vlH.ground && (ffR > 0)) { nqI.moveTo( nqI.left, vlH.getRect().top - nqI.height() ); } var JfK = { nqI: nqI, type: 'collision', targetType: 'sprite', target: vlH }; czS.push( JfK ); ZHD[vlH.id] = 1; } } } } if (typeof(dYg) == 'undefined') { dYg = RDh ? RDh.tilePlane : this.plane.tilePlane; } if (dYg && dYg.objectData) { var dpb = ['x', 'y']; if (Math.abs(ffR) > Math.abs(PTp)) dpb = ['y', 'x']; for (var nzz = 0; nzz < 2; nzz++) { switch (dpb[nzz]) { case 'x': if (PTp < 0) { var JfK = this.plane.moveLineX( kWt.left, kWt.top, kWt.bottom, PTp, false, dYg ); if (JfK) { JfK.nqI = AnG.clone().moveTo( JfK.correctedX, AnG.top ); czS.push( JfK ); } } else if (PTp > 0) { var JfK = this.plane.moveLineX( kWt.right - 1, kWt.top, kWt.bottom, PTp, false, dYg ); if (JfK) { JfK.nqI = AnG.clone().moveTo( (JfK.correctedX - AnG.width()) + 1, AnG.top ); czS.push( JfK ); } } kWt.offset( PTp, 0 ); break;
case 'y': if (ffR < 0) { var JfK = this.plane.moveLineY( kWt.top, kWt.left, kWt.right, ffR, false, dYg ); if (JfK) { JfK.nqI = AnG.clone().moveTo( AnG.left, JfK.correctedY ); czS.push( JfK ); } } else if (ffR > 0) { var JfK = this.plane.moveLineY( kWt.bottom - 1, kWt.left, kWt.right, ffR, false, dYg ); if (JfK) { JfK.nqI = AnG.clone().moveTo( AnG.left, (JfK.correctedY - AnG.height()) + 1 ); czS.push( JfK ); } } kWt.offset( 0, ffR ); break; } } } if (czS.length == 1) { this.setPosFromRect( czS[0].nqI ); return czS[0]; } else if (czS.length) { var jsR = null; var psW = -1; for (var nzz = 0, _aT = czS.length; nzz < _aT; nzz++) { var JfK = czS[nzz]; var Prn = JfK.nqI.topLeftPoint().getDistance( AnG.topLeftPoint() ); if (Prn > psW) { jsR = JfK; psW = Prn; } } this.setPosFromRect( jsR.nqI ); jsR.events = czS; return jsR; } this.setPosFromRect( AnG );
return null; }; Sprite.prototype.require = function() { for (var nzz = 0, _aT = arguments.length; nzz < _aT; nzz++) { if (typeof(this[arguments[nzz]]) == 'undefined') { return acp(this.type + " " + this.id + ": Missing required parameter: " + arguments[nzz]); } } return true; }; Sprite.prototype.tween = function(_RI) { _RI.target = this; this.lastTween = gVl.addTween(_RI); return this; }; Sprite.prototype.onTweenUpdate = function(Zgt) { var UWS = Zgt.properties; if (UWS.zIndex) this.setZIndex( this.zIndex ); if (UWS.opacity || UWS.frameX || UWS.frameY) this.BJr = true; }; Sprite.prototype.setKeyHandler = function() { for (nzz = 0, _aT = arguments.length; nzz < _aT; nzz++) { LKR.setKeyHandler( arguments[nzz], this ); } return this; }; Sprite.prototype.get2DSoundSettings = function(Azt) { if (!Azt) Azt = Math.max(this.port.portWidth, this.port.portHeight); var NJZ = new Point( ((this.x + this.offsetX + (this.width / 2)) - this.plane.scrollX) + this.plane.offsetX, ((this.y + this.offsetY + (this.height / 2)) - this.plane.scrollY) + this.plane.offsetY ); var DZo = new Point( this.port.portWidth / 2, this.port.portHeight / 2 ); var tDU = 0; var Prn = DZo.getDistance( NJZ ); if (Prn < Azt) { tDU = 1.0 - (Prn / Azt);
} var rm_ = Math.abs( DZo.x - NJZ.x ); if (rm_ > Azt) rm_ = Azt; var qoN = (rm_ / Azt) * 2; if (qoN > 1.0) qoN = 1.0; if (NJZ.x < DZo.x) qoN *= -1; return { volume: tDU, balance: qoN }; }; Sprite.prototype.playSound2D = function(Kaq, Azt) { var gKp = gAudio.getTrack(Kaq); if (!gKp) return acp("Could not locate audio track: " + Kaq); var BJK = this.get2DSoundSettings(Azt); if (!BJK.volume) return false; ; gKp.setVolume( BJK.volume ); gKp.setBalance( BJK.balance ); gKp.playSound(); return true; }; Sprite.prototype.captureMouse = function() { this.div.captureMouse = this; var self = this; this.div.onmouseover = function() { if (LKR.inGame && self.onMouseOver) self.onMouseOver(); }; this.div.onmouseout = function() { if (LKR.inGame && self.onMouseOut) self.onMouseOut(); }; return this; };; function MultiSprite(jwX) { if (jwX) this.id = jwX; }; MultiSprite.prototype = new Sprite(); MultiSprite.prototype.init = function() { if (!this.id) this.id = rTx(); this.require('port');
this.asW = LKR.Ltf[ this.__name ] || null; if (!this.offsetX) this.offsetX = 0; if (!this.offsetY) this.offsetY = 0; this.globalID = this.port.id + '_' + this.id; }; MultiSprite.prototype.reset = function() { for (var nzz = 0; nzz < this.sprites.length; nzz++) { var vlH = this.sprites[nzz]; vlH.reset(); } this.sprites = []; }; MultiSprite.prototype.logic = function() { for (var nzz = 0, _aT = this.sprites.length; nzz < _aT; nzz++) { this.sprites[nzz].logic(); } }; MultiSprite.prototype.draw = function() { for (var nzz = 0, _aT = this.sprites.length; nzz < _aT; nzz++) { this.sprites[nzz].draw(); } if (this.dieOffscreen) { var t_t = 0; if (this.x + this.width < this.port.scrollX - (this.port.portWidth * this.plane.Gul)) t_t = 1; else if (this.y + this.height < this.port.scrollY - (this.port.portHeight * this.plane.Gul)) t_t = 1; else if (this.x >= this.port.scrollX + this.port.portWidth + (this.port.portWidth * this.plane.Gul)) t_t = 1; else if (this.y >= this.port.scrollY + this.port.portHeight + (this.port.portHeight * this.plane.Gul)) t_t = 1; if (t_t) this.destroy(); } }; MultiSprite.prototype.destroy = function() { if (!this.destroyed) { for (var nzz = 0, _aT = this.sprites.length; nzz < _aT; nzz++) { this.sprites[nzz].destroy(); } this.destroyed = 1; if (this.Zog) this.Zog.destroyed = 1; } }; MultiSprite.prototype.hide = function() {
for (var nzz = 0, _aT = this.sprites.length; nzz < _aT; nzz++) { this.sprites[nzz].hide(); } }; MultiSprite.prototype.show = function() { for (var nzz = 0, _aT = this.sprites.length; nzz < _aT; nzz++) { this.sprites[nzz].show(); } }; MultiSprite.prototype.ptIn = function(tUn, Adf) { for (var nzz = 0, _aT = this.sprites.length; nzz < _aT; nzz++) { if (this.sprites[nzz].ptIn(tUn, Adf)) return true; } return false; }; MultiSprite.prototype.rectIn = function(jHl) { for (var nzz = 0, _aT = this.sprites.length; nzz < _aT; nzz++) { if (this.sprites[nzz].rectIn(jHl)) return true; } return false; };; function TextSprite(jwX) { if (jwX) this.id = jwX; this.text = ''; }; TextSprite.prototype = merge_objects( new HUD(), new Sprite() ); TextSprite.prototype.type = 'TextSprite'; TextSprite.prototype.init = function() { if (!this.id) this.id = rTx(); this.asW = LKR.Ltf[ this.__name ] || null; this.require('font'); if (!this.qff) this.setFont( this.jWB ); this.require('cols', 'rows'); this.width = this.skk * this.cols * this.ZTV; this.height = this.hWV * this.rows * this.Zje; this.KKt(); if (this.text) this.setString(0, 0, this.text); HUD.prototype.init.call(this); this.style.left = this.QUM() + 'px'; this.style.top = this.SMB() + 'px';
}; TextSprite.prototype.reset = function() { HUD.prototype.reset.apply(this, []); };; function CustomSprite(jwX) { if (jwX) this.id = jwX; }; CustomSprite.prototype = new Sprite; CustomSprite.prototype.type = 'CustomSprite'; CustomSprite.prototype.init = function() { if (!this.id) this.id = rTx(); this.require('port', 'width', 'height'); this.asW = LKR.Ltf[ this.__name ] || null; if (!this.offsetX) this.offsetX = 0; if (!this.offsetY) this.offsetY = 0; this.globalID = this.port.id + '_' + this.id; this.div = document.createElement('DIV'); this.style = this.div.style; this.div.setAttribute('id', this.globalID); this.div.id = this.globalID; this.style.position = 'absolute'; this.style.width = this.zoom(this.width) + 'px'; this.style.height = this.zoom(this.height) + 'px'; if (ua.clipnest) this.style.clip = this.KKt(); this.style.left = this.QUM() + 'px'; this.style.top = this.SMB() + 'px'; this.style.zIndex = this.zIndex; this.style.visibility = this.visible ? "visible" : "hidden"; this.Lks(); if (this.className) this.div.className = this.className; if (this.html) this.div.innerHTML = this.html; this.port.div.appendChild(this.div); };; function StaticImageSprite(jwX) { if (jwX) this.id = jwX; }; StaticImageSprite.prototype = new Sprite; StaticImageSprite.prototype.type = 'StaticImageSprite'; StaticImageSprite.prototype.__name = 'StaticImageSprite'; StaticImageSprite.prototype.init = function() {
if (!this.id) this.id = rTx(); this.require('port', 'url'); this.image = qiQ.lookupImage( this.url ); if (!this.image) return acp("Failed to initialize StaticImageSprite: Image not loaded: " + this.url); this.width = this.image.img.width / qBq.tdu; this.height = this.image.img.height / qBq.tdu; if (!this.offsetX) this.offsetX = 0; if (!this.offsetY) this.offsetY = 0; this.globalID = this.port.id + '_' + this.id; this.div = document.createElement('DIV'); this.style = this.div.style; this.div.setAttribute('id', this.globalID); this.div.id = this.globalID; this.style.position = 'absolute'; this.style.zIndex = this.zIndex; this.style.visibility = this.visible ? "visible" : "hidden"; this.Lks(); this.setImage(); if (this.className) this.div.className = this.className; if (ua.ie) this.div.setAttribute( 'onselectstart', "return false" ); this.port.div.appendChild(this.div); };; function Tile() { }; Tile.prototype.__name = 'Tile'; Tile.extend = function(Vro, uOQ) { Class.extend(this, Vro, uOQ); }; Tile.subclass = Tile.extend; Tile.prototype.type = ''; Tile.prototype.solid = false; Tile.prototype.ground = false; Tile.prototype.collisions = false; Tile.prototype.climb = false; Tile.prototype.requires = null; Tile.prototype.onScreen = function() { }; Tile.prototype.tween = function(_RI) { _RI.target = this; gVl.addTween(_RI); };; function non() {
} non.prototype.Ojp = {}; non.prototype.Tgl = 1; non.prototype.addTween = non.prototype.add = function(_RI) { var Zgt = new bAY(_RI); this.Ojp[ this.Tgl ] = Zgt; this.Tgl++; return Zgt; }; non.prototype.logic = function() { for (var jwX in this.Ojp) { var Zgt = this.Ojp[jwX]; Zgt.logic(); if (Zgt.destroyed) delete this.Ojp[jwX]; } }; non.prototype.removeAll = function() { this.Ojp = {}; }; function bAY(_RI) { for (var LwV in _RI) this[LwV] = _RI[LwV]; if (!this.mode) this.mode = 'EaseIn'; if (!this.algorithm) this.algorithm = 'Linear'; this.require('target', 'duration', 'properties'); if (typeof(this.target) != 'object') return acp("Tween: Target is not an object"); if (typeof(this.duration) != 'number') return acp("Tween: Duration is not a number"); if (typeof(this.properties) != 'object') return acp("Tween: Properties is not an object"); for (var LwV in this.properties) { var mPK = this.properties[LwV]; if (typeof(mPK) == 'number') mPK = this.properties[LwV] = { end: mPK }; if (typeof(mPK) != 'object') return acp("Tween: Property " + LwV + " is not the correct format"); if (typeof(mPK.start) == 'undefined') mPK.start = this.target[LwV]; if (typeof(mPK.start) != 'number') return acp("Tween: Property " + LwV + ": start is not a number"); if (typeof(mPK.end) != 'number') return acp("Tween: Property " + LwV + ": end is not a number"); if (mPK.filter && (typeof(mPK.filter) != 'function')) return acp("Tween: Property " + LwV + ": filter is not a function"); } if (!this.delay) this.start = LKR.logicClock; } bAY.prototype.destroyed = false;
bAY.prototype.delay = 0; bAY.prototype.require = function() { for (var nzz = 0, _aT = arguments.length; nzz < _aT; nzz++) { if (typeof(this[arguments[nzz]]) == 'undefined') { return acp("Tween: Missing required parameter: " + arguments[nzz]); } } return true; }; bAY.prototype.logic = function() { if (this.target.destroyed) { this.destroyed = true; return; } if (this.delay > 0) { this.delay--; if (this.delay <= 0) this.start = LKR.logicClock; else return; } this.amount = (LKR.logicClock - this.start) / this.duration; if (this.amount >= 1.0) { this.amount = 1.0; this.destroyed = true; } for (var LwV in this.properties) { var mPK = this.properties[LwV]; this.target[LwV] = mPK.start + (ease(this.amount, this.mode, this.algorithm) * (mPK.end - mPK.start)); if (mPK.filter) this.target[LwV] = mPK.filter( this.target[LwV] ); } if (this.target.onTweenUpdate) this.target.onTweenUpdate(this); if (this.destroyed) { if (this.onTweenComplete) this.onTweenComplete(this); else if (this.target.onTweenComplete) this.target.onTweenComplete(this); } }; function tweenFrame(sMO, UYl, E_r, uhB, chT) { return sMO + (ease(E_r, uhB, chT) * (UYl - sMO)); }; function ZLf() { this.QBL = {};
this.Qag = 'engine/EffectSocket.swf'; this.Tgl = 1; } ZLf.prototype = { Jna: function(jwX, oaS) { this.QBL[jwX] = oaS; if (typeof(LKR) != 'undefined') LKR.JWd(jwX); }, onLoad: function(jwX) { this.QBL[jwX].onLoad(); }, onConnect: function(jwX) { this.QBL[jwX].onConnect(jwX); }, onError: function(jwX, lFq) { acp("Socket Error: " + jwX + ": " + lFq); }, onClose: function(jwX) { this.QBL[jwX].onClose(); delete this.QBL[jwX]; }, onData: function(jwX, jkX) { this.QBL[jwX].onData(jkX); } }; var aFj = new ZLf(); function Socket_onLoad(jwX) { aFj.onLoad(jwX); } function Socket_onConnect(jwX) { aFj.onConnect(jwX); } function Socket_onError(jwX, lFq) { aFj.onError(jwX, lFq); } function Socket_onClose(jwX) { aFj.onClose(jwX); } function Socket_onData(jwX, jkX) { aFj.onData(jwX, jkX); } function GYV(gYe) { if (gYe) this.setHandler( 'onLoad', gYe ); this.tVc = null; this.id = aFj.Tgl++; ; var xou = document.createElement('div'); xou.id = 'd_socket_' + this.id; xou.setAttribute('id', 'd_socket_'+this.id); var NAT = xou.style;
NAT.position = 'absolute'; NAT.left = '-200px'; NAT.top = '-200px'; NAT.width = '1px'; NAT.height = '1px'; var ynh = ''; if (ua.ie) { ynh += '<object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" codebase="'+EIG+'://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=9,0,0,0" width="1" height="1" id="swf_socket_'+this.id+'" align="middle"><param name="allowScriptAccess" value="always" /><param name="allowFullScreen" value="false" /><param name="movie" value="'+aFj.Qag+'" /><param name="loop" value="false" /><param name="menu" value="false" /><param name="quality" value="best" /><param name="bgcolor" value="#ffffff" /><param name="flashvars" value="id='+this.id+'"/></object>'; } else { ynh += '<embed id="swf_socket_'+this.id+'" src="'+aFj.Qag+'" loop="false" menu="false" quality="best" bgcolor="#ffffff" width="1" height="1" name="webcam_movie" align="middle" allowScriptAccess="always" allowFullScreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="id='+this.id+'" />'; } document.getElementsByTagName('body')[0].appendChild(xou); xou.innerHTML = ynh; aFj.Jna(this.id, this); } GYV.prototype = merge_objects( pqr.prototype, { BGR: false, iwb: false, IZj: function(CZQ, zhp) { ; ; this.tVc.connect(CZQ, zhp); }, BCh: function(zex) { ; ; ; this.tVc.write(zex); }, hxQ: function() { ; ; ; return this.tVc.read(); }, xXh: function() { ; ; ;
this.tVc.close(); }, VZr: function() { this.iwb = false; this.tVc = null; setTimeout( function() { try { document.body.removeChild( document.getElementById('d_socket_'+this.id) ); } catch(e) {;} }, 1 ); }, onLoad: function() { ; this.BGR = true; this.tVc = document.getElementById('swf_socket_' + this.id); if (!this.tVc) return acp("ASSERT FAILURE: Cannot locate socket movie: swf_socket_" + this.id); this.fireHandler('onLoad'); }, onConnect: function() { ; this.iwb = true; this.fireHandler('onConnect'); }, onClose: function() { ; this.iwb = false; this.fireHandler('onClose'); }, onData: function(jkX) { ; this.fireHandler('onData', jkX); } } ); ; function xst() { this.enabled = false; this.yVo = this.Fbk; this.ITC = '127.0.0.1'; this.ThK = '6201'; this.RDh = null; this.VBn = {}; this.vPz = {};
this.ksu = []; this.rKP = null; this.bRD = 0; this.hHM = 0; this.cDa = 8; } xst.prototype = new pqr(); xst.prototype.Fbk = 0; xst.prototype.WYW = 1; xst.prototype.Set = 2; xst.prototype.nTE = 3; xst.prototype.hjR = 4; xst.prototype.tFi = function(gYe) { this.setHandler('onLoad', gYe); if (this.yVo == this.Fbk) { this.yVo = this.WYW; this.LlH = setTimeout( function() { gMulti.mNM(); }, 1000 * 10 ); this.oaS = new GYV( [this, 'Vbi'] ); } }; xst.prototype.mNM = function() { this.enabled = false; this.yVo = this.Fbk; return acp("Multiplayer support failed to load. Please upgrade to the latest Adobe Flash Player and try again."); }; xst.prototype.Vbi = function() { if (this.yVo == this.WYW) { ; this.yVo = this.Set; if (this.LlH) clearTimeout( this.LlH ); this.LlH = null; this.fireHandler('onLoad'); } }; xst.prototype.IZj = function() { if (this.yVo == this.Set) { this.yVo = this.nTE; this.whS = setTimeout( function() { gMulti.aBh(); }, 1000 * 10 ); this.oaS.setHandler( 'onConnect', [this, 'IJ_'] ); this.oaS.IZj( this.ITC, this.ThK );
} }; xst.prototype.aBh = function() { this.yVo = this.Set; aFj.onError( this.socket.id, "Connect Timeout -- Will Retry" ); }; xst.prototype.IJ_ = function() { ; this.yVo = this.hjR; if (this.whS) clearTimeout( this.whS ); this.whS = null; socket.setHandler( 'onData', [this, 'HZm'] ); }; xst.prototype.logic = function() { if (!this.enabled) return; if (this.yVo != this.hjR) return this.IZj(); if (this.rKP) { var Huc = this.rKP.cmd; if (Huc && Huc.length) { for (var nzz = 0, _aT = Huc.length; nzz < _aT; nzz++) { var INc = Huc[nzz]; if (INc.func && this[INc.func]) this[INc.func].apply(this, INc.args); } } var Jir = this.rKP.msg; if (Jir && Jir.length) { for (var nzz = 0, _aT = Jir.length; nzz < _aT; nzz++) { var lFq = Jir[nzz]; } } var gqD = this.rKP.spr; if (gqD) { for (var jwX in gqD) { var fxw = gqD[jwX]; } } this.rKP = null; } var uiv = 1 / this.cDa; var kHp = qNl();
var TQp = (this.bRD + uiv) - (this.bRD - this.hHM); if (kHp >= TQp) { this.oaS.BCh( serialize({ msg: this.ksu, spr: this.vPz }, '=>') ); this.ksu = []; this.hHM = kHp; } }; xst.prototype.HZm = function(jkX) { var zex = this.socket.hxQ(); if (zex) { try { this.rKP = eval(zex); } catch (e) { ; } } else { ; } this.bRD = qNl(); }; xst.prototype.QQc = function(vlH) { this.VBn[ vlH.id ] = vlH; }; xst.prototype.broadcastEvent = function(HCD) { }; xst.prototype.sendPrivateEvent = function(qiw, HCD) { }; xst.prototype.saveUserData = function(HCD) { }; var gMulti = new xst(); ; function QOS() { }; QOS.prototype.pYw = function() { this.IQe = []; this.setColor( LKR.asW.ToolbarColor ); var TSA = el('effect_port').offsetWidth; var Unq = el('effect_toolbar');
Unq.style.width = '' + TSA + 'px'; if (ua.ie6) { Unq.innerHTML += "<div id=\"effect_toolbar_ie6span\"" + " style=\"" + "width:" + Unq.offsetWidth + "px; height:" + Unq.offsetHeight + "px;" + "filter:progid:DXImageTransform.Microsoft.AlphaImageLoader" + "(src=\'" + LKR.PQ_ + 'images/engine/toolbar/background.png' + "\', sizingMethod='scale'); position:absolute; left:0px; top:0px;\"></div>"; } else { Unq.style.backgroundImage = 'url('+LKR.PQ_ + 'images/engine/toolbar/background.png'+')'; } this.LyD('et_left_border', LKR.PQ_ + 'images/engine/toolbar/border-left.png'); this.LyD('et_right_border', LKR.PQ_ + 'images/engine/toolbar/border-right.png'); this.LyD('et_lb_divider', LKR.PQ_ + 'images/engine/toolbar/divider.png'); this.LyD('et_logo', LKR.PQ_ + 'images/engine/toolbar/logo.png'); this.LyD('et_msgs', LKR.PQ_ + 'images/engine/toolbar/msgs.png', 168, 48); this.Mhq = 'out'; this.mjy = 160; var kqK = this; var nSQ = el('et_logo'); nSQ.onmouseover = function() { var SVA = (kqK.theme == 'light') ? 48 : 0; var hfU = SVA + 24; kqK.Mhq = 'over'; this.style.clip = 'rect('+hfU+'px '+kqK.mjy+'px '+Math.floor(hfU + 24)+'px 0px)'; this.style.top = '' + Math.floor(0 - hfU) + 'px'; }; nSQ.onmouseout = function() { var SVA = (kqK.theme == 'light') ? 48 : 0; var hfU = SVA; kqK.Mhq = 'out'; this.style.clip = 'rect('+hfU+'px '+kqK.mjy+'px '+Math.floor(hfU + 24)+'px 0px)'; this.style.top = '' + Math.floor(0 - hfU) + 'px'; }; nSQ.onclick = function() { window.open('http://www.effectgames.com/'); if (LKR.inGame) LKR.pause(); }; el('et_loading_bar').style.left = '' + Math.floor(TSA - 120) + 'px'; this.LyD('et_lb_inner_under', LKR.PQ_ + 'images/engine/toolbar/loading-under.png'); this.LyD('et_lb_inner_over', LKR.PQ_ + 'images/engine/toolbar/loading-over.png');
el('et_lb_inner_under').style.backgroundColor = this.Num; el('et_lb_inner_over').style.backgroundColor = (this.theme == 'dark') ? '#777777' : '#444444'; this.Tlf = 0; if (!LKR.fireHandler('onBeforeToolbarIconInit', this)) return; this.addIcon( new Toolbar.Icon.Divider() ); this.addIcon( new Toolbar.Icon.PlayPause() ); if ((LKR.ICK.mode != 'dev') && (LKR.ICK.revpwd != 1) && (LKR.asW.DisableSharing != 1)) { this.addIcon( new Toolbar.Icon.Share() ); } if (LKR.EYO) { this.addIcon( new Toolbar.Icon.Home() ); } if (jME(LKR.keys)) { this.addIcon( new Toolbar.Icon.Keyboard() ); } var A_v = false; if (LKR.asW.Sounds && LKR.asW.Sounds.Sound) { for (var nzz = 0, _aT = LKR.asW.Sounds.Sound.length; nzz < _aT; nzz++) { var Hgz = LKR.asW.Sounds.Sound[nzz]; if (Hgz.Category == 'music') { A_v = true; nzz = _aT; } } } if (gAudio.enabled && A_v) { this.addIcon( new Toolbar.Icon.Music() ); } if (gAudio.enabled && LKR.asW.Sounds && LKR.asW.Sounds.Sound && LKR.asW.Sounds.Sound.length) { this.addIcon( new Toolbar.Icon.Sound() ); } if ((LKR.asW.Zoom == 'Yes') && !LKR.EYO && this.xWM()) { this.addIcon( new Toolbar.Icon.Zoom() ); } if (Debug.enabled) { this.addIcon( new Toolbar.Icon.Debug() ); } LKR.fireHandler('onAfterToolbarIconInit', this); }; QOS.prototype.xWM = function() { var XvN = Effect.Port.getZoomLevel(); var EmD = Effect.Port.portWidth; var dRa = Effect.Port.portHeight;
var tMN = screen.availWidth; var oEW = screen.availHeight; var XDA = Math.floor( tMN / EmD ); var udJ = Math.floor( oEW / dRa ); var EgW = Math.min( XDA, udJ ); if (!EgW) EgW = 1; var uVq = XvN + 1; if (uVq > Math.min(EgW, 4)) uVq = 1; if (uVq != XvN) return true; else return false; }; QOS.prototype.ciq = function() { this.RRM = true; var GrR = (this.uhB == 'loading') ? el('et_loading_bar').offsetWidth : this.Tlf; var TSA = el('effect_toolbar').offsetWidth; var pvQ = (this.theme == 'light') ? 84 : 0; var ePT = Math.floor(((TSA - GrR) - 4) - 84); var iOv = el('et_msgs'); iOv.style.left = '' + Math.floor((ePT - pvQ) + this.cSk) + 'px'; iOv.style.top = '' + Math.floor(0 - (this.rSJ * 24)) + 'px'; iOv.style.clip = 'rect('+Math.floor(this.rSJ * 24)+'px '+Math.floor((pvQ+84) - this.cSk)+'px '+Math.floor((this.rSJ+1)*24)+'px '+Math.floor(pvQ)+'px)'; this.cSk += ((this.SEE - this.cSk) / 6); if (Math.abs(this.SEE - this.cSk) < 1.0) { if (this.SEE == 84) { iOv.hide(); this.OYv = false; } this.RRM = false; } else { setTimeout( 'FIy.ciq();', 33 ); } }; QOS.prototype.dkJ = function(nzz, aMv) { this.rSJ = nzz; var GrR = (this.uhB == 'loading') ? el('et_loading_bar').offsetWidth : this.Tlf; var TSA = el('effect_toolbar').offsetWidth; var pvQ = (this.theme == 'light') ? 84 : 0; var ePT = Math.floor(((TSA - GrR) - 4) - 84); var nSQ = el('et_logo');
var kdt = nSQ.offsetLeft + nSQ.offsetWidth; if (ePT <= kdt) return false; if (typeof(this.cSk) == 'undefined') this.cSk = 84; this.SEE = 0; this.OYv = true; var iOv = el('et_msgs'); if (aMv) { iOv.style.left = '' + Math.floor(ePT - pvQ) + 'px'; iOv.style.top = '' + Math.floor(0 - (this.rSJ * 24)) + 'px'; iOv.style.clip = 'rect('+Math.floor(this.rSJ * 24)+'px '+Math.floor(pvQ+84)+'px '+Math.floor((this.rSJ+1)*24)+'px '+Math.floor(pvQ)+'px)'; } else { this.ciq(); } iOv.show(); return true; }; QOS.prototype.fcr = function(aMv) { if (this.OYv) { if (aMv) { el('et_msgs').hide(); this.OYv = false; } else { if (typeof(this.cSk) == 'undefined') this.cSk = 0; this.SEE = 84; this.ciq(); } } }; QOS.prototype.setColor = function(Num) { this.Num = Num; this.vHq = eDQ(this.Num); var KRU = (this.vHq.r + this.vHq.g + this.vHq.b) / 3; this.theme = (KRU > 128) ? 'light' : 'dark'; el('effect_toolbar').style.backgroundColor = this.Num; var SVA = (this.theme == 'light') ? 48 : 0; var nSQ = el('et_logo'); nSQ.style.clip = 'rect('+SVA+'px 160px '+Math.floor(SVA + 24)+'px 0px)'; nSQ.style.top = '' + Math.floor(0 - SVA) + 'px';
}; QOS.prototype.bCP = function(TSA) { if (!TSA) TSA = el('effect_port').offsetWidth; el('effect_toolbar').style.width = '' + TSA + 'px'; el('et_loading_bar').style.left = '' + Math.floor(TSA - 120) + 'px'; el('et_icon_shelf').style.left = '' + Math.floor((TSA - this.Tlf) - 4) + 'px'; var nSQ = el('et_logo'); if (TSA - this.Tlf >= 160) { this.mjy = 160; nSQ.style.width = '160px'; } else { this.mjy = 32; nSQ.style.width = '32px'; } if (this.Mhq == 'over') nSQ.onmouseover(); else nSQ.onmouseout(); if (this.OYv && !this.RRM) { this.dkJ(this.rSJ, true); } if (ua.ie6) { var oZm = el('effect_toolbar_ie6span'); if (oZm) { oZm.style.width = '' + TSA + 'px'; } } }; QOS.prototype.addIcon = function(WCS) { WCS.init( this, this.Tlf ); el('et_icon_shelf').appendChild(WCS.div); this.IQe.push(WCS); this.Tlf += WCS.width; var GrR = this.Tlf; var TSA = el('effect_toolbar').offsetWidth; el('et_icon_shelf').style.width = '' + GrR + 'px'; el('et_icon_shelf').style.left = '' + Math.floor((TSA - GrR) - 4) + 'px'; }; QOS.prototype.NWN = function() { for (var nzz = 0, _aT = this.IQe.length; nzz < _aT; nzz++) { this.IQe[nzz].update();
} }; QOS.prototype.logic = function() { for (var nzz = 0, _aT = this.IQe.length; nzz < _aT; nzz++) { this.IQe[nzz].logic(); } }; QOS.prototype.draw = function() { for (var nzz = 0, _aT = this.IQe.length; nzz < _aT; nzz++) { this.IQe[nzz].draw(); } }; QOS.prototype.pause = function() { for (var nzz = 0, _aT = this.IQe.length; nzz < _aT; nzz++) { this.IQe[nzz].pause(); } }; QOS.prototype.resume = function() { for (var nzz = 0, _aT = this.IQe.length; nzz < _aT; nzz++) { this.IQe[nzz].resume(); } }; QOS.prototype.audioloaderror = function() { for (var nzz = 0, _aT = this.IQe.length; nzz < _aT; nzz++) { if (this.IQe[nzz].audioloaderror) { this.IQe[nzz].audioloaderror(); } } }; QOS.prototype.LyD = function(jwX, vlv, EmD, dRa) { var xou = (typeof(jwX) == 'string') ? el(jwX) : jwX; if (!EmD) EmD = xou.offsetWidth; if (!dRa) dRa = xou.offsetHeight; if (ua.ie6 && vlv.match(/\.png(\?|$)/i)) { var ynh = "<div " + " style=\"" + "width:" + EmD + "px; height:" + dRa + "px;" + "filter:progid:DXImageTransform.Microsoft.AlphaImageLoader" + "(src=\'" + vlv + "\', sizingMethod='scale');\"></div>"; xou.innerHTML = ynh; }
else { xou.style.backgroundImage = 'url('+vlv+')'; } }; QOS.prototype.Ril = function(uhB) { ; this.uhB = uhB; switch (uhB) { case 'loading': el('et_loading_bar').show(); el('et_icon_shelf').hide(); this.dkJ(0, true); break; case 'icons': el('et_loading_bar').hide(); el('et_icon_shelf').show(); if (LKR.inGame || LKR.RbJ) this.fcr(true); else this.dkJ(1, true); break; } }; QOS.prototype.LAc = function(VWC) { var mAb = '-' + Math.floor( (1.0 - VWC) * 100 ); el('et_lb_inner_over').style.left = '' + mAb + 'px'; }; QOS.prototype.TUg = function(Vro, EmD, dRa, K_Y) { if (!K_Y) K_Y = "1.0"; var EaM = LKR.PQ_ + 'images/engine/dialog'; var vlv = EaM + '/' + Vro + ((this.theme == 'light') ? '-light' : '-dark') + '.png'; if (ua.ie6 && vlv.match(/\.png(\?|$)/i)) { return "<div " + " style=\"" + "width:" + EmD + "px; height:" + dRa + "px;" + "filter:progid:DXImageTransform.Microsoft.AlphaImageLoader" + "(src=\'" + vlv + "\', sizingMethod='scale');\"></div>"; } else { return '<img src="'+vlv+'" width="'+EmD+'" height="'+dRa+'" style="opacity:'+K_Y+';"/>'; } }; QOS.prototype.SQW = function(WCS, RIp, GPM) {
var BiM = (this.theme == 'dark') ? 'white' : 'black'; if (!RIp) RIp = ''; if (!GPM) GPM = ''; GPM = 'FIy.lvf.' + GPM; var ynh = ''; ynh += '<div style="cursor:pointer; width:80px; padding:5px; font-family:arial,sans-serif; font-size:12px; text-align:center; color:'+BiM+'; border:2px solid '+BiM+'; -moz-border-radius:5px; -webkit-border-radius:5px; opacity:0.6;" onClick="'+GPM+'" onMouseOver="this.style.opacity=1.0;" onMouseOut="this.style.opacity=0.6;">'+RIp+'</div>'; return ynh; }; QOS.prototype.peI = function() { var vFb = qBq.portWidth * qBq.tdu; var mHW = qBq.portHeight * qBq.tdu; return ((vFb >= 256 + 48) && (mHW >= 240 + 48)); }; QOS.prototype.Yea = function(Vro) { var EaM = LKR.PQ_ + 'images/engine/dialog'; var gPn = (this.theme == 'light') ? '-light' : '-dark'; var vlv = EaM+'/'+Vro+gPn+'.png'; if (ua.ie6) return 'filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(src=\''+vlv+'\', sizingMethod=\'scale\')'; else return 'background-image:url('+vlv+')'; }; QOS.prototype.FIR = function(AGA) { var uVq = LKR.changingZoom ? qBq.KCz : qBq.tdu; var vFb = qBq.portWidth * uVq; var mHW = qBq.portHeight * uVq; if (!this.Bcg) { this.Bcg = el('effect_overlay'); RRP( this.Bcg, 0 ); this.Bcg.K_Y = 0; } this.Bcg._target_opacity = AGA || 0.75; this.Bcg.style.display = 'block'; this.Bcg.style.width = '' + vFb + 'px'; this.Bcg.style.height = '' + mHW + 'px'; this.Bcg.style.backgroundColor = (this.theme == 'light') ? 'white' : 'black'; if (ua.ie) { RRP( this.Bcg, this.Bcg._target_opacity ); } else { if (!this.juH) { this.juH = setTimeout( 'FIy.DRv()', 33 );
} } }; QOS.prototype.rMH = function(XcS, Eca, emb, uBN, AGA) { if (typeof(this.zHP) == 'undefined') { this.zHP = LKR.inGame; if (LKR.inGame) LKR.pause(); } var vFb = qBq.portWidth * qBq.tdu; var mHW = qBq.portHeight * qBq.tdu; this.vgk = el('effect_dialog'); this.FIR( AGA ); var ZrY = LKR.PQ_ + 'images/engine/dialog/titles.png'; var jdS = ''; var Sbh = (this.theme == 'light') ? -256 : 0; var SMA = 0 - (Eca * 32); if (ua.ie6) { jdS += '<div style="width:256px; height:32px; position:relative; overflow:hidden;">'; jdS += '<div style="width:512px; height:192px; position:absolute; left:'+Sbh+'px; top:'+SMA+'px;">'; jdS += "<div " + " style=\"" + "width:512px; height:192px;" + "filter:progid:DXImageTransform.Microsoft.AlphaImageLoader" + "(src=\'" + ZrY + "\', sizingMethod='scale');\"></div>"; jdS += '</div>'; jdS += '</div>'; } else { jdS += '<div style="width:256px; height:32px; background:url('+ZrY+') '+Sbh+'px '+SMA+'px;"></div>'; } jdS += '<div style="height:10px;"></div>'; var ynh = ''; if (this.peI() && !uBN) { var EaM = LKR.PQ_ + 'images/engine/dialog'; var gPn = (this.theme == 'light') ? '-light' : '-dark'; ynh += '<table cellspacing="0" cellpadding="0">'; ynh += '<tr>'; ynh += '<td width="20" height="20">' + this.TUg('top-left', 20, 20, 1.0) + '</td>'; ynh += '<td width="*" height="20" style="'+this.Yea('top')+'"></td>'; ynh += '<td width="20" height="20">' + this.TUg('top-right', 20, 20, 1.0) + '</td>'; ynh += '</tr>';
ynh += '<tr>'; ynh += '<td width="20" height="*" style="'+this.Yea('left')+'"></td>'; ynh += '<td width="*" height="*" align="center" valign="center" style="'+this.Yea('center')+'">'; ynh += '<div style="position:relative; margin:10px 0px 15px 0px;">' + jdS + emb + '</div>'; ynh += '</td>'; ynh += '<td width="20" height="*" style="'+this.Yea('right')+'"></td>'; ynh += '</tr>'; ynh += '<tr>'; ynh += '<td width="20" height="20">' + this.TUg('bottom-left', 20, 20, 1.0) + '</td>'; ynh += '<td width="*" height="20" style="'+this.Yea('bottom')+'"></td>'; ynh += '<td width="20" height="20">' + this.TUg('bottom-right', 20, 20, 1.0) + '</td>'; ynh += '</tr>'; ynh += '</table>'; } else { ynh += jdS + emb; } this.vgk.style.display = 'block'; this.vgk.style.width = '' + vFb + 'px'; this.vgk.style.height = '' + mHW + 'px'; this.vgk.innerHTML = '<table cellspacing="0" cellpadding="0" border="0" width="'+vFb+'" height="'+mHW+'"><tr><td align="center" valign="center" style="color:'+((this.theme == 'dark') ? 'white' : 'black')+'">' + ynh + '</td></tr></table>'; this.oZI = true; this.lvf = XcS; this.vgk.onmousedown = function() {}; }; QOS.prototype.DRv = function() { var t_X = this.Bcg._target_opacity; this.Bcg.K_Y += ((t_X - this.Bcg.K_Y) / 8); if (Math.abs(t_X - this.Bcg.K_Y) < 0.01) { this.Bcg.K_Y = t_X; delete this.juH; if (!t_X) { this.Bcg.style.display = 'none'; this.Bcg.style.width = '1px'; this.Bcg.style.height = '1px'; } } else { this.juH = setTimeout( 'FIy.DRv()', 33 ); }
RRP( this.Bcg, this.Bcg.K_Y ); }; QOS.prototype.FuS = function() { this.Bcg._target_opacity = 0; var vFb = qBq.portWidth * qBq.tdu; var mHW = qBq.portHeight * qBq.tdu; this.Bcg.style.width = '' + vFb + 'px'; this.Bcg.style.height = '' + mHW + 'px'; if (ua.ie) { this.Bcg.style.display = 'none'; this.Bcg.style.width = '1px'; this.Bcg.style.height = '1px'; } else { if (!this.juH) { this.juH = setTimeout( 'FIy.DRv()', 33 ); } } }; QOS.prototype.muu = function(no_splash) { if (this.lvf && this.lvf.bNt) { this.lvf.bNt(); } this.vgk.innerHTML = ''; this.vgk.style.display = 'none'; this.vgk.style.width = '1px'; this.vgk.style.height = '1px'; this.FuS(); if (this.zHP) LKR.resume(); delete this.zHP; this.oZI = false; if (!LKR.inGame && LKR.loaded && !no_splash) this.UWZ(); }; QOS.prototype.jlW = function() { LKR.hZe.show(1); var ynh = ''; var vlv = LKR.PQ_ + 'images/engine/dialog/play.png'; ynh += '<div style="width:160px; height:160px; position:relative; overflow:hidden; cursor:pointer;">'; ynh += '<div style="width:160px; height:320px; position:absolute; left:0px; top:0px;" onMouseOver="this.style.top=\'-160px\';" onMouseOut="this.style.top=\'0px\';" onClick="FIy.PXg()">'; if (ua.ie6) {
ynh += "<div " + " style=\"" + "width:160px; height:320px;" + "filter:progid:DXImageTransform.Microsoft.AlphaImageLoader" + "(src=\'" + vlv + "\', sizingMethod='scale');\"></div>"; } else { ynh += '<img src="'+vlv+'" width="160" height="320"/>'; } ynh += '</div>'; ynh += '</div>'; this.rMH( this, 4, ynh, true, 0.5 ); this.vgk.onmousedown = function() { LKR.QZW.PXg(); }; el('et_loading_bar').hide(); el('et_msgs').hide(); }; QOS.prototype.PXg = function() { this.muu(); LKR.hZe.show(0); el('et_loading_bar').show(); el('et_msgs').show(); LKR.nMg(); }; QOS.prototype.UWZ = function() { if (Debug.enabled) return; var ynh = ''; var vlv = LKR.PQ_ + 'images/engine/dialog/play.png'; ynh += '<div style="width:160px; height:160px; position:relative; overflow:hidden; cursor:pointer;">'; ynh += '<div style="width:160px; height:320px; position:absolute; left:0px; top:0px;" onMouseOver="this.style.top=\'-160px\';" onMouseOut="this.style.top=\'0px\';" onClick="gGameControl.resume()">'; if (ua.ie6) { ynh += "<div " + " style=\"" + "width:160px; height:320px;" + "filter:progid:DXImageTransform.Microsoft.AlphaImageLoader" + "(src=\'" + vlv + "\', sizingMethod='scale');\"></div>"; } else { ynh += '<img src="'+vlv+'" width="160" height="320"/>'; } ynh += '</div>';
ynh += '</div>'; this.rMH( this, 5, ynh, true, 0.5 ); this.vgk.onmousedown = function() { LKR.resume(); }; }; Class.create( 'Toolbar.Icon', { img_src: '', x: 0, clip_x: 0, width: 24, height: 24, img_width: 264, img_height: 48, title: '', __construct: function() { }, init: function(QZW, acQ) { this.x = acQ; this.QZW = QZW; if (!this.img_src) this.img_src = LKR.PQ_ + 'images/engine/toolbar/icons.png'; this.div = document.createElement('div'); this.div.setAttribute('title', this.title); this.style = this.div.style; this.style.position = 'absolute'; if (ua.op) { this.style.left = '' + Math.floor(acQ) + 'px'; this.style.top = '0px'; this.style.width = '' + this.width + 'px'; this.style.height = '' + this.height + 'px'; this.style.backgroundImage = 'url('+this.img_src+')'; this.style.backgroundPosition = '-' + this.clip_x + 'px -24px'; } else { this.style.left = '' + Math.floor(acQ - this.clip_x) + 'px'; this.style.top = '-24px'; this.style.width = '' + this.img_width + 'px'; this.style.height = '' + this.img_height + 'px'; this.style.clip = 'rect(24px '+Math.floor(this.clip_x + 24)+'px 48px '+this.clip_x+'px)'; this.QZW.LyD( this.div, this.img_src, this.img_width, this.img_height );
} this.style.cursor = 'pointer'; this.state = 'out'; var icon = this; this.div.onmouseover = function() { icon.onMouseOver(); }; this.div.onmouseout = function() { icon.onMouseOut(); }; this.div.onclick = function() { icon.onClick(); }; }, onMouseOver: function() { if (ua.op) { this.style.backgroundPosition = '-' + this.clip_x + 'px -0px'; } else { this.style.left = '' + Math.floor(this.x - this.clip_x) + 'px'; this.style.clip = 'rect(0px '+Math.floor(this.clip_x + 24)+'px 24px '+this.clip_x+'px)'; this.style.top = '0px'; } this.state = 'over'; }, onMouseOut: function() { if (ua.op) { this.style.backgroundPosition = '-' + this.clip_x + 'px -24px'; } else { this.style.left = '' + Math.floor(this.x - this.clip_x) + 'px'; this.style.clip = 'rect(24px '+Math.floor(this.clip_x + 24)+'px 48px '+this.clip_x+'px)'; this.style.top = '-24px'; } this.state = 'out'; }, refresh: function() { if (this.state == 'over') this.onMouseOver(); else this.onMouseOut(); }, onClick: function() {}, logic: function() {}, draw: function() {}, pause: function() {}, resume: function() {}, update: function() {}
} ); Toolbar.Icon.extend( 'Toolbar.Icon.Divider', { width: 8, init: function(QZW, acQ) { this.QZW = QZW; this.div = document.createElement('div'); this.style = this.div.style; this.style.position = 'absolute'; this.style.left = '' + acQ + 'px'; this.style.top = '-0px'; this.style.width = '8px'; this.style.height = '24px'; this.QZW.LyD( this.div, LKR.PQ_ + 'images/engine/toolbar/divider.png', 8, 24); } }); Toolbar.Icon.extend( 'Toolbar.Icon.PlayPause', { clip_x: 0, title: 'Play/Pause', onClick: function() { LKR.toggle(); }, pause: function() { this.clip_x = 0; this.refresh(); this.QZW.dkJ(1, false); this.QZW.UWZ(); }, resume: function() { this.clip_x = 24; this.refresh(); this.QZW.fcr(false); if (this.QZW.oZI) this.QZW.muu(); }, logic: function() { if (this.clip_x == 0) this.resume(); } } ); Toolbar.Icon.extend( 'Toolbar.Icon.Share', { clip_x: 2 * 24, title: 'Share Game',
onClick: function() { var ynh = ''; var LJu = LKR.PQ_ + 'api/gf/' + LKR.id + '/' + LKR.ICK.rev; var EmD = (parseInt(LKR.asW.PortWidth, 10) * parseInt(LKR.asW.ZoomDefault, 10)); var dRa = (parseInt(LKR.asW.PortHeight, 10) * parseInt(LKR.asW.ZoomDefault, 10)) + 24; var vqt = '<iframe src="'+LJu+'" style="width:'+EmD+'px; height:'+dRa+'px; margin:0; padding:0;" frameborder="0" scrolling="no"></iframe>'; var BiM = (this.QZW.theme == 'dark') ? 'white' : 'black'; var wAQ = 'font-family:arial,sans-serif; font-size:10px; opacity:0.75; color:'+BiM+'; cursor:default;'; var EaM = LKR.PQ_ + 'images/engine/dialog'; var vFb = qBq.portWidth * qBq.tdu; var HoX = (vFb < 640) ? ((vFb < 480) ? 150 : 214) : 320; var Shq = (vFb < 480) ? 64 : 128; var ilV = (vFb < 320) ? 0 : 10; ynh += '<div style="margin-left:'+ilV+'px;">'; ynh += '<table cellspacing="0" cellpadding="0">'; ynh += '<tr>'; ynh += '<td align="left" valign="top">'; ynh += '<div style="'+wAQ+' margin-bottom:5px; width:'+HoX+'px;">Paste this HTML into your website or blog:</div>'; ynh += '<form style="margin:0; padding:0;"><textarea style="width:'+HoX+'px; height:64px; outline:0; font-family:courier,monospace; font-size:11px; color:'+BiM+'; background-color:transparent; border:1px dashed '+BiM+'; word-break:break-all; opacity:0.75;" wrap="virtual" onkeyup="return qLX(event)" onkeydown="return qLX(event)" onClick="Cok(this)">' + dcI(vqt) + '</textarea></form>'; ynh += '</td>'; ynh += '<td>'; ynh += '<div style="width:10px;"></div>'; ynh += '</td>'; ynh += '<td align="center" valign="top">'; ynh += '<div style="'+wAQ+' margin-bottom:5px; width:'+Shq+'px;">Or, click to share it on:</div>'; ynh += '<div><img src="'+EaM+'/facebook-logo.gif" width="64" height="24" style="cursor:pointer; border:1px solid transparent;" onClick="FIy.lvf.HCs()" onMouseOver="this.style.border=\'1px solid '+BiM+'\';" onMouseOut="this.style.border=\'1px solid transparent\';"/></div>'; ynh += '<div style="height:16px;"></div>'; ynh += '<div><img src="'+EaM+'/twitter-logo.'+(ua.ie6 ? 'gif' : 'png')+'" width="64" height="24" style="cursor:pointer; border:1px solid transparent;" onClick="FIy.lvf.lrg()" onMouseOver="this.style.border=\'1px solid '+BiM+'\';" onMouseOut="this.style.border=\'1px solid transparent\';"/></div>'; ynh += '</td>'; ynh += '</tr>'; ynh += '</table>'; ynh += '</div>'; ynh += '<div style="height:20px;"></div>'; ynh += '<table cellspacing="0" cellpadding="0"><tr>'; ynh += '<td><div style="width:10px;"></div></td>'; ynh += '<td>' + this.QZW.SQW('arrow_turn_left.png', 'Back', "Ama()") + '</td>'; ynh += '<td><div style="width:10px;"></div></td>'; ynh += '</tr></table>'; this.QZW.rMH(this, 1, ynh); },
HCs: function() { var LJu = LKR.PQ_ + 'games/' + LKR.id + '/' + LKR.ICK.rev; window.open( 'http://www.facebook.com/sharer.php?u='+encodeURIComponent(LJu)+'&t='+encodeURIComponent(LKR.asW.Title), 'sharer','toolbar=0,status=0,width=626,height=436'); }, lrg: function() { var LJu = LKR.PQ_ + 'games/' + LKR.id + '/' + LKR.ICK.rev; var KRr = 'Playing ' + LKR.asW.Title + ' on EffectGames.com: ' + LJu; window.open( 'http://twitter.com/home?status=' + encodeURIComponent(KRr) ); }, Ama: function() { this.QZW.muu(); } } ); Toolbar.Icon.extend( 'Toolbar.Icon.Home', { clip_x: 3 * 24, title: 'Play on EffectGames.com', onClick: function() { var LJu = LKR.PQ_ + 'games/' + LKR.id + '/' + LKR.ICK.rev; window.open( LJu ); if (LKR.inGame) LKR.pause(); } } ); Toolbar.Icon.extend( 'Toolbar.Icon.Debug', { clip_x: 10 * 24, title: 'Open Debugger', onClick: function() { Debug.show(); } } ); Toolbar.Icon.extend( 'Toolbar.Icon.Keyboard', { clip_x: 4 * 24, title: 'Set Controls', yus: function() { var oNZ = {}; for (var LwV in LKR.keys) { oNZ[LwV] = Fjr( LKR.keys[LwV].code ); } return oNZ;
}, onClick: function() { this.gxf = this.yus(); var mHW = qBq.portHeight * qBq.tdu; var fZs = this.QZW.peI() ? (24 + 24 + 15 + 10) : 0; var ynh = ''; var BiM = (this.QZW.theme == 'dark') ? 'white' : 'black'; var Scg = (this.QZW.theme == 'dark') ? 'black' : 'white'; var oHJ = Esx( LKR.asW.Keys.Key ); var oEW = (mHW - fZs) - (42 + 55 + 8); var rny = ((oHJ.length * 24) >= oEW); if (rny) ynh += '<div style="height:'+oEW+'px; overflow-x:hidden; overflow-y:auto;">'; ynh += '<table width="256" cellspacing="0" cellpadding="0">'; for (var nzz = 0, _aT = oHJ.length; nzz < _aT; nzz++) { var o__ = oHJ[nzz]; ynh += '<tr>'; ynh += '<td align="right"><div style="padding:5px 15px 5px 5px; font-family:arial,sans-serif; font-size:12px; font-weight:bold; opacity:0.75; cursor:default; text-shadow:'+Scg+' 0px 0px 2px;"><nobr>'+o__.Title+':</nobr></div></td>'; ynh += '<td align="left"><div id="d_key_'+o__.Name+'" style="padding:5px; font-family:courier,monospace; font-size:12px; font-weight:bold; cursor:pointer; border:1px solid transparent; text-shadow:'+Scg+' 0px 0px 2px;" onMouseOver="this.style.border=\'1px solid '+BiM+'\';" onMouseOut="this.style.border=\'1px solid transparent\';" onClick="FIy.lvf.hyY(\''+o__.Name+'\')">'; var nHd = LKR.keys[ o__.Name ].code; var ciW = []; for (var Bhi = 0, jQZ = nHd.length; Bhi < jQZ; Bhi++) { ciW.push( LKR.eeB(nHd[Bhi]) ); } ynh += ciW.join(', '); ynh += '</div></td>'; ynh += '</tr>'; } ynh += '</table>'; if (rny) ynh += '</div>'; ynh += '<div style="height:20px;"></div>'; ynh += '<table cellspacing="0" cellpadding="0"><tr>'; ynh += '<td><div style="width:10px;"></div></td>'; ynh += '<td>' + this.QZW.SQW('arrow_turn_left.png', 'Cancel', "Ama()") + '</td>'; ynh += '<td><div style="width:30px;"></div></td>'; ynh += '<td>' + this.QZW.SQW('accept.png', '<b>Save</b>', "NGr()") + '</td>'; ynh += '<td><div style="width:10px;"></div></td>'; ynh += '</tr></table>'; this.QZW.rMH(this, 0, ynh); }, hyY: function(jwX) {
var o__ = this.o__ = JwD( Esx(LKR.asW.Keys.Key), { Name: jwX } ); this.nHd = Fjr( LKR.keys[ o__.Name ].code ); var BiM = (this.QZW.theme == 'dark') ? 'white' : 'black'; var ynh = ''; ynh += '<div style="cursor:default; font-family:arial,sans-serif; font-size:16px; font-weight:bold; text-align:center; color:'+BiM+'; opacity:0.75;">'+o__.Title+'</div>'; ynh += '<div id="d_key_codes" style="width:200px; height:70px; border:1px solid '+BiM+'; margin:10px 0px 5px 0px; padding:5px; overflow-x:hidden; overflow-y:auto;">' + this.YLk() + '</div>'; ynh += '<div style="cursor:default; width:200px; font-family:arial,sans-serif; font-size:11px; text-align:left; color:'+BiM+'; opacity:0.75;">Press keys to assign to the control (up to five). Click on keys to remove them.</div>'; ynh += '<div style="height:15px;"></div>'; ynh += '<table cellspacing="0" cellpadding="0"><tr>'; ynh += '<td><div style="width:10px;"></div></td>'; ynh += '<td>' + this.QZW.SQW('arrow_turn_left.png', 'Cancel', "efB()") + '</td>'; ynh += '<td><div style="width:30px;"></div></td>'; ynh += '<td>' + this.QZW.SQW('accept.png', '<b>OK</b>', "cdG()") + '</td>'; ynh += '<td><div style="width:10px;"></div></td>'; ynh += '</tr></table>'; this.QZW.rMH(this, 0, ynh); LKR.setHandler( 'keyintercept', [this, 'kva'] ); LKR.spM = true; }, YLk: function() { var BiM = (this.QZW.theme == 'dark') ? 'white' : 'black'; var ynh = ''; for (var nzz = 0, _aT = this.nHd.length; nzz < _aT; nzz++) { var GPM = this.nHd[nzz]; ynh += '<div style="float:left; padding:5px; margin:4px; border:1px solid '+BiM+';cursor:pointer; opacity:0.75; font-family:courier,monospace; font-size:12px; font-weight:bold; color:'+BiM+';" onClick="FIy.lvf.Mxp('+nzz+')" onMouseOver="this.style.opacity=1.0;" onMouseOut="this.style.opacity=0.75;">' + LKR.eeB(GPM) + '</div>'; } ynh += '<div style="clear:both;"></div>'; return ynh; }, kva: function(e, GPM) { if ((this.nHd.length < 5) && !Bcc(this.nHd, GPM)) { this.nHd.push( GPM ); el('d_key_codes').innerHTML = this.YLk(); } return false; }, Mxp: function(nzz) { this.nHd.splice( nzz, 1 ); el('d_key_codes').innerHTML = this.YLk(); },
efB: function() { delete this.o__; delete this.nHd; LKR.spM = false; delete LKR.handlers.keyintercept; this.onClick(); }, cdG: function() { LKR.keys[ this.o__.Name ].code = this.nHd; this.efB(); }, Ama: function() { if (this.o__) { LKR.spM = false; delete LKR.handlers.keyintercept; delete this.o__; delete this.nHd; } for (var LwV in LKR.keys) { LKR.keys[LwV].code = this.gxf[LwV]; } delete this.gxf; this.QZW.muu(); }, NGr: function() { LKR.wVq.keys = this.yus(); LKR.GeZ.save(); delete this.gxf; this.QZW.muu(); }, bNt: function() { if (this.o__) { LKR.spM = false; delete LKR.handlers.keyintercept; delete this.o__; delete this.nHd; } } } ); Toolbar.Icon.extend( 'Toolbar.Icon.Music', {
clip_x: 5 * 24, title: 'Toggle Music', onClick: function() { if (LKR.wVq.music == 1) { ; gAudio.quietCategory('music'); gAudio.rWc['music'].enabled = false; this.clip_x = 6 * 24; LKR.wVq.music = 0; LKR.fireHandler('onDisableMusic'); } else { ; gAudio.rWc['music'].enabled = true; this.clip_x = 5 * 24; LKR.wVq.music = 1; if (LKR.inGame) LKR.fireHandler('onEnableMusic'); } this.refresh(); LKR.GeZ.save(); }, update: function() { if (LKR.wVq.music == 1) this.clip_x = 5 * 24; else this.clip_x = 6 * 24; this.refresh(); } } ); Toolbar.Icon.extend( 'Toolbar.Icon.Sound', { clip_x: 7 * 24, title: 'Toggle Sound', onClick: function() { if (LKR.wVq.sound == 1) { ; gAudio.quiet(); gAudio.enabled = false; Effect.VideoManager.xrR(); this.clip_x = 8 * 24; LKR.wVq.sound = 0; LKR.fireHandler('onDisableSound'); }
else if (!gAudio.fatal) { ; gAudio.enabled = true; Effect.VideoManager.xrR(); this.clip_x = 7 * 24; LKR.wVq.sound = 1; LKR.fireHandler('onEnableSound'); if (LKR.wVq.music == 1) LKR.fireHandler('onEnableMusic'); } this.refresh(); LKR.GeZ.save(); }, audioloaderror: function() { this.clip_x = 8 * 24; this.refresh(); }, update: function() { if ((LKR.wVq.sound == 1) && !gAudio.fatal) this.clip_x = 7 * 24; else this.clip_x = 8 * 24; this.refresh(); } } ); Toolbar.Icon.extend( 'Toolbar.Icon.Zoom', { clip_x: 9 * 24, title: 'Toggle Zoom', onClick: function() { if (LKR.changingZoom) return; if (this.QZW.oZI) this.QZW.muu( true || 'no_splash' ); ; var XvN = Effect.Port.getZoomLevel(); var EmD = Effect.Port.portWidth; var dRa = Effect.Port.portHeight; ; var tMN = screen.availWidth; var oEW = screen.availHeight; ; var XDA = Math.floor( tMN / EmD ); var udJ = Math.floor( oEW / dRa ); var EgW = Math.min( XDA, udJ ); if (!EgW) EgW = 1;
; var uVq = XvN + 1; if (uVq > Math.min(EgW, 4)) uVq = 1; if (uVq != XvN) { var ZkR = (EmD * uVq) + 100; var Lnj = (dRa * uVq) + 120; var Wq_ = BxF(); ; ; if ((ZkR > Wq_.width) || (Lnj > Wq_.height)) { var WbJ = Math.min( Math.max(ZkR, Wq_.width), tMN ); var yRR = Math.min( Math.max(Lnj, Wq_.height), oEW ); ; if (window.resizeTo) { window.resizeTo( WbJ, yRR ); } else if (window.outerWidth) { window.outerWidth = WbJ; window.outerHeight = yRR; } } LKR.wVq.zoom = uVq; LKR.GeZ.save(); el('et_icon_shelf').hide(); LKR.changeZoomLevel(uVq); } } } );; var $G; var $P; var $A; var $I; var $T; Effect.LEFT_BUTTON = ua.ie ? 1 : 0; Effect.MIDDLE_BUTTON = ua.ie ? 4 : 1; Effect.RIGHT_BUTTON = 2; var LKR = null; var gAudio = null; var qiQ = null; var iSy = null;
var gVl = null; var qBq = null; window.FIy = null; function wfN() { if (!LKR) LKR = this; if (!gAudio) gAudio = new EjC(); if (!qiQ) qiQ = new hKT(); if (!iSy) iSy = new TfM(); if (!gVl) gVl = new non(); this.qIJ = gAudio; this.ghs = qiQ; this.hZe = iSy; this.Zgt = gVl; this.oaS = aFj; this.oMc = gMulti; this.QZW = FIy = new QOS(); this.FCk = new yCi(); this.qcm = new rLo(); this.XfD = new GSn(); this.Lkw = new sDd(); this.PQ_ = ''; this.oaS.Qag = this.PQ_ + this.oaS.Qag; Effect.VideoManager.Qag = this.PQ_ + Effect.VideoManager.Qag; this.id = ''; this.Bou = ''; this.Fvp = 0; this.oaS.Qag = this.PQ_ + this.oaS.movieURL; this.localPath = location.href.replace(/\?.*$/, '').replace(/\/[^\/]+$/, ''); this.Iau = null; this.DQG = null; this.gQM = ''; this.MYD = ''; this.WwP = ''; this.keys = {}; this.autoKey = false; this.spM = false; this.WIN = false; this.mousePt = new Point(); this.clickResume = true; this.NvE = [];
this.logicClock = 0; this.drawClock = 0; this.Mo_ = 30; this.EsV = true; this.inGame = false; this.SiX = null; this.KtM = 2; this._mp = {}; this.XSo = {}; this.yVo = 'loading'; this.Bu_ = { oPW: 0, ryX: 0, Ino: 0, akj: 0, WgR: 0, F_Q: 0 }; this.MiV = { sprites: [], levels: [], images: [], audio: [], xml: [], fonts: [], videos: [] }; this.lang = (navigator.language || navigator.systemLanguage || 'en-us').toLowerCase(); if ((typeof(ICK.effect_audio) != 'undefined') && (ICK.effect_audio == 0)) gAudio.enabled = false; this.OiL = []; }; wfN.prototype = new pqr(); wfN.prototype.pPU = /\.mp3$/i; wfN.prototype.Ksk = /\.(jpe|jpeg|jpg|png|gif)$/i; wfN.prototype.Yqp = /\.xml$/i; wfN.prototype.pLj = /\.(flv|mp4|mp4v|mov|3gp|3g2)$/i; wfN.prototype.AEU = { 8: 'Backspace', 9: 'Tab', 27: 'Escape', 
32: 'Space', 192: 'Tilde', 187: 'Equals', 189: 'Dash', 45: 'Insert', 36: 'Home', 33: 'Page Up', 144: 'Num Lock', 111: 'Slash (Keypad)', 106: 'Asterisk (Keypad)', 109: 'Dash (Keypad)', 219: 'Left Bracket', 221: 'Right Bracket', 220: "Backslash", 46: 'Delete', 35: 'End', 34: 'Page Down', 103: '7 (Keypad)', 104: '8 (Keypad)', 105: '9 (Keypad)', 107: 'Plus (Keypad)', 186: 'Semicolon', 222: 'Quote', 13: 'Enter', 100: '4 (Keypad)', 101: '5 (Keypad)', 102: '6 (Keypad)', 188: 'Comma', 190: 'Period', 191: 'Slash', 38: 'Up Arrow', 97: '1 (Keypad)', 98: '2 (Keypad)', 99: '3 (Keypad)', 17: 'Control', 37: 'Left Arrow', 40: 'Down Arrow', 39: 'Right Arrow', 96: '0 (Keypad)', 110: 'Period (Keypad)',
16: 'Shift', 18: 'Alt/Option', 224: 'Meta/Cmd' }; wfN.prototype.setBaseAssetURL = function(vlv) { this.Bou = vlv; }; wfN.prototype.setAssetModDate = function(zrj) { this.Fvp = zrj || 0; }; wfN.prototype.getAssetModDate = function() { return this.Fvp; }; wfN.prototype.getBaseEffectURL = function() { return this.PQ_; }; wfN.prototype.setTargetFPS = function(Bu_) { this.Mo_ = parseInt(Bu_, 10); }; wfN.prototype.getTargetFPS = function() { return this.Mo_; }; wfN.prototype.setSkipFrames = function(ZOp) { this.EsV = !!ZOp; }; wfN.prototype.setState = function(Vro) { this.yVo = Vro; }; wfN.prototype.getState = function() { return this.yVo; }; wfN.prototype.setKeysActive = function(bNP) { this.spM = !!bNP; }; wfN.prototype.setMouseActive = function(bNP) { this.WIN = !!bNP; }; wfN.prototype.getAverageFPS = function() { return this.Bu_.ryX; }; wfN.prototype.getCurrentFPS = function() { return this.Bu_.oPW; }; wfN.prototype.resetAverageFPS = function() { this.Bu_.F_Q = 0; this.Bu_.WgR = 0; }; wfN.prototype.JWd = function(jwX) { this.OiL.push(jwX); }; wfN.prototype.setQuery = function(ICK) { this.ICK = ICK; }; wfN.prototype.getQuery = function() { return this.ICK; }; wfN.prototype.getLevelName = function() { return this.gQM; }; wfN.prototype.getLevelDef = function() { return this.Iau; }; wfN.prototype.getLevelData = function() { return this.DQG; }; wfN.prototype.getLevelProps = function() { return this.Iau.Properties || {}; }; wfN.prototype.isKeyDown = function(Vro) { return this.keys[Vro] ? this.keys[Vro].down : null; }; wfN.prototype.setResumeKey = function(Vro) { this.dHs = Vro; }; wfN.prototype.preloadImage = function(vlv) { this.MiV.images.push(vlv); }; wfN.prototype.preloadAudio = function(vlv) { this.MiV.audio.push(vlv); }; wfN.prototype.preloadLevel = function(Vro) { this.MiV.levels.push(Vro); }; wfN.prototype.preloadXML = function(vlv) { this.MiV.xml.push(vlv); }; wfN.prototype.preloadVideo = function(vlv) { this.MiV.videos.push(vlv); }; wfN.prototype.preloadFont = function(Vro) { this.MiV.fonts.push(Vro); }; wfN.prototype.preloadSprite = function(Vro) { this.MiV.sprites.push(Vro); }; wfN.prototype.init = function() { if (!this.sQa) { this.sQa = true; if (!this.asW) return acp("Game definition not set."); this.EYO = (this.ICK.mode == 'iframe'); this.HpS = (this.ICK.mode == 'leveleditor');
this.jiT = (this.ICK.mode == 'sa'); if (this.jiT) { this.ll = this.XfD; this.XfD.nl = this.XfD.Gaz; this.xl = this.qcm; this.qcm.nl = this.qcm.Gaz; } this.GeZ = new CookieTree(); if (!this.GeZ.get('games')) this.GeZ.set('games', {}); var kgL = this.GeZ.get('games'); if (!kgL[this.id]) kgL[this.id] = {}; this.wVq = kgL[this.id]; this.setTargetFPS( this.asW.FrameRate ); this.setSkipFrames( this.asW.SkipFrames == 1 ); if (this.asW.Keys && this.asW.Keys.Key) { var oHJ = Esx( this.asW.Keys.Key ); for (var nzz = 0, _aT = oHJ.length; nzz < _aT; nzz++) { var o__ = oHJ[nzz]; this.keys[ o__.Name ] = { code: (this.wVq.keys && this.wVq.keys[o__.Name]) ? UyS( this.wVq.keys[o__.Name] ) : UyS( o__.Codes.toString().split(/\,\s*/) ), down: false, title: o__.Title }; } } var zhp = new Portal('effect_port'); zhp.nUo = 1; zhp.setSize( this.asW.PortWidth, this.asW.PortHeight ); if ((this.asW.Zoom == "Yes") && !this.EYO && this.wVq.zoom) { var uVq = parseInt( this.wVq.zoom, 10 ); zhp.setZoomLevel( uVq ); var ZkR = (zhp.portWidth * uVq) + 100; var Lnj = (zhp.portHeight * uVq) + 120; var Wq_ = BxF(); var tMN = screen.availWidth; var oEW = screen.availHeight; if ((ZkR > Wq_.width) || (Lnj > Wq_.height)) { var WbJ = Math.min( Math.max(ZkR, Wq_.width), tMN );
var yRR = Math.min( Math.max(Lnj, Wq_.height), oEW ); ; if (window.resizeTo) { window.resizeTo( WbJ, yRR ); } else if (window.outerWidth) { window.outerWidth = WbJ; window.outerHeight = yRR; } } } else if ((this.asW.Zoom == "Auto") && !this.EYO) { var VfO = BxF(); var WLF = Math.floor(VfO.width / this.asW.PortWidth ); var yjI = Math.floor(VfO.height / this.asW.PortHeight ); var uVq = Math.min( WLF, yjI ) || 1; zhp.setZoomLevel( uVq ); } else { zhp.setZoomLevel( this.asW.ZoomDefault || 1 ); } zhp.setBackgroundColor( this.asW.BackgroundColor ); this.attach(zhp); qBq = zhp; Effect.Port = $P = qBq; Effect.Audio = $A = gAudio; Effect.ImageLoader = $I = qiQ; Effect.Tween = $T = gVl; gAudio.enabled = ( (this.asW.AudioEnabled == 1) && ((typeof(ICK.effect_audio) == 'undefined') || (ICK.effect_audio == 1)) ); gAudio.stO = parseFloat( this.asW.AudioMasterVolume ); gAudio.rWc['sfx'].volume = parseFloat( this.asW.AudioSFXVolume ); gAudio.rWc['music'].volume = parseFloat( this.asW.AudioMusicVolume ); gAudio.rWc['video'].volume = parseFloat( this.asW.AudioVideoVolume ); this.fireHandler('onInit'); this.fireHandler('onZoom', qBq.tdu); this._load(); }
}; wfN.prototype.fireHandler = wfN.prototype.fireEvent = function(Vro) { if (typeof(Vro) != 'string') return acp("Event type is not string: " + Vro); var jIE = pqr.prototype.fireHandler.apply(this, hmd(arguments, 0)); if (!jIE) return jIE; var _RI = hmd( arguments, 1 ); Vro = Vro.toString().toLowerCase().replace(/^on/, ''); for (var nzz = 0, _aT = this.NvE.length; nzz < _aT; nzz++) { if (this.NvE[nzz][Vro]) { var kuI = Esx(this.NvE[nzz][Vro]); var jQZ = 0; for (var Bhi = 0, jQZ = kuI.length; Bhi < jQZ; Bhi++) kuI[Bhi].apply(this.NvE[nzz], _RI); } } if (!this.HpS && this.QZW[Vro]) { var kuI = Esx(this.QZW[Vro]); for (var nzz = 0, _aT = kuI.length; nzz < _aT; nzz++) kuI[nzz].apply(this.QZW, _RI); } return true; }; wfN.prototype.setStateHandler = function(Vro, vMc) { this.XSo[Vro] = vMc; }; wfN.prototype.getGamePath = function() { return this.Bou; }; wfN.prototype.setGameDef = function(HCD) { this.asW = HCD; this.id = this.asW.GameID; }; wfN.prototype.setGameDefKey = function(LwV, kMU) { this.asW[LwV] = kMU; }; wfN.prototype.getGameDef = function() { return this.asW; }; wfN.prototype._load = function(gYe) {
if (!this.asW) return acp('No game definition found.'); ; if (gYe) { this.clearAllHandlers('onLoadGame'); this.setHandler('onLoadGame', gYe); } ; this.hZe.MiV( [this, 'BMT'] ); }; wfN.prototype.BMT = function() { if (!this.HpS) { this.QZW.pYw(); this.QZW.bCP(); } this.hZe.NWN(0, 1); this.hZe.show(); if ((this.EYO || (this.jiT && (window != top))) && !ICK.autoplay) { this.QZW.jlW(); } else this.nMg(); }; wfN.prototype.nMg = function() { if (this.oMc.enabled) this.oMc.tFi( [this, 'UqC'] ); else this.UqC(); }; wfN.prototype.UqC = function() { if (this.qIJ.enabled) this.qIJ.tFi( [this, 'fLX'] ); else this.fLX(); }; wfN.prototype.GRH = function() { this.qIJ.WTw(); this.ghs.WTw(); this.FCk.WTw(); this.qcm.WTw(); this.XfD.WTw(); this.Lkw.WTw(); this.Tve = 0; this.Bay = 0; this.LsQ = 0; this.PMw = 0;
this.mGN = 0; this.etC = 0; }; wfN.prototype.fLX = function() { ; this.GRH(); this.fireHandler( 'onBeforeLoadGameMedia' ); if (this.asW.Sounds && this.asW.Sounds.Sound) { this.qIJ.IUl( this.asW.Sounds.Sound ); } if (this.MiV.images.length) { this.Bay += qiQ.loadImages( this.MiV.images ); this.MiV.images = []; } if (this.MiV.audio.length) { this.Tve += this.qIJ.Ous( this.MiV.audio ); this.MiV.audio = []; } if (this.MiV.xml.length) { this.PMw += this.qcm.LYT( this.MiV.xml ); this.MiV.xml = []; } if (this.MiV.videos.length) { this.etC += this.Lkw.kXW( this.MiV.videos ); this.MiV.videos = []; } if (this.MiV.fonts.length) { for (var nzz = 0, _aT = this.MiV.fonts.length; nzz < _aT; nzz++) { var Vro = this.MiV.fonts[nzz]; var rJC = JwD( this.asW.Fonts.Font, { Name: Vro } ); this.FCk.qAz( rJC ); this.LsQ++; } this.MiV.fonts = []; } if (this.MiV.levels.length) { for (var nzz = 0, _aT = this.MiV.levels.length; nzz < _aT; nzz++) { var Vro = this.MiV.levels[nzz]; this.XfD.IKq( Vro ); this.mGN++;
this.ynZ( Vro ); } this.MiV.levels = []; } if (this.asW.Sounds && this.asW.Sounds.Sound) { var Qju = []; for (var nzz = 0, _aT = this.asW.Sounds.Sound.length; nzz < _aT; nzz++) { var Hgz = this.asW.Sounds.Sound[nzz]; if ((Hgz.Preload == 1) || (this.asW.PreloadAll == 1)) Qju.push( Hgz.Path ); } if (Qju.length) { this.Tve += this.qIJ.Ous( Qju ); } } if (this.asW.Fonts && this.asW.Fonts.Font) { var WFt = []; for (var nzz = 0, _aT = this.asW.Fonts.Font.length; nzz < _aT; nzz++) { var rJC = this.asW.Fonts.Font[nzz]; if (rJC.Enabled == 1) WFt.push( rJC ); } if (WFt.length) { this.FCk.qAz( WFt ); this.LsQ += WFt.length; } } this.Ltf = {}; if (this.asW.Sprites && this.asW.Sprites.Sprite) { for (var nzz = 0, _aT = this.asW.Sprites.Sprite.length; nzz < _aT; nzz++) { var vlH = this.asW.Sprites.Sprite[nzz]; this.Ltf[ vlH.Name ] = vlH; try { vlH.KWT = eval( vlH.Name ); } catch (e) { vlH.KWT = null; } if ((vlH.Preload == 1) || (this.asW.PreloadAll == 1)) { this.Qzd( vlH.Name ); } } 
} this.hLr = {}; if (this.asW.Tiles && this.asW.Tiles.Tile) { for (var nzz = 0, _aT = this.asW.Tiles.Tile.length; nzz < _aT; nzz++) { var CEV = this.asW.Tiles.Tile[nzz]; this.hLr[ CEV.Name ] = CEV; } } if (this.asW.Tilesets && this.asW.Tilesets.Tileset) { for (var nzz = 0, _aT = this.asW.Tilesets.Tileset.length; nzz < _aT; nzz++) { var qkb = this.asW.Tilesets.Tileset[nzz]; if ((qkb.Preload == 1) || (this.asW.PreloadAll == 1)) { if (qkb.Files && qkb.Files.File) { var Edc = Esx( qkb.Files.File ); for (var Bhi = 0, jQZ = Edc.length; Bhi < jQZ; Bhi++) { var RBT = qkb.Path + Edc[Bhi]; if (ua.ie6 && RBT.match(/\.png/i)) { if (RBT.match(/\?/)) RBT += '&format=gif'; else RBT += '?format=gif'; } this.Bay += this.ghs.loadImages( RBT ); } this.Bay += this.ghs.loadImages( this.jiT ? (qkb.Path + '_blank.gif') : (LKR.PQ_ + 'api/blank_image.gif?width=' + qkb.TileWidth + '&height=' + qkb.TileHeight) ); } qkb._media_loaded = 1; } } } if (this.asW.Levels && this.asW.Levels.Level) { for (var nzz = 0, _aT = this.asW.Levels.Level.length; nzz < _aT; nzz++) { var cpc = this.asW.Levels.Level[nzz]; if ((cpc.Preload == 1) || (this.asW.PreloadAll == 1)) { this.XfD.IKq( cpc.Name ); this.mGN++; this.ynZ( cpc.Name ); } } 
} if (this.asW.Resources && this.asW.Resources.Resource) { ; var kZf = Esx( this.asW.Resources.Resource ); this.MAt( kZf ); } if (this.MiV.sprites.length) { for (var nzz = 0, _aT = this.MiV.sprites.length; nzz < _aT; nzz++) { var Vro = this.MiV.sprites[nzz]; this.Qzd( Vro ); } this.MiV.sprites = []; } this.UwR(); }; wfN.prototype.ynZ = function(LwV) { var cpc = JwD( this.asW.Levels.Level, { Name: LwV } ); ; if (!cpc) return; if (cpc._media_loaded) return; cpc._media_loaded = 1; if (this.MiV.images.length) { this.Bay += qiQ.loadImages( this.MiV.images ); this.MiV.images = []; } if (this.MiV.audio.length) { this.Tve += this.qIJ.Ous( this.MiV.audio ); this.MiV.audio = []; } if (this.MiV.xml.length) { this.PMw += this.qcm.LYT( this.MiV.xml ); this.MiV.xml = []; } if (this.MiV.videos.length) { this.etC += this.Lkw.kXW( this.MiV.videos ); this.MiV.videos = []; } if (this.MiV.fonts.length) { for (var nzz = 0, _aT = this.MiV.fonts.length; nzz < _aT; nzz++) { var Vro = this.MiV.fonts[nzz];
var rJC = JwD( this.asW.Fonts.Font, { Name: Vro } ); this.FCk.qAz( rJC ); this.LsQ++; } this.MiV.fonts = []; } if (this.MiV.levels.length) { for (var nzz = 0, _aT = this.MiV.levels.length; nzz < _aT; nzz++) { var Vro = this.MiV.levels[nzz]; this.XfD.IKq( Vro ); this.mGN++; this.ynZ( Vro ); } this.MiV.levels = []; } if (this.MiV.sprites.length) { for (var nzz = 0, _aT = this.MiV.sprites.length; nzz < _aT; nzz++) { var Vro = this.MiV.sprites[nzz]; this.Qzd( Vro ); } this.MiV.sprites = []; } if (cpc.BackgroundImage) { this.Bay += this.ghs.loadImages( cpc.BackgroundImage ); } if (cpc.Requires && cpc.Requires.Require) { var Hnn = Esx( cpc.Requires.Require ); for (var Bhi = 0, jQZ = Hnn.length; Bhi < jQZ; Bhi++) { this.Qzd( Hnn[Bhi].Name ); } } if (cpc.Resources && cpc.Resources.Resource) { ; var kZf = Esx( cpc.Resources.Resource ); this.MAt( kZf ); } if (cpc.Layers && cpc.Layers.Layer) { var KIO = Esx( cpc.Layers.Layer ); for (var nzz = 0, _aT = KIO.length; nzz < _aT; nzz++) { var lvX = KIO[nzz];
if ((lvX.Type == 'tile') && lvX.Tileset) { var JYj = lvX.Tileset; var qkb = JwD( this.asW.Tilesets.Tileset, { Name: JYj } ); ; ; if (qkb && qkb.Files && qkb.Files.File) { var Edc = Esx( qkb.Files.File ); for (var Bhi = 0, jQZ = Edc.length; Bhi < jQZ; Bhi++) { var RBT = qkb.Path + Edc[Bhi]; if (ua.ie6 && RBT.match(/\.png/i)) { if (RBT.match(/\?/)) RBT += '&format=gif'; else RBT += '?format=gif'; } this.Bay += this.ghs.loadImages( RBT ); } this.Bay += this.ghs.loadImages( this.jiT ? (qkb.Path + '_blank.gif') : (LKR.PQ_ + 'api/blank_image.gif?width=' + qkb.TileWidth + '&height=' + qkb.TileHeight) ); } } else if ((lvX.Type == 'sprite') && lvX.Sprites && lvX.Sprites.Sprite) { ; var VBn = Esx( lvX.Sprites.Sprite ); for (var Bhi = 0, jQZ = VBn.length; Bhi < jQZ; Bhi++) { var GyR = VBn[Bhi]; this.Qzd( GyR ); } } } } }; wfN.prototype.Qzd = function(LwV) { var vlH = JwD( this.asW.Sprites.Sprite, { Name: LwV } ); ; if (!vlH) return; if (vlH._media_loaded || this.HpS) return; vlH._media_loaded = 1; if (vlH.Requires && vlH.Requires.Require) { var Hnn = Esx( vlH.Requires.Require );
for (var Bhi = 0, jQZ = Hnn.length; Bhi < jQZ; Bhi++) { this.Qzd( Hnn[Bhi].Name ); } } vlH._image_urls = {}; if (vlH.Resources && vlH.Resources.Resource) { ; var kZf = Esx( vlH.Resources.Resource ); this.MAt( kZf, vlH.Name ); for (var nzz = 0, _aT = kZf.length; nzz < _aT; nzz++) { var oVT = kZf[nzz]; if (oVT.Path.match(this.Ksk)) { var _rU = oVT.Path; var JmQ = ''+_rU; if (oVT.Filter) { if (this.jiT) _rU += '?sprite=' + vlH.Name; else _rU += '?filter=' + oVT.Filter; } vlH._image_urls[ JmQ ] = _rU; vlH._image_urls[ JmQ.replace(/^(.+)\/([^\/]+)$/, '$2').replace(/\.\w+$/, '') ] = _rU; } } } if (vlH.KWT && vlH.KWT.preload) { ; vlH.KWT.preload(); } if (vlH.KWT && vlH.KWT.prototype.images && vlH.KWT.prototype.images.length) { for (var nzz = 0, _aT = vlH.KWT.prototype.images.length; nzz < _aT; nzz++) { var vlv = vlH.KWT.prototype.images[nzz]; this.Bay += this.ghs.loadImages( vlv ); } } }; wfN.prototype.w_O = function(LwV) { var CEV = JwD( this.asW.Tiles.Tile, { Name: LwV } ); ; if (!CEV) return; if (CEV._media_loaded || this.HpS) return; CEV._media_loaded = 1;
if (CEV.Requires && CEV.Requires.Require) { var Hnn = Esx( CEV.Requires.Require ); for (var Bhi = 0, jQZ = Hnn.length; Bhi < jQZ; Bhi++) { this.Qzd( Hnn[Bhi].Name ); } } if (CEV.Resources && CEV.Resources.Resource) { ; var kZf = Esx( CEV.Resources.Resource ); this.MAt( kZf ); } }; wfN.prototype.MAt = function(kZf, EBL) { for (var nzz = 0, _aT = kZf.length; nzz < _aT; nzz++) { var oVT = kZf[nzz]; if (oVT.Path.match(this.pPU) && !this.HpS) { var _rU = oVT.Path; this.Tve += this.qIJ.Ous( _rU ); } else if (oVT.Path.match(this.Ksk)) { var _rU = oVT.Path; if (oVT.Filter) { if (this.jiT && EBL) _rU += '?sprite=' + EBL; else _rU += '?filter=' + oVT.Filter; } this.Bay += this.ghs.loadImages( _rU ); } else if (oVT.Path.match(this.Yqp) && !this.HpS) { var _rU = oVT.Path; this.PMw += this.qcm.LYT( _rU ); } else if (oVT.Path.match(this.pLj) && !this.HpS) { var _rU = oVT.Path; this.etC += this.Lkw.kXW( _rU ); } } }; wfN.prototype.Vln = function() { var BeT = ( this.Tve + 
this.Bay + this.LsQ + this.PMw + this.etC + this.mGN ); if (!BeT) { return 1.0; } var z_D = ( (this.qIJ.JoH() * this.Tve) + (this.ghs.JoH() * this.Bay) + (this.FCk.JoH() * this.LsQ) + (this.qcm.JoH() * this.PMw) + (this.Lkw.JoH() * this.etC) + (this.XfD.JoH() * this.mGN) ) / (BeT); return z_D; }; wfN.prototype.UwR = function() { var z_D = this.Vln(); this.hZe.NWN( z_D, 1 ); if (z_D >= 1.0) { ; ; ; ; ; ; ; this.qIJ.pYw(); this.loaded = true; this.yVo = 'run'; this.hZe.hide(); if (typeof(this.wVq.sound) == 'undefined') this.wVq.sound = 1; if (typeof(this.wVq.music) == 'undefined') this.wVq.music = 1; if (!this.wVq.sound) { gAudio.enabled = false; } if (!this.wVq.music) {
gAudio.rWc['music'].enabled = false; } if (!this.HpS) this.QZW.NWN(); Effect.VideoManager.xrR(); if ((this.asW.Zoom == "Auto") && !this.EYO) { if (window.addEventListener) { window.addEventListener( "resize", function() { LKR.yaw(); }, false ); } else if (window.attachEvent) { window.attachEvent("onresize", function() { LKR.yaw(); }); } } this.fireHandler('onLoadGame'); if (!this.HpS) this.run(); this.setKeysActive(true); this.setMouseActive(true); } else { setTimeout( function() { LKR.UwR(); }, 100 ); } if (this.qIJ.TiF && (this.ghs.JoH() >= 1.0) && (this.FCk.JoH() >= 1.0) && (this.qcm.JoH() >= 1.0) && (this.Lkw.JoH() >= 1.0) && (this.XfD.JoH() >= 1.0)) { this.qIJ.bqj(); } }; wfN.prototype.yaw = function() { if ((this.asW.Zoom == "Auto") && !this.EYO) { var VfO = BxF(); var WLF = Math.floor(VfO.width / this.asW.PortWidth ); var yjI = Math.floor(VfO.height / this.asW.PortHeight ); var uVq = Math.min( WLF, yjI ) || 1; if (uVq > 4) uVq = 4;
if ((uVq != qBq.tdu) && !this.changingZoom) { this.changeZoomLevel( zoom ); } } }; wfN.prototype.addLevel = function(Vro, cpc) { this.XfD.hWO[Vro] = cpc; }; wfN.prototype.setEnv = function(Vro) { this.WwP = JwD( this.asW.Envs.Env, { Name: Vro } ); if (!this.WwP) return acp( "Environment not found: " + Vro ); this.MYD = Vro; }; wfN.prototype.Jak = function(DcX) { if (this.WwP) { if (this.WwP.Excludes && this.WwP.Excludes.Exclude) { var pXL = fos( Esx( this.WwP.Excludes.Exclude ) ); for (var vlv in this.ghs.DOR) { var qfi = vlv.replace(/\?.+$/, ''); if (!pXL[qfi]) { DcX[vlv] = 1; } } } else { for (var vlv in this.ghs.DOR) { DcX[vlv] = 1; } } } }; wfN.prototype.XRT = function(Vro) { if (!Vro) Vro = ''; if (Vro == this.MYD) return null; ; var DcX = {}; this.Jak( DcX ); if (Vro) { this.WwP = JwD( this.asW.Envs.Env, { Name: Vro } ); if (!this.WwP) return acp( "Environment not found: " + Vro );
} else this.WwP = null; this.MYD = Vro; this.Jak( DcX ); return jME(DcX) ? FET(DcX) : null; }; wfN.prototype.setLevelEnvironment = function(Vro, MYD) { if (!MYD) MYD = ''; var cpc = JwD( this.asW.Levels.Level, { Name: Vro } ); if (!cpc) { return acp("Could not find level definition: " + Vro ); } var WwP = JwD( this.asW.Envs.Env, { Name: MYD } ); if (!WwP) return acp( "Environment not found: " + MYD ); cpc.Env = MYD; }; wfN.prototype.loadLevel = function(Vro, gYe, ncG) { if (!this.sQa) return acp( "loadLevel() cannot be called until the engine is loaded (use an onLoadGame event listener)." ); if (typeof(ncG) == 'undefined') ncG = true; if (gYe) { this.clearAllHandlers('onLoadLevel'); this.setHandler('onLoadLevel', gYe); } this.setKeysActive(false); this.setMouseActive(false); if (this.inGame) { this.stop(); setTimeout( function() { LKR.loadLevel(Vro, gYe, ncG); }, 100 ); return; } ; var cpc = JwD( this.asW.Levels.Level, { Name: Vro } ); if (!cpc) { return acp("Could not find level definition: " + Vro ); } var kF_ = null; if (cpc.Env) { kF_ = this.XRT( cpc.Env ); if (kF_) ; }
else { kF_ = this.XRT( '' ); if (kF_) ; } if (this.XfD.hWO[Vro] && !kF_) { if (ncG) this.setActiveLevel(Vro); else this.fireHandler('onInitLevel'); this.fireHandler('onLoadLevel'); this.run(); this.setKeysActive(true); this.setMouseActive(true); return; } this.CXd = Vro; this.tmJ = ncG; this.hZe.NWN(0, 1); this.hZe.show(); this.GRH(); if (kF_) { this.Bay += this.ghs.nSJ( kF_ ); } this.XfD.IKq( cpc.Name ); this.mGN++; this.ynZ( cpc.Name ); this.ube(); }; wfN.prototype.ube = function() { var z_D = this.Vln(); this.hZe.NWN( z_D, 1 ); if (z_D >= 1.0) { this.qIJ.pYw(); Effect.VideoManager.xrR(); if (this.tmJ) { this.setActiveLevel(this.CXd); delete this.CXd; delete this.tmJ; } else this.fireHandler('onInitLevel'); this.fireHandler('onLoadLevel'); this.run();
this.hZe.hide(); this.setKeysActive(true); this.setMouseActive(true); } else { setTimeout( function() { LKR.ube(); }, 100 ); } if (this.qIJ.TiF && (this.ghs.JoH() >= 1.0) && (this.FCk.JoH() >= 1.0) && (this.qcm.JoH() >= 1.0) && (this.Lkw.JoH() >= 1.0) && (this.XfD.JoH() >= 1.0)) { this.qIJ.bqj(); } }; wfN.prototype.setActiveLevel = function(Vro, HEh) { if (!this.sQa) return acp( "setActiveLevel() cannot be called until the engine is loaded (use an onLoadGame event listener)." ); if (typeof(HEh) == 'undefined') HEh = true; ; this.Iau = JwD( this.asW.Levels.Level, { Name: Vro } ); if (!this.Iau) { return acp("Could not find level definition: " + Vro ); } if (!this.XfD.lookupLevel( Vro )) { return acp("Level is not loaded: " + Vro); } this.DQG = Fjr( this.XfD.lookupLevel( Vro ) ); if (!this.DQG.layers) this.DQG.layers = {}; this.gQM = Vro; this.fireHandler('onInitLevel'); if (HEh && this.Iau.Layers && this.Iau.Layers.Layer) { var KIO = Esx( this.Iau.Layers.Layer ); for (var nzz = 0, _aT = KIO.length; nzz < _aT; nzz++) { var lvX = KIO[nzz]; ; var yXA = this.DQG.layers[ lvX.Name ]; var dms = qBq.getPlane( lvX.Name ); if (dms) dms.reset(); switch (lvX.Type) {
case 'tile': if (!dms) dms = new TilePlane( lvX.Name ); dms.setZIndex( lvX.ZIndex ); dms.setScrollSpeed( lvX.ScrollRatio ); if (lvX.Tileset) { var JYj = lvX.Tileset; var qkb = JwD( this.asW.Tilesets.Tileset, { Name: JYj } ); if (!qkb) return acp("Could not locate tileset definition: " + JYj); dms.tileImagePath = qkb.Path.replace(/\/$/, ''); dms.setTileSize( qkb.TileWidth, qkb.TileHeight ); } else return acp("Layer has no tile set specified: " + lvX.Name); if (yXA) { if (yXA.data) dms.setData( yXA.data, 'data' ); if (yXA.map) dms.setMap( yXA.map ); if (yXA.objectData) dms.setData( yXA.objectData, 'objectData' ); } qBq.attach(dms); break; case 'sprite': if (!dms) dms = new SpritePlane( lvX.Name ); dms.setZIndex( lvX.ZIndex ); dms.setScrollSpeed( lvX.ScrollRatio ); qBq.attach(dms); if (yXA) dms.setupAether( yXA ); break; } } } qBq.setVirtualSize( this.Iau.Width, this.Iau.Height ); qBq.setBackground({ color: this.Iau.BackgroundColor, url: this.Iau.BackgroundImage, xMode: this.Iau.BackgroundXMode, yMode: this.Iau.BackgroundYMode, xDiv: this.Iau.BackgroundXDiv, yDiv: this.Iau.BackgroundYDiv }); qBq.ltl = true; };
wfN.prototype.saveLevelState = function() { if (!this.DQG) { return acp("Cannot save level state, no level is active"); } this.XfD.hWO[this.gQM] = Fjr( this.DQG ); }; wfN.prototype.restoreLevelState = function() { if (!this.gQM) { return acp("Cannot restore level, no level is active"); } this.setActiveLevel( this.gQM ); }; wfN.prototype.run = function() { if (!this.sQa) return acp( "run() cannot be called until the engine is loaded (use an onLoadGame event listener)." ); if (!this.inGame) { ; this.inGame = true; this.UsQ = this.fMg = qNl(); this.rGc = 0; this.zwh(); } }; wfN.prototype.stop = function() { if (this.inGame) { ; this.inGame = false; if (this.SiX) clearTimeout( this.SiX ); this.SiX = null; } }; wfN.prototype.pause = function() { if (this.inGame) { this.spM = false; this.WIN = false; this.stop(); this.resetKeys(); this.fireHandler('onPause'); } }; wfN.prototype.resume = function() {
if (!this.inGame) { this.run(); this.spM = true; this.WIN = true; this.fireHandler('onResume'); } }; wfN.prototype.toggle = function() { if (this.inGame) this.pause(); else this.resume(); }; wfN.prototype.step = function() { if (!this.inGame) { this.inGame = true; this.logic(); this.draw(); this.ghs.SaR(false); this.inGame = false; } }; wfN.prototype.zwh = function() { this.SiX = null; if (this.inGame) { var kHp = qNl(); this.Bu_.lastBetweenElapsed = kHp - this.fMg; if (this.EsV) { var YSd = 1 / this.Mo_; this.rGc += ( (kHp - this.UsQ) / YSd ); if (this.rGc < 1) this.rGc = 1; if (this.rGc > this.KtM) this.rGc = this.KtM; var WBO = 0; while (this.rGc > 0) { this.logic(); this.rGc--; WBO++; } this.Bu_.numLogics = WBO; } else { this.logic();
this.Bu_.numLogics = 1; } this.draw(); this.ghs.SaR(false); var OTV = parseInt(kHp, 10); if (OTV != this.Bu_.akj) { this.Bu_.F_Q += this.Bu_.Ino; if (!this.Bu_.WgR) this.Bu_.WgR = OTV - 1; this.Bu_.ryX = this.Bu_.F_Q / (OTV - this.Bu_.WgR); this.Bu_.oPW = this.Bu_.Ino; this.Bu_.Ino = 0; this.Bu_.akj = OTV; } this.Bu_.Ino++; var sQs = qNl(); var uiv = 1 / this.Mo_; var xAh = sQs - this.fMg; if (!this.vNC) this.vNC = uiv; var JZI = this.vNC - (xAh - uiv); if (JZI > uiv) JZI = uiv; else if (JZI < 0.001) JZI = 0.001; this.SiX = setTimeout( function() { LKR.zwh(); }, Math.floor(JZI * 1000) ); this.UsQ = kHp; this.fMg = sQs; this.vNC = JZI; } }; wfN.prototype.logic = function() { var UaG = qNl(); this.fireHandler('onLogic', this.logicClock); this.Zgt.logic(); if (this.XSo[this.yVo]) { var QDC = this.XSo[this.yVo]; if (typeof(QDC) == 'function') QDC( this.logicClock ); else if (JZc(QDC)) { if (typeof(QDC[1]) == 'function') QDC[1].apply(QDC[0], [this.logicClock]); else QDC[0][ QDC[1] ].apply(QDC[0], [this.logicClock]); } else if (window[QDC]) window[QDC](this.logicClock); }
if (this._mp[this.logicClock]) { var _OF = this._mp[this.logicClock]; for (var nzz = 0, _aT = _OF.length; nzz < _aT; nzz++) { var tjG = _OF[nzz]; if (typeof(tjG.handler) == 'function') { tjG.handler.apply( window, tjG.args ); } else { ; this.fireHandler.apply( this, DJl([tjG.handler], tjG.args) ); } } delete this._mp[this.logicClock]; } this.logicClock++; this.Bu_.lastLogicElapsed = qNl() - UaG; }; wfN.prototype.draw = function() { var UaG = qNl(); this.fireHandler('onDraw'); this.drawClock++; this.Bu_.lastDrawElapsed = qNl() - UaG; }; wfN.prototype.scheduleEvent = function(pRX, XcS) { if (!this.sQa) return acp( "scheduleEvent() cannot be called until the engine is initialized (use an onInit or onLoadGame event listener)." ); if (!pRX || (pRX < 0)) pRX = 0; pRX += this.logicClock; if (!this._mp[pRX]) this._mp[pRX] = []; JGI( this._mp[pRX], { handler: XcS, args: hmd( arguments, 2 ) } ); }; wfN.prototype.clearSchedule = function() { this._mp = {}; }; wfN.prototype.attach = function(zhp) { if (!this.sQa) return acp( "attach() cannot be called until the engine is initialized (use an onInit or onLoadGame event listener)." ); if (!zhp.portWidth || !zhp.portHeight) return acp("Non-port object passed to Game.attach"); zhp.game = this;
JGI( this.NvE, zhp ); if (zhp.init) zhp.init(); }; wfN.prototype.getPortal = function(jwX) { return JwD( this.NvE, { id: jwX } ); }; wfN.prototype.removeAllTweens = function() { this.Zgt.removeAll(); }; wfN.prototype.setKeyHandler = function(LwV, XcS) { if (!this.sQa) return acp( "setKeyHandler() cannot be called until the engine is initialized (use an onInit or onLoadGame event listener)." ); var aMC = this.keys[LwV]; if (!aMC) return acp( "Cannot find keyboard definition for: " + LwV ); if (!aMC.handlers) aMC.handlers = []; JGI( aMC.handlers, XcS ); }; wfN.prototype.resetKeys = function() { ; for (var LwV in this.keys) { this.keys[LwV].down = false; } }; wfN.prototype.changeZoomLevel = function(MUq) { if (this.changingZoom) return; if (!this.sQa) return acp( "changeZoomLevel() cannot be called until the engine is loaded (use an onLoadGame event listener)." ); if (this.inGame) { this.RbJ = true; this.stop(); setTimeout( function() { LKR.changeZoomLevel(MUq); }, 250 ); return; } this.changingZoom = true; ; for (var nzz = 0, _aT = this.NvE.length; nzz < _aT; nzz++) { this.NvE[nzz].reset(); this.NvE[nzz].KCz = this.NvE[nzz].tdu; this.NvE[nzz].tdu = MUq; } this.hZe.KRr = "One Moment Please..."; this.hZe.NWN(0, 1);
this.hZe.show(); setTimeout( function() { LKR.Gwb(); }, 1 ); }; wfN.prototype.Gwb = function() { this.ghs.reloadAll(); this.FCk.reloadAll(); this.hZe.YQG(); this.iFF(); }; wfN.prototype.iFF = function() { var z_D = ( this.ghs.JoH() + this.FCk.JoH() + this.hZe.etv() ) / 3; this.hZe.NWN( z_D, 1 ); if (z_D >= 1.0) { this.hZe.hide(); for (var nzz = 0, _aT = this.NvE.length; nzz < _aT; nzz++) { var zhp = this.NvE[nzz]; if (zhp.init) zhp.init(); zhp.setScroll( zhp.scrollX, zhp.scrollY ); zhp.draw(true); } if (!this.HpS) this.QZW.bCP( qBq.portWidth * qBq.tdu ); this.fireHandler('onZoom', qBq.tdu); ; if (this.RbJ) { this.RbJ = false; this.run(); } else if (!this.HpS) { this.changingZoom = false; this.QZW.UWZ(); } this.changingZoom = false; } else { setTimeout( function() { LKR.iFF(); }, 250 ); }
}; wfN.prototype.Vyl = function(kWP) { if (kWP.match(/^(\w+)\/(.+)$/)) { var e_V = RegExp.$1; var zdv = RegExp.$2; return this.PQ_ + 'api/view/users/' + e_V + '/images/' + zdv; } return 'ERROR'; }; wfN.prototype.getXML = function(kWP) { if (!this.sQa) return acp( "getXML() cannot be called until the engine is loaded (use an onLoadGame event listener)." ); var HCD = this.qcm.lookupFile(kWP); if (HCD && HCD.loaded && HCD.data) return HCD.data; else return null; }; wfN.prototype.setKeyDefinition = function(Vro, nHd) { if (!this.sQa) return acp( "setKeyDefinition() cannot be called until the engine is initialized (use an onInit or onLoadGame event listener)." ); this.keys[Vro] = { code: Esx(nHd), down: false }; }; wfN.prototype.getLocalMousePosition = function(e, HCD) { return Lvj(e, HCD); }; wfN.prototype.eeB = function(luN) { if (this.AEU[luN]) return this.AEU[luN]; else { var TyF = String.fromCharCode(luN); if ( ((luN >= 65) && (luN <= 90)) || ((luN >= 45) && (luN <= 57)) ) { return TyF; } else { return 'Unknown (#' + luN + ')'; } } }; wfN.prototype.nEj = function(luN) { switch (luN) { case 59: luN = 186; break; case 91: case 93: luN = 224; break; }
return luN; }; var q_w = null; function TWD(e) { if (window.event) e = window.event; if (LKR && LKR.loaded && !LKR.inGame && !LKR.WIN && !LKR.HpS && !LKR.QZW.oZI && LKR.clickResume && !Debug.enabled && SKE(e, el('effect_port'))) { LKR.resume(); return stop_event(e); } if (!LKR || !LKR.WIN) return true; var Sws = e.button; ; var ydr = e.target ? e.target : e.srcElement; while (ydr && !ydr.tagName.match(/^(BODY|HTML)$/) && !ydr.captureMouse) { ydr = ydr.parentNode ? ydr.parentNode : ydr.parentElement; } var qlK = Lvj(e); LKR.mouseIsDown = true; LKR.mousePt.set( qlK ); if (ydr && ydr.captureMouse && (typeof(qBq) != 'undefined') && qBq.div) { q_w = ydr; ; var qlK = qBq.getMouseCoords(); if (qlK) { if (q_w.captureMouse.bNe) { qlK.x -= q_w.captureMouse.x; qlK.y -= q_w.captureMouse.y; } if (q_w.captureMouse.handlers && q_w.captureMouse.handlers.mousedown) { var jIE = pass_event_if( q_w.captureMouse.fireHandler('mousedown', qlK, Sws, e), e ); if (!jIE) return false; }
else if (q_w.captureMouse.onMouseDown) { var kuI = Esx( q_w.captureMouse.onMouseDown ); for (var nzz = 0, _aT = kuI.length; nzz < _aT; nzz++) { var jIE = pass_event_if( (typeof(kuI[nzz]) == 'function') ? kuI[nzz].apply( q_w.captureMouse, [qlK, Sws, e]) : window[kuI[nzz]].apply( q_w.captureMouse, [qlK, Sws, e]), e ); if (!jIE) return false; } } } } var jIE = LKR.fireHandler('onMouseDown', qlK, Sws, e); return pass_event_if( LKR.HpS ? jIE : !LKR.inGame, e ); } function Qtg(e) { if (!LKR) return true; if (window.event) e = window.event; var qaz = Lvj(e); if ((qaz.x < 0) || (qaz.y < 0)) return true; LKR.mousePt.set( qaz ); if (!LKR.WIN) return true; if (q_w) { var qlK = qBq.getMouseCoords(true); if (qlK) { if (q_w.captureMouse.bNe) { qlK.x -= q_w.captureMouse.x; qlK.y -= q_w.captureMouse.y; } if (q_w.captureMouse.handlers && q_w.captureMouse.handlers.mousemove) { var jIE = q_w.captureMouse.fireHandler('mousemove', qlK, e); if (!jIE) return true; } else if (q_w.captureMouse.onMouseMove) { var kuI = Esx( q_w.captureMouse.onMouseMove ); for (var nzz = 0, _aT = kuI.length; nzz < _aT; nzz++) { var jIE = (typeof(kuI[nzz]) == 'function') ? kuI[nzz].apply( q_w.captureMouse, [qlK, e]) : 
window[kuI[nzz]].apply( q_w.captureMouse, [qlK, e]); if (!jIE) return true; } } } } if (LKR.loaded && LKR.inGame && !q_w && qBq.handlers && qBq.handlers.mousemove) { var oa_ = qBq.getMouseCoords(); if (oa_) { qBq.fireHandler( 'mousemove', oa_, e); } } LKR.fireHandler('onMouseMove', qaz, e); return true; } function VdJ(e) { if (!LKR || !LKR.WIN) return true; if (window.event) e = window.event; var Sws = e.button; ; var qlK = Lvj(e); LKR.mouseIsDown = false; LKR.mousePt.set( qlK ); if (q_w) { var qlK = qBq.getMouseCoords(); if (!qlK) qlK = new Point(-1, -1); if (qlK) { if (q_w.captureMouse.bNe) { qlK.x -= q_w.captureMouse.x; qlK.y -= q_w.captureMouse.y; } if (q_w.captureMouse.handlers && q_w.captureMouse.handlers.mouseup) { var Nmt = q_w.captureMouse; q_w = null; var jIE = Nmt.fireHandler('mouseup', qlK, Sws, e); if (!jIE) return stop_event(e); } else { var kuI = q_w.captureMouse.onMouseUp ? Esx( q_w.captureMouse.onMouseUp ) : []; var Nmt = q_w.captureMouse;
q_w = null; for (var nzz = 0, _aT = kuI.length; nzz < _aT; nzz++) { var jIE = (typeof(kuI[nzz]) == 'function') ? kuI[nzz].apply( Nmt, [qlK, Sws, e]) : window[kuI[nzz]].apply( Nmt, [qlK, Sws, e]); if (!jIE) return stop_event(e); } } } } var jIE = LKR.fireHandler('onMouseUp', qlK, Sws, e); return pass_event_if( LKR.HpS ? jIE : !LKR.inGame, e ); } function HxC(e) { if (!LKR || !LKR.WIN) return true; if (window.event) e = window.event; var UWI = 0; if (e.wheelDelta) { UWI = e.wheelDelta / 120; if (window.opera) UWI = -UWI; } else if (e.detail) { UWI = -e.detail / 3; } if (!UWI) return true; UWI = 0 - UWI; var wdq = false; if (LKR.loaded && LKR.inGame && qBq.handlers && qBq.handlers.mousewheel) { wdq = true; var oa_ = qBq.getMouseCoords(); if (oa_) { qBq.fireHandler( 'mousewheel', UWI, e); } } var jIE = LKR.fireHandler('onMouseWheel', UWI, e); if (!wdq && !LKR.HpS) return true; return pass_event_if( LKR.HpS ? jIE : !LKR.inGame, e ); } function iWJ(e) { if (!e) e = window.event;
if (ua.safari2) TWD(e); return pass_event_if( !LKR.inGame, e ); } function GEu(e) { if (window.event) e = window.event; var GPM = LKR.nEj( e.keyCode ); if (LKR && LKR.loaded && !LKR.inGame && !LKR.spM && LKR.clickResume && LKR.dHs && LKR.keys && LKR.keys[LKR.dHs] && Bcc( LKR.keys[LKR.dHs].code, GPM )) { LKR.resume(); return stop_event(e); } if (!LKR || !LKR.spM) return true; if (e && (e.metaKey || e.ctrlKey) && !LKR.HpS) return true; ; if (LKR.handlers.keyintercept) { return pass_event_if( LKR.fireHandler('keyintercept', e, GPM), e ); } var FWf = ''; for (var bku in LKR.keys) { var aMC = LKR.keys[bku]; for (var Bhi = 0; Bhi < aMC.code.length; Bhi++) { if (GPM == aMC.code[Bhi]) { FWf = bku; if (!aMC.down || LKR.autoKey || aMC.autoKey) { aMC.down = true; if (aMC.handlers) { for (var lGh = 0; lGh < aMC.handlers.length; lGh++) { var XcS = aMC.handlers[lGh]; if (XcS.destroyed) { aMC.handlers.splice( lGh, 1 ); lGh--; } else if (XcS.onKeyDown) XcS.onKeyDown(bku);
} } } break; } } } var jIE = LKR.fireHandler('onKeyDown', FWf, GPM, e); return pass_event_if( LKR.HpS ? jIE : !LKR.inGame, e ); } function Fev(e) { if (!LKR || !LKR.spM) return true; if (window.event) e = window.event; if (e && (e.metaKey || e.ctrlKey) && !LKR.HpS) return true; var GPM = LKR.nEj( e.keyCode ); var FWf = ''; ; for (var bku in LKR.keys) { var aMC = LKR.keys[bku]; for (var Bhi = 0; Bhi < aMC.code.length; Bhi++) { if (GPM == aMC.code[Bhi]) { FWf = bku; aMC.down = false; if (aMC.handlers) { for (var lGh = 0; lGh < aMC.handlers.length; lGh++) { var XcS = aMC.handlers[lGh]; if (XcS.destroyed) { aMC.handlers.splice( lGh, 1 ); lGh--; } else if (XcS.onKeyUp) XcS.onKeyUp(bku); } } break; } } } var jIE = LKR.fireHandler('onKeyUp', FWf, GPM, e); return pass_event_if( LKR.HpS ? jIE : !LKR.inGame, e ); }
function cYO(e) { if (!LKR || !LKR.spM) return true; if (window.event) e = window.event; if (e && (e.metaKey || e.ctrlKey) && !LKR.HpS) return true; return pass_event_if( LKR.HpS ? true : !LKR.inGame, e ); } function pass_event_if(yVo, e) { if (yVo) return true; else return stop_event(e); } function qLX(e) { if (!e) e = window.event; if (e && !e.metaKey && !e.ctrlKey) { return stop_event(e); } else return true; } function stop_event(e) { if (e.preventDefault) { e.preventDefault(); e.stopPropagation(); } else { e.returnValue = false; e.cancelBubble = true; } return false; } if (window.addEventListener) { window.addEventListener( 'mousedown', TWD, false ); window.addEventListener( 'mousemove', Qtg, false ); window.addEventListener( 'mouseup', VdJ, false ); window.addEventListener( 'keydown', GEu, false ); window.addEventListener( 'keyup', Fev, false ); window.addEventListener( 'DOMMouseScroll', HxC, false); if (ua.ff) window.addEventListener( 'keypress', cYO, false ); } else { if (document.captureEvents) { document.captureEvents(Event.MOUSEDOWN);
document.captureEvents(Event.MOUSEMOVE); document.captureEvents(Event.MOUSEUP); document.captureEvents(Event.KEYDOWN); document.captureEvents(Event.KEYUP); } window.onmousedown = document.onmousedown = document.body.onmousedown = TWD; window.onmousemove = document.onmousemove = document.body.onmousemove = Qtg; window.onmouseup = document.onmouseup = document.body.onmouseup = VdJ; window.onkeydown = document.onkeydown = GEu; window.onkeyup = document.onkeyup = Fev; } window.oncontextmenu = document.oncontextmenu = iWJ; window.onmousewheel = document.onmousewheel = HxC; ZLf.prototype.onError = function(jwX, lFq) { return acp("A communication error occured with the multiplayer servers. Please refresh your browser and try again.\n\n" + lFq); }; if (ua.ie) { window.attachEvent( 'onunload', function() { if (LKR && LKR.OiL) { for (var nzz = 0, _aT = LKR.OiL.length; nzz < _aT; nzz++) { var jwX = LKR.OiL[nzz]; var HCD = document.getElementById(jwX); if (HCD && (HCD.readyState == 4)) { ; for (var i in HCD) { if (typeof HCD[i] == "function") { HCD[i] = null; } } HCD.parentNode.removeChild(HCD); } } } } ); } LKR = new wfN(); Effect.Game = $G = LKR; window.gGameControl = { pause: function() { LKR.pause(); }, resume: function() { LKR.resume(); },
setClickResume: function(enabled) { LKR.clickResume = enabled; } }; if (document.addEventListener) { document.addEventListener( "DOMContentLoaded", function() { document.removeEventListener( "DOMContentLoaded", arguments.callee, false ); LKR.init(); }, false ); window.addEventListener( "load", function() { window.removeEventListener( "load", arguments.callee, false ); LKR.init(); }, false ); } else if (window.attachEvent) { window.attachEvent("onload", function() { setTimeout( function() { LKR.init(); }, 1000 ); }); }; 
if (!window.Debug) window.Debug={trace:function(){}};Effect.Game.setGameDef({"BackgroundColor": "#000000","Fonts": {"Font": [{"GlyphHeight": 14,"Enabled": 1,"Color": "#FFFFFF","AntiAlias": 1,"Size": 14,"GlyphWidth": 12,"Path": "/fonts/helvetiker_bold.ttf","Name": "HelvBold14"},{"GlyphHeight": 18,"Enabled": 1,"Color": "#FFFFFF","AntiAlias": 1,"Size": 18,"GlyphWidth": 16,"Path": "/fonts/OCRBStd.otf","Name": "OCRBStdBold18"}]},"ReleaseTitle": "","Resources": {"Resource": ""},"Plugin": "","DisableSharing": 1,"Logo": "mchang/e52d77c6.png","GameID": "absorb-hd","AudioMusicVolume": 0.75,"Zoom": "No","ToolbarColor": "#333333","ClonedFrom": "chrome-absorb","Sprites": {"Sprite": [{"Icon": "","Requires": {"Require": ""},"Preload": 1,"Height": "","Width": "","Place": 0,"Persist": 0,"Resources": {"Resource": ""},"Properties": {"Property": ""},"Name": "SidebarBack"},{"Icon": "","Requires": {"Require": ""},"Preload": 1,"Height": "","Width": "","Place": 0,"Persist": 0,"Resources": {"Resource": [{"Filter": "","_id": 777,"Path": "/images/hd/frame-bottom.png"},{"Filter": "","_id": 778,"Path": "/images/hd/frame-top.png"}]},"Properties": {"Property": ""},"Name": "HDHorizFrame"},{"Icon": "","Requires": {"Require": {"_id": 778,"Name": "OrbClock"}},"Preload": 1,"Height": "","Width": "","Place": 0,"Persist": 0,"Resources": {"Resource": ""},"OldName": "OrbClockFast","Properties": {"Property": ""},"Name": "OrbClockFast"},{"Icon": "","Requires": {"Require": ""},"Preload": 0,"Height": "","Width": "","Place": 0,"Persist": 0,"Resources": {"Resource": ""},"OldName": "ScreenFlash","Properties": {"Property": ""},"Name": "ScreenFlash"},{"Icon": "","Requires": {"Require": ""},"Preload": 0,"Height": "","Width": "","Place": 0,"Persist": 0,"Resources": {"Resource": [{"Filter": "","_id": 778,"Path": "/images/ui/options/onscreen_blue.png"},{"Filter": "","_id": 779,"Path": "/images/ui/options/onscreen_green.png"},{"Filter": "","_id": 780,"Path": "/images/ui/options/onscreen_red.png"},{"Filter": "","_id": 781,"Path": "/images/ui/options/onscreen_yellow.png"}]},"Properties": {"Property": ""},"Name": "MobileColorSwitch"},{"Icon": "","Requires": {"Require": ""},"Preload": 1,"Height": "","Width": "","Place": 0,"Persist": 0,"Resources": {"Resource": [{"Filter": "","_id": 790,"Path": "/images/hd/combo_button_credits.png"},{"Filter": "","_id": 791,"Path": "/images/ui/combo_button_design-notes.png"},{"Filter": "","_id": 792,"Path": "/images/ui/combo_button_effectgames.png"},{"Filter": "","_id": 793,"Path": "/images/ui/combo_button_facebook_sm.png"},{"Filter": "","_id": 794,"Path": "/images/ui/combo_button_goldcartridge.png"},{"Filter": "","_id": 795,"Path": "/images/ui/combo_button_how-to-play.png"},{"Filter": "","_id": 796,"Path": "/images/hd/combo_button_pause.png"},{"Filter": "","_id": 797,"Path": "/images/ui/combo_button_play-again_sm.png"},{"Filter": "","_id": 798,"Path": "/images/ui/combo_button_play_curly.png"},{"Filter": "","_id": 799,"Path": "/images/hd/combo_button_resume.png"},{"Filter": "","_id": 800,"Path": "/images/ui/combo_button_twitter_sm.png"},{"Filter": "","_id": 801,"Path": "/images/hd/combo_button_back.png"}]},"OldName": "GameButton","Properties": {"Property": ""},"Name": "GameButton"},{"Icon": "","Requires": {"Require": ""},"Preload": 1,"Height": "","Width": "","Place": 0,"Persist": 0,"Resources": {"Resource": [{"Filter": "","_id": 842,"Path": "/images/ui/text.png"}]},"Properties": {"Property": ""},"Name": "TextLink"},{"Icon": "","Requires": {"Require": ""},"Preload": 1,"Height": "","Width": "","Place": 0,"Persist": 0,"Resources": {"Resource": [{"Filter": "","_id": 840,"Path": "/images/sprites/lives/life_infinite.png"}]},"Properties": {"Property": ""},"Name": "LifeOrbInfinite"},{"Icon": "","Requires": {"Require": ""},"Preload": 1,"Height": "","Width": "","Place": 0,"Persist": 0,"Resources": {"Resource": [{"Filter": "","_id": 834,"Path": "/images/sprites/orbs/orb_chrome.png"}]},"OldName": "OrbWildcard","Properties": {"Property": ""},"Name": "OrbWildcard"},{"Icon": "","Requires": {"Require": ""},"Preload": 1,"Height": "","Width": "","Place": 0,"Persist": 0,"Resources": {"Resource": [{"Filter": "","_id": 774,"Path": "/images/sprites/orbs/orb_dark.png"}]},"Properties": {"Property": ""},"Name": "OrbDark"},{"Icon": "","Requires": {"Require": ""},"Preload": 1,"Height": "","Width": "","Place": 0,"Persist": 0,"Resources": {"Resource": [{"Filter": "","_id": 781,"Path": "/images/sprites/orbs/orb_white_rotate.png"}]},"OldName": "OrbExtraLife","Properties": {"Property": ""},"Name": "OrbExtraLife"},{"Icon": "","Requires": {"Require": ""},"Preload": 1,"Height": "","Width": "","Place": 0,"Persist": 0,"Resources": {"Resource": [{"Filter": "","_id": 773,"Path": "/images/sprites/orbs/orb_clock_pin.png"},{"Filter": "","_id": 774,"Path": "/images/sprites/orbs/orb_clockface.png"},{"Filter": "","_id": 775,"Path": "/images/sprites/orbs/orb_clockhour_rotate.png"},{"Filter": "","_id": 776,"Path": "/images/sprites/orbs/orb_clockminute_rotate.png"},{"Filter": "","_id": 777,"Path": "/images/sprites/orbs/orb_clocksecond_rotate.png"},{"Filter": "","_id": 779,"Path": "/images/sprites/orbs/orb_white.png"}]},"OldName": "OrbClock","Properties": {"Property": ""},"Name": "OrbClock"},{"Icon": "","Requires": {"Require": ""},"Preload": 1,"Height": "","Width": "","Place": 0,"Persist": 0,"Resources": {"Resource": [{"Filter": "","_id": 791,"Path": "/images/ui/ingamemessage_01-desktop.png"},{"Filter": "","_id": 792,"Path": "/images/ui/ingamemessage_01-handheld.png"},{"Filter": "","_id": 793,"Path": "/images/ui/ingamemessage_fastforward.png"},{"Filter": "","_id": 794,"Path": "/images/ui/ingamemessage_magnetic.png"},{"Filter": "","_id": 795,"Path": "/images/ui/ingamemessage_minefield.png"},{"Filter": "","_id": 796,"Path": "/images/ui/ingamemessage_repulsion.png"},{"Filter": "","_id": 797,"Path": "/images/ui/ingamemessage_rewind.png"},{"Filter": "","_id": 798,"Path": "/images/ui/ingamemessage_slowmotion.png"},{"Filter": "","_id": 799,"Path": "/images/ui/ingamemessage_windy.png"},{"Filter": "","_id": 800,"Path": "/images/ui/ingamemessage_chromeorb.png"}]},"OldName": "InGameMessage","Properties": {"Property": ""},"Name": "InGameMessage"},{"Icon": "","Requires": {"Require": ""},"Preload": 1,"Height": "","Width": "","Place": 0,"Persist": 0,"Resources": {"Resource": [{"Filter": "","_id": 866,"Path": "/images/sprites/lives/life_blue.png"},{"Filter": "","_id": 867,"Path": "/images/sprites/lives/life_green.png"},{"Filter": "","_id": 870,"Path": "/images/sprites/lives/life_white.png"},{"Filter": "","_id": 871,"Path": "/images/sprites/lives/life_red.png"},{"Filter": "","_id": 872,"Path": "/images/sprites/lives/life_yellow.png"}]},"OldName": "LifeOrb","Properties": {"Property": ""},"Name": "LifeOrb"},{"Icon": "","Requires": {"Require": ""},"Preload": 1,"Height": "","Width": "","Place": 0,"Persist": 0,"Resources": {"Resource": ""},"Properties": {"Property": ""},"Name": "LogoTimerBack"},{"Icon": "","Requires": {"Require": ""},"Preload": 1,"Height": "","Width": "","Place": 0,"Persist": 0,"Resources": {"Resource": [{"Filter": "","_id": 775,"Path": "/images/hd/timer.png"}]},"OldName": "LogoTimer","Properties": {"Property": ""},"Name": "LogoTimer"},{"Icon": "","Requires": {"Require": ""},"Preload": 1,"Height": "","Width": "","Place": 0,"Persist": 0,"Resources": {"Resource": [{"Filter": "","_id": 821,"Path": "/images/sprites/rings/ring_blue_absorb01_fade.png"},{"Filter": "","_id": 822,"Path": "/images/sprites/rings/ring_blue_absorb02_fade.png"},{"Filter": "","_id": 823,"Path": "/images/sprites/rings/ring_green_absorb01_fade.png"},{"Filter": "","_id": 824,"Path": "/images/sprites/rings/ring_green_absorb02_fade.png"},{"Filter": "","_id": 825,"Path": "/images/sprites/rings/ring_red_absorb01_fade.png"},{"Filter": "","_id": 826,"Path": "/images/sprites/rings/ring_red_absorb02_fade.png"},{"Filter": "","_id": 827,"Path": "/images/sprites/rings/ring_yellow_absorb01_fade.png"},{"Filter": "","_id": 828,"Path": "/images/sprites/rings/ring_yellow_absorb02_fade.png"},{"Filter": "","_id": 829,"Path": "/images/sprites/rings/ring_white_absorb01_fade.png"},{"Filter": "","_id": 830,"Path": "/images/sprites/rings/ring_white_absorb02_fade.png"}]},"OldName": "OrbShockwave","Properties": {"Property": ""},"Name": "OrbShockwave"},{"Icon": "","Requires": {"Require": ""},"Preload": 0,"Height": "","Width": "","Place": 0,"Persist": 0,"Resources": {"Resource": ""},"OldName": "OrbParticle","Properties": {"Property": ""},"Name": "OrbParticle"},{"Icon": "","Requires": {"Require": ""},"Preload": 1,"Height": "","Width": "","Place": 0,"Persist": 0,"Resources": {"Resource": [{"Filter": "","_id": 793,"Path": "/images/sprites/rings/ring_blue.png"},{"Filter": "","_id": 794,"Path": "/images/sprites/rings/ring_blue_trail_fade.png"},{"Filter": "","_id": 795,"Path": "/images/sprites/rings/ring_green.png"},{"Filter": "","_id": 796,"Path": "/images/sprites/rings/ring_green_trail_fade.png"},{"Filter": "","_id": 797,"Path": "/images/sprites/rings/ring_red.png"},{"Filter": "","_id": 798,"Path": "/images/sprites/rings/ring_red_trail_fade.png"},{"Filter": "","_id": 799,"Path": "/images/sprites/rings/ring_white.png"},{"Filter": "","_id": 800,"Path": "/images/sprites/rings/ring_white_trail_fade.png"},{"Filter": "","_id": 801,"Path": "/images/sprites/rings/ring_yellow.png"},{"Filter": "","_id": 802,"Path": "/images/sprites/rings/ring_yellow_trail_fade.png"},{"Filter": "","_id": 803,"Path": "/images/sprites/rings/rings.png"}]},"OldName": "Ring","Properties": {"Property": ""},"Name": "Ring"},{"Icon": "","Requires": {"Require": ""},"Preload": 1,"Height": "","Width": "","Place": 0,"Persist": 0,"Resources": {"Resource": [{"Filter": "","_id": 875,"Path": "/images/sprites/orbs/orb_blue_rotate.png"},{"Filter": "","_id": 876,"Path": "/images/sprites/orbs/orb_green_rotate.png"},{"Filter": "","_id": 879,"Path": "/images/sprites/orbs/orb_shadow.png"},{"Filter": "","_id": 880,"Path": "/images/sprites/orbs/orb_red_rotate.png"},{"Filter": "","_id": 881,"Path": "/images/sprites/orbs/orb_yellow_rotate.png"}]},"OldName": "Orb","Properties": {"Property": ""},"Name": "Orb"}]},"PortWidth": 1024,"Tilesets": {"Tileset": []},"FrameRate": 60,"Pro": 0,"AudioMasterVolume": 1.0,"Envs": {"Env": []},"Keys": {"Key": [{"Codes": 52,"OldName": "color_orange","Name": "color_yellow","Title": "Yellow"},{"Codes": 51,"Name": "color_green","Title": "Green"},{"Codes": 50,"OldName": "color_pink","Name": "color_red","Title": "Red"},{"Codes": 49,"Name": "color_blue","Title": "Blue"},{"Codes": 37,"OldName": "switch_left","Name": "switch_left","Title": "Color Left"},{"Codes": 39,"OldName": "switch_right","Name": "switch_right","Title": "Color Right"},{"Codes": "13, 27","OldName": "start","Name": "start","Title": "Pause / Resume"},{"Codes": 88,"Name": "exit","Title": "Exit"}]},"Tiles": {"Tile": []},"PreloadAll": 0,"ReleaseNotesHTML": "<div class=\"dx_paragraph\">This is an beta test release for Google and Effect Games.  All features are implemented at this point.  Gameplay has been sped up 2X from the alpha version.  This game does not work in IE 6.</div>\n<div class=\"dx_paragraph\">Cheats enabled:</div>\n<div class=\"dx_deflist\"><table class=\"dx_deflist_table\">\n<tr><td class=\"dx_deflist_key\"><nobr>C</nobr></td><td class=\"dx_deflist_value\">Spawn a clock orb.</td></tr>\n<tr><td class=\"dx_deflist_key\"><nobr>E</nobr></td><td class=\"dx_deflist_value\">Spawn a 1up orb.</td></tr>\n<tr><td class=\"dx_deflist_key\"><nobr>W</nobr></td><td class=\"dx_deflist_value\">Spawn a wildcard orb.</td></tr>\n<tr><td class=\"dx_deflist_key\"><nobr>D</nobr></td><td class=\"dx_deflist_value\">Spawn a dark orb.</td></tr>\n<tr><td class=\"dx_deflist_key\"><nobr>7</nobr></td><td class=\"dx_deflist_value\">Jump to next level, and set behavior to \"wind\".</td></tr>\n<tr><td class=\"dx_deflist_key\"><nobr>8</nobr></td><td class=\"dx_deflist_value\">Jump to next level, and set behavior to \"rewind\"</td></tr>\n<tr><td class=\"dx_deflist_key\"><nobr>9</nobr></td><td class=\"dx_deflist_value\">Jump to next level, and set behavior to \"magnetic\"</td></tr>\n<tr><td class=\"dx_deflist_key\"><nobr>0</nobr></td><td class=\"dx_deflist_value\">Jump to next level, and set behavior to \"repulse\"</td></tr>\n</table></div>\n\n<div class=\"dx_paragraph\">Have fun!</div>","Title": "absOrb HD","BackgroundImage": "","SkipFrames": 1,"Levels": {"Level": []},"SplashImage": "","ZoomFilter": "Sharp","ZoomDefault": 1,"PortHeight": 748,"Language": "en-us","Version": 1.0,"Created": 1262846184.84632,"Modified": 1289427831.29471,"Genre": "Shooter","AudioSFXVolume": 1.0,"AudioVideoVolume": 1.0,"Sounds": {"Sound": [{"Volume": 1.0,"Preload": 1,"Path": "/audio/effects/bad_orb.mp3","Loop": 0,"Balance": 0.0,"Category": "sfx","Multiplex": 1},{"Volume": 1.0,"Preload": 1,"Path": "/audio/effects/beat_challenge.mp3","Loop": 0,"Balance": 0.0,"Category": "sfx","Multiplex": 0},{"Volume": 1.0,"Preload": 1,"Path": "/audio/effects/explosion.mp3","Loop": 0,"Balance": 0.0,"Category": "sfx","Multiplex": 0},{"Volume": 1.0,"Preload": 1,"Path": "/audio/effects/game_over.mp3","Loop": 0,"Balance": 0.0,"Category": "sfx","Multiplex": 0},{"Volume": 1.0,"Preload": 1,"Path": "/audio/effects/good_orb.mp3","Loop": 0,"Balance": 0.0,"Category": "sfx","Multiplex": 1},{"Volume": 1.0,"Preload": 1,"Path": "/audio/effects/high_score.mp3","Loop": 0,"Balance": 0.0,"Category": "sfx","Multiplex": 0},{"Volume": 1.0,"Preload": 1,"Path": "/audio/effects/level_up.mp3","Loop": 0,"Balance": 0.0,"Category": "sfx","Multiplex": 0},{"Volume": 1.0,"Preload": 1,"Path": "/audio/effects/pause.mp3","Loop": 0,"Balance": 0.0,"Category": "sfx","Multiplex": 0},{"Volume": 1.0,"Preload": 1,"Path": "/audio/effects/start_game.mp3","Loop": 0,"Balance": 0.0,"Category": "sfx","Multiplex": 0},{"Volume": 1.0,"Preload": 1,"Path": "/audio/effects/switch_color.mp3","Loop": 0,"Balance": 0.0,"Category": "sfx","Multiplex": 1},{"Volume": 1.0,"Preload": 1,"Path": "/audio/music/music_level.mp3","Loop": 1,"Balance": 0.0,"Category": "music","Multiplex": 0},{"Volume": 1.0,"Preload": 1,"Path": "/audio/music/music_title.mp3","Loop": 1,"Balance": 0.0,"Category": "music","Multiplex": 0},{"Volume": 1.0,"Preload": 1,"Path": "/audio/effects/time_bonus.mp3","Loop": 0,"Balance": 0.0,"Category": "sfx","Multiplex": 0},{"Volume": 1.0,"Preload": 1,"Path": "/audio/effects/time_tick.mp3","Loop": 0,"Balance": 0.0,"Category": "sfx","Multiplex": 0},{"Volume": 1.0,"Preload": 1,"Path": "/audio/effects/bonus_end.mp3","Loop": 0,"Balance": 0.0,"Category": "sfx","Multiplex": 0},{"Volume": 1.0,"Preload": 1,"Path": "/audio/effects/wildcard_bonus.mp3","Loop": 0,"Balance": 0.0,"Category": "sfx","Multiplex": 0},{"Volume": 1.0,"Preload": 1,"Path": "/audio/effects/wildcard_tick.mp3","Loop": 0,"Balance": 0.0,"Category": "sfx","Multiplex": 0}]},"OggReady": 1,"AudioEnabled": 1});Effect.Game.setBaseAssetURL("assets");Effect.Game.setQuery({"mode": "sa","game": "absorb-hd","rev": "1.0b"});Effect.Game.setAssetModDate(1289356202);
